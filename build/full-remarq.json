{
  "builds": [
    {
      "name": "basics",
      "allSections": false,
      "sectionRangesInclusive": [
        { "first": 0, "last": 5 },
        { "first": 28, "last": 28 }
      ]
    },
    { "name": "full-course", "allSections": true }
  ],
  "sections": [
    {
      "sectionTitle": "Introduction",
      "lectures": [
        {
          "lectureTitle": "Hello new friend :wave:",
          "lectureLines": [
            "",
            "# Introduction",
            "",
            "Hello new friend! :wave:",
            "",
            "![This is me, Swizec](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/6300d21408f5e9f0c8f5698d266fb258.jpg)",
            "",
            "Welcome to what I hope is the best and most fun React and D3 learning resource",
            "on the internet. No TODO apps here, just fun interactive stuff that makes you",
            "look great at a dinner party.",
            "",
            "After an hour with _React + D3_, you’ll know how to make React and D3.js play",
            "together. You’ll know how to create composable data visualizations. Understand",
            "_why_ that’s a good idea, and you will have the tools to build your own library",
            "of interactive visualization components. Or use _and understand_ somebody",
            "else's.",
            "",
            "It's going to be fun!",
            "",
            "I believe learning new tech should be exciting, so I did my best to inject joy",
            "whenever I could.",
            "",
            "250+ pages as a book, 8 example apps, near 8 hours of video, a bunch of skill",
            "building blocks. :ok_hand:",
            "",
            "Going through this course you will:",
            "",
            "- build a bunch of reusable visualization components",
            "- build an interactive data dashboard",
            "- learn about reusable animation components",
            "- learn the basics of D3.js",
            "- master React",
            "- learn the basics of Redux and MobX",
            "- look into rendering rich animations on canvas",
            "- explore React alternatives like Preact and Inferno",
            "- learn about server-side rendering",
            "- learn a few basics of data science",
            "- learn some WebGL and 3D rendering",
            "",
            "You might be thinking _\"How the hell does this all fit together to help me",
            "build interactive graphs and charts?\"_. They're building blocks!",
            "",
            "First I will show you the basics. Stuff like how to make React and D3 like each",
            "other, how to approach rendering, what to do with state.",
            "",
            "Then you'll build a big project to see how it all fits together.",
            "",
            "When you're comfortable with React and D3 working together, I will show you",
            "animation. Cool things like how to approach updating components with fine",
            "grained control and how to do transitions. I'll show you how tricks from the",
            "gaming industry work on the web.",
            "",
            "Short on time? Don't worry.",
            "",
            "The initial examples work in CodeSandbox, a web-based IDE. Read the",
            "explanation, run the code, master enough React to be dangerous. You won't even",
            "have to leave the browser.",
            "",
            "In about an hour, you'll know React and D3 well enough to explore on your own,",
            "to sell the tech to your boss and your team, and to assess if the React+D3",
            "combination fits your needs.",
            "",
            "I believe learning new tech should be exciting.",
            "",
            "# Foreword",
            "",
            "I wrote the first version of React+D3 in Spring 2015 as a dare. Can I learn a",
            "thing and write a book in a month? Yes.",
            "",
            "That first version was 91 pages long and sold a few hundred copies. Great",
            "success!",
            "",
            "You are reading, and watching, the pinnacle of how this material has evolved",
            "over almost 4 years. 4 years I've been working on this. Not every day, not all",
            "the time.",
            "",
            "Little experiments here and there, launches and relaunches about once a year.",
            "Learning how to do video, exploring new approaches, hosting in-person",
            "workshops.",
            "",
            "A lot has changed.",
            "",
            "React isn't what it used to be. The internals are different, the API is easier",
            "to use. Hooks just flipped everything on its head all over again. Suspense and",
            "async rendering are here and getting even better.",
            "",
            "D3 has seen less change, but still went through major improvements. It's easier",
            "to use now. Easier to understand. More modern.",
            "",
            "It feels like the web development world is a different place in late 2018 than",
            "it was in early 2015. It really does. Look at my code from 3 years ago and I",
            "think _\"What!? We used to live like this? This is horrible\"_",
            "",
            "Almost 200 people bought this version of React+D3 in preorders alone. It",
            "started as a book update and grew into a proper online course.",
            "",
            "If you're one of those early supporters, thank you! You are the best. Without",
            "you this never would have happened. :pray:",
            "",
            "---",
            "",
            "Because I think it's interesting, here's what I had to say about that first",
            "version back in 2015:",
            "",
            "> I wrote this book for you as an experiment. The theory we’re testing is that",
            "> technical content works better as a short e-book than as a long article.",
            "",
            "> You see, the issue with online articles is that they live and die by their",
            "> length. As soon as you surpass 700 words, everything falls apart. Readers",
            "> wander off to a different tab in search of memes and funny tweets, never to",
            "> come back.",
            "",
            "> This hurts my precious writer's ego, but more importantly, it sucks for you.",
            "> If you're not reading, you're not learning.",
            "",
            "> So here we both are.",
            "",
            "> I’m counting on you to take some time away from the internet, to sit down and",
            "> read. I'm counting on you to follow the examples. I'm counting on you to",
            "> _learn_.",
            "",
            "> You’re counting on me to have invested more time, effort, and care in",
            "> crafting this than I would have invested in an article. I have.",
            "",
            "> I’ve tried to keep this book as concise as possible. iA Writer estimates it",
            "> will take you about an hour to read _React+d3.js_, but playing with the",
            "> examples might take some time, too.",
            "",
            "A lot of that still rings true. People are distracted, busy, the internet is",
            "shiny. It's hard to sit down and learn stuff.",
            "",
            "The most common feedback I get from students goes something like this",
            ":point_down:",
            "",
            "> Loving your book! It's amazing. So clear and concise and relatable. But I",
            "> read 20 pages, then my wife had a kid, my boss pulled the project, and I'm",
            "> doing backend now. But truly amazing. I'm gonna get back to it as soon as I",
            "> can!",
            "",
            "Sometimes they do.",
            "",
            "That's okay. Life happens. I understand. Hell, I procrastinated for months",
            "before sitting down to update this stuff :smiley:",
            "",
            "I recommend you go through the basic chapters at least. The little building",
            "blocks. You can do that in an afternoon or two. It's worth it, I promise.",
            ""
          ]
        },
        {
          "lectureTitle": "What you need to know",
          "lectureLines": [
            "",
            "# What you need to know",
            "",
            "I’m going to assume you already know how to code and that you're great with",
            "JavaScript. Many books have been written to teach the basics of JavaScript;",
            "this is not one of them.",
            "",
            "If you're struggling with modern JavaScript syntax, I suggest visiting my",
            "[Interactive ES6 Cheatsheet](https://es6cheatsheet.com)",
            "",
            "I'm assuming you've tried D3 before, or at least heard of it. You don't have to",
            "know how D3 works, or understand what the code you copy pasted to meet a",
            "deadline does. I'll show you all you need to know.",
            "",
            "If you want to learn D3 in depth, there's plenty of great resources out there.",
            "For example, the third edition of my first ever book,",
            "[D3.js 4.x Data Visualization - Third Edition](https://www.packtpub.com/web-development/d3js-4x-data-visualization-third-edition).",
            "Written by Ændrew Rininsland with some chapters left from yours truly.",
            "",
            "As for React, same deal: I expect you have some idea how to use it, but you'll",
            "be fine even if this is your first time looking at React. We'll go through",
            "everything you need to know as it's happening.",
            "",
            "All examples in React + D3 use modern JavaScript. That is JavaScript from ES6",
            "– ES2015 – and beyond. No special mods, just stuff you get by default in all",
            "React projects in recent years. Even if some syntax isn't in the standard yet.",
            "",
            "I'm going to explain any new syntax that we use.",
            ""
          ]
        },
        {
          "lectureTitle": "How to approach React for Dataviz",
          "lectureLines": [
            "",
            "## How to approach React for Data Visualization",
            "",
            "I recommend starting with an idea, a problem. Something you want to build. A",
            "dataset you want to play with. A feature you want to add to your app.",
            "",
            "That makes it easier. Helps focus your brain. Notice things in this course that",
            "help _you_ specifically.",
            "",
            "From there, I think you should see how much time you've got. The course is",
            "designed so you can go over the important stuff in a couple hours. Watch a",
            "video, read some text, try some code. See how it feels.",
            "",
            "If the best way is a daily practice, 20 minutes after work, 5 minutes on the",
            "pooper, do that. If you're more of a sit down and cram it out kind of person, a",
            "nice Sunday afternoon with some coffee will do just fine.",
            "",
            "But don't make it a chore. We're here to have fun :smiley:",
            "",
            "Two suggestions :v::",
            "",
            "1. _Try_ the example code. Don’t just copy-paste; type it and execute it.",
            "   Execute frequently. If something doesn’t fit together, look at the linked",
            "   Github repositories or solved CodeSandboxes. Each project has one.",
            "2. If you know something, skip that section. You’re awesome. :heart:",
            "",
            "React + D3 is based on code samples. They look like this:",
            "",
            "```{.javascript caption=\"Some code\"}",
            "let foo = 'bar';",
            "foo += 'more stuff';",
            "```",
            "",
            "Each code sample starts with a commented out file path. That's the file you're",
            "editing. Like this:",
            "",
            "```{.javascript caption=\"Code samples have file paths\"}",
            "// ./src/App.js",
            "",
            "class App ...",
            "```",
            "",
            "Commands that you should run in the terminal start with an `$` symbol, like",
            "this:",
            "",
            "```",
            "$ npm start",
            "```",
            ""
          ]
        },
        {
          "lectureTitle": "Why React and D3",
          "lectureLines": [
            "",
            "# Why React and D3",
            "",
            "React is Facebook's approach to writing modern JavaScript front-ends. It",
            "encourages building an app out of small, re-usable components. Each component",
            "is self-contained and only knows how to render a small bit of the interface.",
            "",
            "The catch is that many frameworks have attempted this: everything from Angular",
            "to Backbone and jQuery plugins. But where jQuery plugins get become messy,",
            "Angular depends too much on HTML structure, and Backbone needs a lot of",
            "boilerplate, React has found a sweet spot.",
            "",
            "I've found React a joy to use. Using React was the first time in my life that I",
            "could move a piece of HTML in a modern app without rewriting half my",
            "JavaScript. It's like a super power.",
            "",
            "React being the most popular JavaScript framework out there, the world seems to",
            "agree. React is great. :atom_symbol:",
            "",
            "D3 is Mike Bostock’s infamous data visualization library. It's used by The New",
            "York Times along with many other sites. It is the workhorse of data",
            "visualization on the web, and many charting libraries out there are based on",
            "it.",
            "",
            "But D3 is a fairly low-level library. You can’t just say _\"I have data; give me",
            "a bar chart\"_. Well, you can, but it takes a few more lines of code than that.",
            "Once you get used to it though, D3 is a joy to use.",
            "",
            "Just like React, D3 is declarative.",
            "",
            "You tell your code _what_ you want instead of _how_ you want it. It gives you",
            "access straight to the SVG so you can manipulate your lines and rectangles as",
            "you want. The problem is that D3 isn't so great, if all you want are charts.",
            "",
            "That's where React comes in.",
            "",
            "Once you’ve created a histogram component, you can always get a histogram with",
            "`<Histogram x=\"5\" ... />`. Once you have a piechart, it's always",
            "`<Piechart x=\"20\" ... />`. Just like they were HTML elements.",
            "",
            "Doesn’t that sound like the best? I think it's amazing.",
            "",
            "It gets better!",
            "",
            "With React, you can make different graph and chart components share the same",
            "data. When your data changes, the whole visualization reacts.",
            "",
            "Your graph changes. The title changes. The description changes. Everything",
            "changes. Mind, blown.",
            "",
            "Look how this H1B salary visualization changes when the user picks a subset of",
            "the data to look at.",
            "",
            "![Default H1B histogram](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/full_default_h1b.png)",
            "",
            "![Changes after user picks a data subset](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/full_changed_h1b.png)",
            "",
            "React + D3: a powerful combination indeed.",
            ""
          ]
        },
        {
          "lectureTitle": "Buzzword soup explained",
          "lectureLines": [
            "",
            "# Buzzword soup explained",
            "",
            "We're going to use some buzzwords in this book. Hell, we've used some already.",
            "Most will get a thorough explanation further on, but let me give you a quick",
            "rundown.",
            "",
            "- **Babel**, a JavaScript transpiler that makes your code work on all browsers.",
            "- **ECMAScript2015,16,17,18**, official names for JavaScript as new features",
            "  come out every summer",
            "- **ES5**, any JavaScript features that existed before June 2015",
            "- **ES6** or **ES6+**, a common name for JavaScript as it exists past June 2015",
            "- **fat arrows**, a new way to define functions in ES6 (`=>`)",
            "- **Git**, a version control system. It's pretty popular, you probably know it",
            "  :smiley:",
            "- **H1B**, a popular type of work visa in the United States",
            "- **JSX**, a language/syntax that lets you use `<a href=\"/example\">` as a",
            "  native part of JavaScript",
            "- **Mustache**, a popular way to write HTML templates for JavaScript code. Uses",
            "  `{{ ... }}` syntax.",
            "- **npm**, most popular package manager for JavaScript libraries",
            "- **props**, component properties set when rendering",
            "- **state**, a local dictionary of values available in most components",
            "- **functional components**, React components expressed as pure functions that",
            "  take props and return markup",
            "- **Webpack**, a module packager for JavaScript. Makes it more convenient to",
            "  organize code into multiple files. Provides cool plugins.",
            ""
          ]
        },
        {
          "lectureTitle": "JSX",
          "lectureLines": [
            "",
            "# JSX",
            "",
            "Our components are going to use JSX, a JavaScript syntax extension that lets us",
            "treat XML-like data as normal code. You can use React without JSX, but JSX",
            "makes React’s full power easier to use.",
            "",
            "The gist of JSX is that we can use any XML-like string just like it was part of",
            "JavaScript. No Mustache or messy string concatenation necessary. Your functions",
            "can return HTML, SVG, or XML.",
            "",
            "For instance, code that renders one of our first examples – a color swatch",
            "– looks like this:",
            "",
            "```{.javascript caption=\"Render a color swatch\"}",
            "ReactDOM.render(",
            "  <Colors width=\"400\" />,",
            "  document.getElementById('svg')",
            ");",
            "```",
            "",
            "Which compiles to:",
            "",
            "```{.javascript caption=\"JSX compiled result\"}",
            "ReactDOM.render(",
            "  React.createElement(Colors, {width: \"400\"}),",
            "  document.querySelectorAll('svg')[0]",
            ");",
            "```",
            "",
            "HTML code translates to `React.createElement` calls with attributes translated",
            "into a property dictionary. The beauty of this approach is two-pronged: you can",
            "use React components as if they were HTML tags, and HTML attributes can be",
            "anything.",
            "",
            "You’ll see that anything from a simple value to a function or an object works",
            "equally well.",
            ""
          ]
        },
        {
          "lectureTitle": "What you'll build",
          "lectureLines": [
            "",
            "# Visualizing data with React and d3.js {#the-meat-start}",
            "",
            "Welcome to the main part of React + D3 2018. We're going to talk a little",
            "theory, learn some principles, then get our hands dirty with some examples.",
            "Through this book you're going to build:",
            "",
            "- [A few small components in Codesandbox](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887721#basic-approach)",
            "- [A choropleth map](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888908#choropleth-map)",
            "- [An interactive histogram](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888919#histogram-of-salaries)",
            "- [A bouncing ball](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906619#a-bouncing-ball-game-loop-example)",
            "- [A swipe transition](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906645#swipe-transition)",
            "- [An animated alphabet](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906659#animated-alphabet)",
            "- [A simple particle generator with Redux](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906668#animating-react-redux)",
            "- [A particle generator pushed to 20,000 elements with canvas](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906689#canvas-react-redux)",
            "- [Billiards simulation with MobX and canvas](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906696#build-a-declarative-billiards-simulation-with-mobx-canvas-and-konva)",
            "- [A dancing fractal tree](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/8456113#fractal-tree)",
            "",
            "Looks random, right? Bear with me. Examples build on each other.",
            "",
            "The first few examples teach you about static data visualizations and the",
            "basics of merging React and D3 using two different approaches.",
            "",
            "The choropleth and histogram visualizations teach you about interactivity and",
            "components working together.",
            "",
            "You learn about game loop and transition animations through two types of",
            "bouncing balls. Followed by more complex enter/exit transitions with an",
            "animated alphabet.",
            "",
            "We look at how far we can push React's performance with a simple particle",
            "generator and a dancing fractal tree. A billiards game helps us learn about",
            "complex canvas manipulation.",
            "",
            "Throughout these examples, we're going to use **React 16**, compatible with",
            "**React 17**, **D3v5**, and modern **ES6+** JavaScript syntax. The particle",
            "generator also uses **Redux** for the game loop and the billiards simulation",
            "uses MobX. We use **Konva** for complex canvas stuff.",
            "",
            "That way you can build experience in large portions of the React ecosystem so",
            "you can choose what you like best.",
            "",
            "Don't worry, if you're not comfortable with modern JavaScript syntax just yet.",
            "By the end of this book, you're gonna love it!",
            "",
            "Until then, here's an interactive cheatsheet:",
            "[es6cheatsheet.com](https://es6cheatsheet.com/). It uses runnable code samples",
            "to compare the ES5 way with the ES6 way so you can brush up quickly.",
            "",
            "To give you a taste of React alternatives, we'll check out **Preact**,",
            "**Inferno**, and **Vue** in the fractal tree example. They're component-based",
            "UI frameworks similar to React. Preact is tiny, Inferno is fast, and Vue is",
            "about as popular as React.",
            "",
            "---",
            "",
            "Let's talk about how React and D3 fit together. If there's just one chapter you",
            "should read, this is the one. It explains how things work and fit together.",
            "Takes you from beginning to being able to figure out the rest on your own.",
            "",
            "Although you should still play with the bigger examples. They're fun.",
            "",
            "This section has five chapters:",
            "",
            "- [A quick intro to D3](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887710)",
            "- [How React makes D3 easier](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887721#basic-approach)",
            "- [When should you use an existing library? Which one?](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887723#existing-libraries)",
            "- [Quickly integrate any D3 code in your React project with Blackbox Components](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887730#blackbox-components)",
            "- [Build scalable dataviz components with full integration](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887740#full-feature-integration)",
            "- [Handling state in your React app](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887771#state-handling-architecture)",
            "- [Structuring your React App](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887772#structuring-your-app)",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "A quick intro to D3",
      "lectures": [
        {
          "lectureTitle": "Why D3",
          "lectureLines": [
            "",
            "D3 is the best library out there for custom data visualization. It comes with a",
            "rich ecosystem of functions for almost anything you can think of. From simple",
            "medians, to automatic axis generators, and force diagrams.",
            "",
            "Most data visualization you see on the web is built with D3. The New York Times",
            "uses it, Guardian uses it, r/dataisbeautiful is full of it.",
            "",
            "Learning D3 from scratch is where life gets tricky.",
            "",
            "There are several gotchas that trip you up and make examples look like magic.",
            "You've probably noticed this, if you ever looked at an example project built",
            "with D3. They're full of spaghetti code, global variables, and often aren't",
            "made to be maintainable.",
            "",
            "Most examples are just one-off toys after all. It's art.",
            "",
            "A lot of dataviz that _isn't_ art, is charts and graphs. You'll often find that",
            "using D3 to build those, is too complicated. D3 gives you more power than you",
            "need.",
            "",
            "If you want charts, I suggest using a charting library.",
            "",
            "Where many charting libraries fall short is customization. The API is limited,",
            "you can't do everything you want, and it gets easier to just build it yourself.",
            "",
            "A lot of what you end up doing in real life is finding a D3 example that looks",
            "like what you want to build and adapting it. That's why you should learn at",
            "least some D3.",
            "",
            "But D3 is hard to read. Take this barchart code, for example :point_down:",
            "",
            "```{.javascript caption=\"Barchart in pure D3\"}",
            "d3.tsv(\"data.tsv\", function(d) {",
            "  d.frequency = +d.frequency;",
            "  return d;",
            "}, function(error, data) {",
            "  if (error) throw error;",
            "",
            "  x.domain(data.map(function(d) { return d.letter; }));",
            "  y.domain([0, d3.max(data, function(d) { return d.frequency; })]);",
            "",
            "  g.append(\"g\")",
            "  .attr(\"class\", \"axis axis--x\")",
            "  .attr(\"transform\", \"translate(0,\" + height + \")\")",
            "  .call(d3.axisBottom(x));",
            "",
            "  g.append(\"g\")",
            "  .attr(\"class\", \"axis axis--y\")",
            "  .call(d3.axisLeft(y).ticks(10, \"%\"))",
            ".append(\"text\")",
            "  .attr(\"transform\", \"rotate(-90)\")",
            "  .attr(\"y\", 6)",
            "  .attr(\"dy\", \"0.71em\")",
            "  .attr(\"text-anchor\", \"end\")",
            "  .text(\"Frequency\");",
            "",
            "  g.selectAll(\".bar\")",
            ".data(data)",
            ".enter().append(\"rect\")",
            "  .attr(\"class\", \"bar\")",
            "  .attr(\"x\", function(d) { return x(d.letter); })",
            "  .attr(\"y\", function(d) { return y(d.frequency); })",
            "  .attr(\"width\", x.bandwidth())",
            "  .attr(\"height\", function(d) { return height - y(d.frequency); });",
            "});",
            "```",
            "",
            "Can you tell what's going on? I'd need to read it pretty carefully.",
            "",
            "Which brings us to :point_right:",
            ""
          ]
        },
        {
          "lectureTitle": "3 key insights to learn D3 from scratch",
          "lectureLines": [
            "",
            "## 3 key insights that help you learn D3.js from scratch",
            "",
            "Somebody once asked me how to learn D3.js from scratch. I quipped that it took",
            "me writing a book to really learn it. It's one hell of a library.",
            "",
            "Most people don't go that far. They don't have to.",
            "",
            "You start with a problem, find similar examples, do some copy pasta, tweak",
            "until it works and end up with a working visualization you don't understand.",
            "You'd be surprised how few engineers actually understand how their D3 data",
            "visualization works.",
            "",
            "Fear not! There are just 3 key concepts you have to grok. Then you can",
            "understand every D3 example out there. :scream:",
            ""
          ]
        },
        {
          "lectureTitle": "Data vs. DOM manipulation",
          "lectureLines": [
            "",
            "### 1) Data manipulation vs. DOM manipulation",
            "",
            "All D3 examples are split into two parts:",
            "",
            "1. Data manipulation",
            "2. DOM manipulation",
            "",
            "First you prep your values, then you render.",
            "",
            "You have to go through many examples to notice what's going on. Inference",
            "learning is hard. Most beginners miss this pattern and it makes D3 look more",
            "confusing than it is.",
            "",
            "Let's take an example from [D3's docs](https://github.com/d3/d3/wiki/Gallery),",
            "a bar chart with a hover effect.",
            "",
            "![An example D3 barchart](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/barchart-example.png)",
            "",
            "You can",
            "[try it online](https://cdn.rawgit.com/mbostock/3885304/raw/a91f37f5f4b43269df3dbabcda0090310c05285d/index.html).",
            "When you hover on a bar, it changes color. Pretty neat.",
            "",
            "Mike Bostock, the creator of D3, built this chart in 43 lines of code. Here",
            "they are :point_down:",
            "",
            "```{.javascript caption=\"Example D3 barchart\"}",
            "var svg = d3.select(\"svg\"),",
            "margin = {top: 20, right: 20, bottom: 30, left: 40},",
            "width = +svg.attr(\"width\") - margin.left - margin.right,",
            "height = +svg.attr(\"height\") - margin.top - margin.bottom;",
            "",
            "var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),",
            "y = d3.scaleLinear().rangeRound([height, 0]);",
            "",
            "var g = svg.append(\"g\")",
            ".attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");",
            "",
            "d3.tsv(\"data.tsv\", function(d) {",
            "  d.frequency = +d.frequency;",
            "  return d;",
            "}, function(error, data) {",
            "  if (error) throw error;",
            "",
            "  x.domain(data.map(function(d) { return d.letter; }));",
            "  y.domain([0, d3.max(data, function(d) { return d.frequency; })]);",
            "",
            "  g.append(\"g\")",
            "  .attr(\"class\", \"axis axis--x\")",
            "  .attr(\"transform\", \"translate(0,\" + height + \")\")",
            "  .call(d3.axisBottom(x));",
            "",
            "  g.append(\"g\")",
            "  .attr(\"class\", \"axis axis--y\")",
            "  .call(d3.axisLeft(y).ticks(10, \"%\"))",
            ".append(\"text\")",
            "  .attr(\"transform\", \"rotate(-90)\")",
            "  .attr(\"y\", 6)",
            "  .attr(\"dy\", \"0.71em\")",
            "  .attr(\"text-anchor\", \"end\")",
            "  .text(\"Frequency\");",
            "",
            "  g.selectAll(\".bar\")",
            ".data(data)",
            ".enter().append(\"rect\")",
            "  .attr(\"class\", \"bar\")",
            "  .attr(\"x\", function(d) { return x(d.letter); })",
            "  .attr(\"y\", function(d) { return y(d.frequency); })",
            "  .attr(\"width\", x.bandwidth())",
            "  .attr(\"height\", function(d) { return height - y(d.frequency); });",
            "});",
            "```",
            "",
            "There are two parts to this code: Data manipulation and DOM manipulation.",
            "",
            "```{.javascript caption=\"Data manipulation code\"}",
            "var // ..,",
            "margin = {top: 20, right: 20, bottom: 30, left: 40},",
            "width = +svg.attr(\"width\") - margin.left - margin.right,",
            "height = +svg.attr(\"height\") - margin.top - margin.bottom;",
            "",
            "var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),",
            "y = d3.scaleLinear().rangeRound([height, 0]);",
            "",
            "// ...",
            "",
            "d3.tsv(\"data.tsv\", function(d) {",
            "  d.frequency = +d.frequency;",
            "  return d;",
            "}, function(error, data) {",
            "  if (error) throw error;",
            "",
            "  x.domain(data.map(function(d) { return d.letter; }));",
            "  y.domain([0, d3.max(data, function(d) { return d.frequency; })]);",
            "",
            "// ...",
            "});",
            "```",
            "",
            "Bostock here first prepares his data:",
            "",
            "- some sizing variables (`margin`, `width`, `height`)",
            "- two scales to help with data-to-coordinates conversion (`x, y`)",
            "- loads his dataset (`d3.tsv`) and updates his scales' domains",
            "",
            "In the DOM manipulation part, he puts shapes and objects into an SVG. This is",
            "the part that shows up in your browser.",
            "",
            "```{.javascript caption=\"DOM manipulation code\"}",
            "var svg = d3.select(\"svg\"),",
            "// ..",
            "",
            "// ..",
            "",
            "var g = svg.append(\"g\")",
            ".attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");",
            "",
            "// ..",
            "  g.append(\"g\")",
            "  .attr(\"class\", \"axis axis--x\")",
            "  .attr(\"transform\", \"translate(0,\" + height + \")\")",
            "  .call(d3.axisBottom(x));",
            "",
            "  g.append(\"g\")",
            "  .attr(\"class\", \"axis axis--y\")",
            "  .call(d3.axisLeft(y).ticks(10, \"%\"))",
            ".append(\"text\")",
            "  .attr(\"transform\", \"rotate(-90)\")",
            "  .attr(\"y\", 6)",
            "  .attr(\"dy\", \"0.71em\")",
            "  .attr(\"text-anchor\", \"end\")",
            "  .text(\"Frequency\");",
            "",
            "  g.selectAll(\".bar\")",
            ".data(data)",
            ".enter().append(\"rect\")",
            "  .attr(\"class\", \"bar\")",
            "  .attr(\"x\", function(d) { return x(d.letter); })",
            "  .attr(\"y\", function(d) { return y(d.frequency); })",
            "  .attr(\"width\", x.bandwidth())",
            "  .attr(\"height\", function(d) { return height - y(d.frequency); });",
            "});",
            "```",
            "",
            "DOM manipulation in D3 happens via D3 selections. They're a lot like jQuery",
            "`$(something)`. This is the part we're doing with React later on.",
            "",
            "Here Bostock does a few things",
            "",
            "- selects the `<svg>` node (`d3.select`)",
            "- appends a grouping `<g>` node (`.append`) with an SVG positioning attribute",
            "  (translate)",
            "- adds a bottom axis by appending a `<g>`, moving it, then calling",
            "  `d3.axisBottom` on it. D3 has built-in axis generators",
            "- adds a left axis using the same approach but rotating the ticks",
            "- appends a text label \"Frequency\" to the left axis",
            "- uses `selectAll.data` to make a virtual selection of `.bar` nodes and attach",
            "  some data, then for every new data value (.enter), appends a `<rect>` node",
            "  and gives it attributes",
            "",
            "That last part is where people get lost. It looks like magic. Even to me.",
            "",
            "It's a declarative approach to rendering data. Works great, hard to understand.",
            "That's why we'll do it in React instead :smiley:",
            "",
            "You can think of `.enter` as a loop over your data. Everything chained after",
            "`.enter` is your loop's body. Sort of like doing",
            "`data.map(d => append(rect).setManyAttributes())`",
            "",
            "That function executes for any _new_ data \"entering\" your visualization.",
            "There's also `.exit` for anything that's dropping out, and `.update` for",
            "anything that's changing.",
            ""
          ]
        },
        {
          "lectureTitle": "Scales",
          "lectureLines": [
            "",
            "### 2) Scales",
            "",
            "Scales are D3's most versatile concept. They help you translate between two",
            "different spaces. Like, mathematical spaces.",
            "",
            "They're like the mathematical functions you learned about in school. A domain",
            "maps to a range using some sort of formula.",
            "",
            "![A basic function](https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Function_color_example_3.svg/440px-Function_color_example_3.svg.png)",
            "",
            "Colored shapes in the domain map to colors in the range. No formula for this",
            "one. That makes it an ordinal scale.",
            "",
            "```javascript",
            "let shapes = d3.scaleOrdinal()",
            "  .domain(['red', 'orange', ...)",
            "  .range(['red', 'orange', ...)",
            "```",
            "",
            "[Play with scales on CodeSandbox](https://codesandbox.io/s/r0rw72z75o)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/r0rw72z75o?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "Once you have this scale, you can use it to translate from shapes to colors.",
            "`shapes('red triangle')` returns `'red'` for example.",
            "",
            "Many different types of scales exist. Linear, logarithmic, quantize, etc. Any",
            "basic transformation you can think of exists. The rest you can create by",
            "writing custom scales.",
            "",
            "You're most often going to use scales to turn your data values into",
            "coordinates. But other use-cases exist.",
            ""
          ]
        },
        {
          "lectureTitle": "D3 layouts",
          "lectureLines": [
            "",
            "### 3) D3 layouts",
            "",
            "Sure `.enter.append` looks like magic, but D3 layouts are the real mind=blown",
            "of the D3 ecosystem. They take your input data and return a full-featured",
            "visualization thing.",
            "",
            "For example, a force layout using forces between nodes to place them on the",
            "screen.",
            "",
            "![Force layout](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/force-layout.png)",
            "",
            "Or a circle packing layout that neatly packs circles.",
            "",
            "![Circle packing layout](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/circle-packing-layout.png)",
            "",
            "I don't know the maths that goes into most of these. And that's the point, you",
            "shouldn't have to!",
            "",
            "Here's a key insight about the magic of layouts: They're the data part.",
            "",
            "You take a `forceLayout` and feed it your data. It returns an object with a",
            "`tick` event callback.",
            "",
            "```javascript",
            "var simulation = d3",
            "  .forceSimulation()",
            "  .force(",
            "'link',",
            "d3.forceLink().id(function(d) {",
            "  return d.id;",
            "})",
            "  )",
            "  .force('charge', d3.forceManyBody())",
            "  .force('center', d3.forceCenter(width / 2, height / 2));",
            "```",
            "",
            "This `simulation` now handles everything _about_ rendering your nodes. Changes",
            "their positions on every `tick` callback, figures out how often to change",
            "stuff, etc.",
            "",
            "But it is up to you to render them. A layout handles your dataviz in the",
            "abstract. You're in control of the rendering.",
            "",
            "For a force layout, you have to update the DOM on every tick of the animation.",
            "For circle packing, you render it once.",
            "",
            "Once you grok this, all the fancy visualizations out there start making sense.",
            "Also means you can use these fancy layouts in React :raised_hands:",
            ""
          ]
        },
        {
          "lectureTitle": "Recap",
          "lectureLines": [
            "",
            "## Recap",
            "",
            "There's a lot more D3 can do, but those are the 3 key insights you need to",
            "understand any example you find in the wild.",
            "",
            "1. Code is split into data and DOM manipulation",
            "2. Scales are great and used a lot",
            "3. You're always in control of rendering",
            "",
            "Then you can start using D3's more advanced features like maps and axes and",
            "shape generators and geo computations and data loading and transitions and user",
            "interactions.",
            "",
            "There's a lot. We're not going to cover it all but you can find those advanced",
            "features in the docs and the skills you learn here will help you get started.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "How React makes D3 easier",
      "lectures": [
        {
          "lectureTitle": "React + D3 = :heart:",
          "lectureLines": [
            "",
            "# How React makes D3 easier {#basic-approach}",
            "",
            "Our visualizations are going to use SVG – an XML-based image format that lets",
            "us describe images in terms of mathematical shapes. For example, the source",
            "code of an 800x600 SVG image with a rectangle looks like this:",
            "",
            "```{.html caption=\"SVG rectangle\"}",
            "<svg width=\"800\" height=\"600\">",
            "<rect width=\"100\" height=\"200\" x=\"50\" y=\"20\" />",
            "</svg>",
            "```",
            "",
            "These four lines create an SVG image with a black rectangle at coordinates",
            "`(50, 20)` that is 100x200 pixels large. Black fill with no borders is default",
            "for SVG shapes.",
            "",
            "SVG is perfect for data visualization on the web because it works in all",
            "browsers, renders without blurring or artifacts on all screens, and supports",
            "animation and user interaction. You can see examples of interaction and",
            "animation later in this book.",
            "",
            "But SVG can get slow when you have many thousands of elements on screen. We're",
            "going to solve that problem by rendering bitmap images with canvas. More on",
            "that later.",
            "",
            "---",
            "",
            "Another nice feature of SVG is that it's just a dialect of XML - nested",
            "elements describe structure, attributes describe the details. Same principles",
            "that HTML uses.",
            "",
            "That makes React's rendering engine particularly suited for SVG. Our 100x200",
            "rectangle from before looks like this as a React component:",
            "",
            "```{.javascript caption=\"A simple rectangle in React\"}",
            "const Rectangle = () => (",
            "<rect width=\"100\" height=\"200\" x=\"50\" y=\"20\" />",
            ");",
            "```",
            "",
            "To use this rectangle component in a picture, you'd use a component like this:",
            "",
            "```{.javascript caption=\"Rect component in a picture\"}",
            "const Picture = () => (",
            "<svg width=\"800\" height=\"600\">",
            "    <Rectangle />",
            "</svg>",
            ");",
            "```",
            "",
            "Sure looks like tons of work for a static rectangle. But look closely! Even if",
            "you know nothing about React and JSX, you can look at that code and see that",
            "it's a `Picture` of a `Rectangle`.",
            "",
            "Compare that to a pure D3 approach:",
            "",
            "```{.javascript caption=\"A static rectangle in d3.js\"}",
            "d3.select(\"svg\")",
            "  .attr(\"width\", 800)",
            "  .attr(\"height\", 600)",
            "  .append(\"rect\")",
            "  .attr(\"width\", 100)",
            "  .attr(\"height\", 200)",
            "  .attr(\"x\", 50)",
            "  .attr(\"y\", 20);",
            "```",
            "",
            "It's elegant, it's declarative, and it looks like function call soup. It",
            "doesn't scream _\"Rectangle in an SVG\"_ to as much as the React version does.",
            "",
            "You have to take your time and read the code carefully: first, we `select` the",
            "`svg` element, then we add attributes for `width` and `height`. After that, we",
            "`append` a `rect` element and set its attributes for `width`, `height`, `x`,",
            "and `y`.",
            "",
            "Those 8 lines of code create HTML that looks like this:",
            "",
            "```{.javascript caption=\"HTML of a rectangle\"}",
            "<svg width=\"800\" height=\"600\">",
            "<rect width=\"100\" height=\"200\" x=\"50\" y=\"20\" />",
            "</svg>",
            "```",
            "",
            "Would've been easier to just write the HTML, right? Yes, for static images,",
            "you're better off using Photoshop or Sketch then exporting to SVG.",
            "",
            "Dealing with the DOM is not D3's strong suit. There's a lot of typing, code",
            "that's hard to read, it's slow when you have thousands of elements, and it's",
            "often hard to keep track of which elements you're changing. D3's",
            "enter-update-exit cycle is great in theory, but most people struggle trying to",
            "wrap their head around it.",
            "",
            "If you don't understand what I just said, don't worry. We'll cover the",
            "enter-update-exit cycle in the animations example.",
            "",
            "Don't worry about D3 either. **It's hard!** I've written two books about D3,",
            "and I still spend as much time reading the docs as writing the code. The",
            "library is huge and there's much to learn. I'll explain everything as we go",
            "along.",
            "",
            "D3's strong suit is its ability to do everything except the DOM. There are",
            "statistical functions, great support for data manipulation, a bunch of built-in",
            "data visualizations, magic around transitions and animation ... **D3 can",
            "calculate anything for you. All you have to do is draw it out.**",
            "",
            "That's why our general approach sounds like this in a nutshell:",
            "",
            "- React owns the DOM",
            "- D3 calculates properties",
            "",
            "We leverage React for SVG structure and rendering optimizations; D3 for its",
            "mathematical and visualization functions.",
            "",
            "Now let's look at three different ways of using React and D3 to build data",
            "visualization:",
            "",
            "- using a library",
            "- quick blackbox components",
            "- full feature integration",
            ""
          ]
        },
        {
          "lectureTitle": "What about existing libraries?",
          "lectureLines": [
            "",
            "# When should you use an existing library? Which one? {#existing-libraries}",
            "",
            "The quickest way to achieve the benefits of integrating React with D3 is to use",
            "a library. A collection of components with pre-built charting visualizations.",
            "Plug it into your app, move on with life.",
            "",
            "Great option for basic charts. I recommend it dearly to anyone who comes to me",
            "and asks about building stuff. Try a library first. If it fits your needs,",
            "perfect! You just saved yourselves plenty of time.",
            "",
            "Where libraries become a problem is when you want to move beyond the library",
            "author's idea of How Things Are Done. Custom features, visualizations that",
            "aren't just charts, disabling this or that default behavior ... it gets messy.",
            "",
            "That's why I rarely use libraries myself. Often find it quicker to build",
            "something specific from scratch than figuring out how to hold a generalized API",
            "just right.",
            "",
            "But they're a great first step. Here's a few of the most popular React & D3",
            "libraries :point_down:",
            "",
            "List borrowed from",
            "[a wonderful Smashing Magazine article](https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/),",
            "because it's a good list.",
            ""
          ]
        },
        {
          "lectureTitle": "Victory.js",
          "lectureLines": [
            "",
            "## Victory",
            "",
            "> React.js components for modular charting and data visualization",
            "",
            "[![Victory.js logo](https://raw.githubusercontent.com/hsribei/react-d3js-es6-ebook/teachable-only/manuscript/resources/images/2018/victoryjs.jpg)](https://formidable.com/open-source/victory/)",
            "",
            "Victory offers low level components for basic charting and reimplements a lot",
            "of D3's API. Great when you need to create basic charts without a lot of",
            "customization. Supports React Native.",
            "",
            "Here's what it takes to implement a Barchart using Victory.js.",
            "[You can try it on CodeSandbox](https://codesandbox.io/s/3v3q013x36)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/3v3q013x36?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "```{.javascript caption=\"Bar chart in Victory.js\"}",
            "const data = [",
            "  { quarter: 1, earnings: 13000 },",
            "  { quarter: 2, earnings: 16500 },",
            "  { quarter: 3, earnings: 14250 },",
            "  { quarter: 4, earnings: 19000 }",
            "];",
            "",
            "const App = () => (",
            "  <div style={styles}>",
            "<h1>Victory basic demo</h1>",
            "<VictoryChart domainPadding={20}>",
            "  <VictoryBar data={data} x=\"quarter\" y=\"earnings\" />",
            "</VictoryChart>",
            "  </div>",
            ");",
            "```",
            "",
            "Create some fake data, render a `<VictoryChart>` rendering area, add a",
            "`<VictoryBar>` component, give it data and axis keys. Quick and easy.",
            "",
            "My favorite feature of Victory is that components use fake random data until",
            "you pass your own. Means you always know what to expect.",
            ""
          ]
        },
        {
          "lectureTitle": "Recharts",
          "lectureLines": [
            "",
            "## Recharts",
            "",
            "> A composable charting library built on React components",
            "",
            "[![Recharts homepage](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/recharts.png)](https://recharts.org/)",
            "",
            "Recharts is like a more colorful Victory. A pile of charting components, some",
            "customization, loves animating everything by default.",
            "",
            "Here's what it takes to implement a Barchart using Recharts.",
            "[You can try it on CodeSandbox](https://codesandbox.io/s/mmkrjl7qxp)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/mmkrjl7qxp?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "```{.javascript}",
            "const data = [",
            "  { quarter: 1, earnings: 13000 },",
            "  { quarter: 2, earnings: 16500 },",
            "  { quarter: 3, earnings: 14250 },",
            "  { quarter: 4, earnings: 19000 }",
            "];",
            "",
            "const App = () => (",
            "  <div style={styles}>",
            "<h1>Recharts basic demo</h1>",
            "<BarChart width={500} height={300} data={data}>",
            "  <XAxis dataKey=\"quarter\" />",
            "  <YAxis dataKey=\"earnings\" />",
            "  <Bar dataKey=\"earnings\" />",
            "</BarChart>",
            "  </div>",
            ");",
            "```",
            "",
            "More involved than Victory, but same principle. Fake some data, render a",
            "drawing area this time with `<BarChart>` and feed it some data. Inside the",
            "`<BarChart>` render two axes, and a `<Bar>` for each entry.",
            "",
            "Recharts hits a great balance of flexibility and ease ... unless you don't like",
            "animation by default. Then you're in trouble.",
            ""
          ]
        },
        {
          "lectureTitle": "Nivo",
          "lectureLines": [
            "",
            "## Nivo",
            "",
            "> nivo provides a rich set of dataviz components, built on top of the awesome",
            "> d3 and Reactjs libraries.",
            "",
            "[![Nivo homepage](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/nivo.gif)](https://nivo.rocks/)",
            "",
            "Nivo is another attempt to give you a set of basic charting components. Comes",
            "with great interactive documentation, support for Canvas and API rendering.",
            "Plenty of basic customization.",
            "",
            "Here's what it takes to implement a Barchart using Nivo.",
            "[You can try it on CodeSandbox](https://codesandbox.io/s/n1wwkvq24)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/n1wwkvq24?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "```{.javascript caption=\"Bar chart in Nivo\"}",
            "const data = [",
            "  { quarter: 1, earnings: 13000 },",
            "  { quarter: 2, earnings: 16500 },",
            "  { quarter: 3, earnings: 14250 },",
            "  { quarter: 4, earnings: 19000 }",
            "];",
            "",
            "const App = () => (",
            "  <div style={styles}>",
            "<h1>Nivo basic demo</h1>",
            "<div style={{ height: \"400px\" }}>",
            "  <ResponsiveBar data={data} keys={[\"earnings\"]} indexBy=\"quarter\" />",
            "</div>",
            "  </div>",
            ");",
            "```",
            "",
            "Least amount of effort! You render a `<ResponsiveBar>` component, give it data",
            "and some params, and Nivo handles the rest.",
            "",
            "Wonderful! But means you have to learn a whole new language of configs and",
            "props that might make your hair stand on end. The documentation is great and",
            "shows how everything works, but I found it difficult to know which prop",
            "combinations are valid.",
            ""
          ]
        },
        {
          "lectureTitle": "VX",
          "lectureLines": [
            "",
            "## VX",
            "",
            "> vx is collection of reusable low-level visualization components. vx combines",
            "> the power of d3 to generate your visualization with the benefits of react for",
            "> updating the DOM.",
            "",
            "[![VX](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/vx.png)](https://vx-demo.now.sh/)",
            "",
            "VX is the closest to the approaches you're learning in this book. React for",
            "rendering, D3 for calculations. When you build a set of custom components for",
            "your organization, a flavor of VX is what you often come up with.",
            "",
            "That's why I recommend teams use VX when they need to get started quickly.",
            "",
            "Here's what it takes to implement a Barchart using Nivo.",
            "[You can try it on CodeSandbox](https://codesandbox.io/s/k5853pryrv)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/k5853pryrv?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "```{.javascript caption=\"Bar chart built in VX\"}",
            "const data = [",
            "  { quarter: 1, earnings: 13000 },",
            "  { quarter: 2, earnings: 16500 },",
            "  { quarter: 3, earnings: 14250 },",
            "  { quarter: 4, earnings: 19000 }",
            "];",
            "",
            "const App = ({ width = 400, height = 400 }) => {",
            "  const xMax = width;",
            "  const yMax = height - 120;",
            "",
            "  const x = d => d.quarter;",
            "  const y = d => d.earnings;",
            "",
            "  // scales",
            "  const xScale = scaleBand({",
            "rangeRound: [0, xMax],",
            "domain: data.map(:satisfied:,",
            "padding: 0.4",
            "  });",
            "  const yScale = scaleLinear({",
            "rangeRound: [yMax, 0],",
            "domain: [0, max(data, y)]",
            "  });",
            "",
            "  return (",
            "<div style={styles}>",
            "  <h1>VX basic demo</h1>",
            "  <svg width={width} height={height}>",
            "    {data.map((d, i) => {",
            "      const barHeight = yMax - yScale(y(d));",
            "      return (",
            "        <Bar",
            "          width={xScale.bandwidth()}",
            "          height={barHeight}",
            "          x={xScale(x(d))}",
            "          y={yMax - barHeight}",
            "          data={{ x: x(d), y: y(d) }}",
            "        />",
            "      );",
            "    })}",
            "  </svg>",
            "</div>",
            "  );",
            "};",
            "```",
            "",
            "Move involved than previous examples, but means you have more control and fight",
            "the library less often. VX does the tedious stuff for you, so you can focus on",
            "the stuff that matters.",
            "",
            "This code creates value accessor methods, D3 scales, then iterates over an",
            "array of `data` and renders a `<Bar` for each. The bar gets a bunch of props.",
            ""
          ]
        },
        {
          "lectureTitle": "When you shouldn't use a library",
          "lectureLines": [
            "",
            "## When not to use a library",
            "",
            "Libraries are great. Quick to get started, quick to keep using, great for",
            "common usecases.",
            "",
            "Now, if you want to build something custom, something that delights and",
            "astounds, something that makes your users love you ... You're gonna have to",
            "understand how combining React and D3 works under the hood. Whether you use a",
            "library or not.",
            "",
            "A rule of thumb you can use is to consider how custom you want to make your",
            "visualization. The more customizations, the more likely you are to benefit from",
            "rolling your own.",
            "",
            "Or if you've had a lot of practice with rolling your own and it's literally",
            "easier than learning a library.",
            "",
            "If you have to customize an existing library, or build your own for the team,",
            "that's what we're here for today :smiley:",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Quickly integrate any D3 code in your React project with Blackbox Components",
      "lectures": [
        {
          "lectureTitle": "The idea behind blackbox components",
          "lectureLines": [
            "",
            "# Quickly integrate any D3 code in your React project with Blackbox Components {#blackbox-components}",
            "",
            "Blackbox components are the quickest way to integrate D3 and React. You can",
            "think of them as wrappers around D3 visualizations.",
            "",
            "With the blackbox approach, you can take any D3 example from the internets or",
            "your brain, wrap it in a React component, and it Just Works™. This is great",
            "when you're in a hurry, but comes with a big caveat: You're letting D3 control",
            "some of the DOM.",
            "",
            "D3 controlling the DOM is _okay_, but it means React can't help you there.",
            "That's why it's called a Blackbox – React can't see inside.",
            "",
            "No render engine, no tree diffing, no dev tools to inspect what's going. Just a",
            "blob of DOM elements.",
            "",
            "Okay for small components or when you're prototyping, but I've had people come",
            "to my workshops and say _\"We built our whole app with the blackbox approach. It",
            "takes a few seconds to re-render when you click something. Please help\"_",
            "",
            ":thinking:",
            "",
            "Here's how it works:",
            "",
            "- React renders an anchor element",
            "- D3 hijacks it and puts stuff in",
            "",
            "You manually re-render on props and state changes. Throwing away and rebuilding",
            "the entire DOM subtree on each render. With complex visualizations this becomes",
            "a huge hit on performance.",
            "",
            "Use this technique sparingly.",
            ""
          ]
        },
        {
          "lectureTitle": "A quick blackbox example - a D3 axis",
          "lectureLines": [
            "",
            "## A quick blackbox example - a D3 axis {#blackbox-axis}",
            "",
            "Let's build an axis component. Axes are the perfect use-case for blackbox",
            "components. D3 comes with an axis generator bundled inside, and they're",
            "difficult to build from scratch.",
            "",
            "They don't _look_ difficult, but there are many tiny details you have to get",
            "_just right_.",
            "",
            "D3's axis generator takes a scale and some configuration to render an axis for",
            "us. The code looks like this:",
            "",
            "```{.javascript caption=\"Vanilla D3 axis\"}",
            "const scale = d3.scaleLinear()",
            ".domain([0, 10])",
            ".range([0, 200]);",
            "const axis = d3.axisBottom(scale);",
            "",
            "d3.select('svg')",
            "  .append('g')",
            "  .attr('transform', 'translate(10, 30)')",
            "  .call(axis);",
            "```",
            "",
            "You can [try it out on CodeSandbox](https://codesandbox.io/s/v6ovkow8q3).",
            "",
            "<iframe src=\"https://codesandbox.io/embed/v6ovkow8q3?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "If this code doesn't make any sense, don't worry. There's a bunch of D3 to",
            "learn, and I'll help you out. If it's obvious, you're a pro! This book will be",
            "much quicker to read.",
            "",
            "We start with a linear scale that has a domain `[0, 10]` and a range",
            "`[0, 200]`. Scales are like mathematical functions that map a domain to a",
            "range. In this case, calling `scale(0)` returns `0`, `scale(5)` returns `100`,",
            "`scale(10)` returns `200`. Just like a linear function from math class – y =",
            "kx + n.",
            "",
            "We create an axis generator with `axisBottom`, which takes a `scale` and",
            "creates a `bottom` oriented axis – numbers below the line. You can also change",
            "settings for the number of ticks, their sizing, spacing, and so on.",
            "",
            "Equipped with an `axis` generator, we `select` the `svg` element, append a",
            "grouping element, use a `transform` attribute to move it `10`px to the right",
            "and `30`px down, and invoke the generator with `.call()`.",
            "",
            "It creates a small axis:",
            "",
            "![Simple axis](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/simple-axis.png)",
            "",
            "Play around with it on [Codesandbox](https://codepen.io/swizec/pen/YGoYBM).",
            "Change the scale type, play with axis orientation. Use `.ticks` on the axis to",
            "change how many show up. Have some fun :smiley:",
            ""
          ]
        },
        {
          "lectureTitle": "A React + D3 axis",
          "lectureLines": [
            "",
            "## A quick blackbox example - a React+D3 axis",
            "",
            "Now let's say we want to use that same axis code but as a React component. The",
            "simplest way is to use a blackbox component approach like this:",
            "",
            "```{.javascript caption=\"React blackbox axis\"}",
            "class Axis extends Component {",
            "  gRef = React.createRef();",
            "",
            "  componentDidMount() { this.d3render() }",
            "  componentDidUpdate() { this.d3render() }",
            "",
            "  d3render() {",
            "const scale = d3.scaleLinear()",
            "                .domain([0, 10])",
            "                .range([0, 200]);",
            "  const axis = d3.axisBottom(scale);",
            "",
            "d3.select(this.gRef)",
            "  .call(axis);",
            "  }",
            "",
            "  render() {",
            "  return <g transform=\"translate(10, 30)\" ref={this.gRef} />",
            "  }",
            "}",
            "```",
            "",
            "So much code! Worth it for the other benefits of using React in your dataviz.",
            "You'll see :smiley:",
            "",
            "We created an `Axis` component that extends React's base `Component` class. We",
            "can't use functional components because we need lifecycle hooks.",
            "",
            "Our component has a `render` method. It returns a grouping element (`g`) moved",
            "10px to the right and 30px down using the `transform` attribute. Same as",
            "before.",
            "",
            "A React ref saved in `this.gRef` and passed into our `<g>` element with `ref`",
            "lets us talk to the DOM node directly. We need this to hand over rendering",
            "control to D3.",
            "",
            "The `d3render` method looks familiar. It's the same code we used in the vanilla",
            "D3 example. Scale, axis, select, call. Only difference is that instead of",
            "selecting `svg` and appending a `g` element, we select the `g` element rendered",
            "by React and use that.",
            "",
            "We use `componentDidUpdate` and `componentDidMount` to keep our render up to",
            "date. Ensures that our axis re-renders every time React's engine decides to",
            "render our component.",
            "",
            "That wasn't so bad, was it?",
            "",
            "[Try it out on Codesandbox](https://codesandbox.io/s/3xy2jr1y5m).",
            "",
            "<iframe src=\"https://codesandbox.io/embed/3xy2jr1y5m?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "You can make the axis more useful by getting positioning, scale, and",
            "orientation from props. We'll do that in our big project.",
            "",
            "### Practical exercise",
            "",
            "Try implementing those as an exercise. Make the axis more reusable with some",
            "carefully placed props.",
            "",
            "Here's my solution, if you get stuck :point_right:",
            "[https://codesandbox.io/s/5ywlj6jn4l](https://codesandbox.io/s/5ywlj6jn4l)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/5ywlj6jn4l?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            ""
          ]
        },
        {
          "lectureTitle": "A D3 blackbox higher order component - HOC",
          "lectureLines": [
            "",
            "# A D3 blackbox higher order component – HOC {#blackbox-hoc}",
            "",
            "After that example you might think this is hella tedious to implement every",
            "time. You'd be right!",
            "",
            "Good thing you can abstract it all away with a higher order component – a HOC.",
            "Now this is something I should open source (just do it already), but I want to",
            "show you how it works so you can learn about the HOC pattern.",
            "",
            "Higher order components are great when you see multiple React components",
            "sharing similar code. In our case, that shared code is:",
            "",
            "- rendering an anchor element",
            "- calling D3's render on updates",
            "",
            "With a HOC, we can abstract that away into a sort of",
            "[object factory](https://en.wikipedia.org/wiki/Factory_method_pattern). It's an",
            "old concept making a comeback now that JavaScript has classes.",
            "",
            "Think of our HOC as a function that takes some params and creates a class – a",
            "React component. Another way to think about HOCs is that they're React",
            "components wrapping other React components and a function that makes it easy.",
            "",
            "A HOC for D3 blackbox integration, called `D3blackbox`, looks like like this:",
            "",
            "```{.javascript caption=\"React blackbox HOC\"}",
            "function D3blackbox(D3render) {",
            "  return class Blackbox extends React.Component {",
            "anchor = React.createRef();",
            "",
            "componentDidMount() { D3render.call(this); }",
            "componentDidUpdate() { D3render.call(this) }",
            "",
            "render() {",
            "  const { x, y } = this.props;",
            "  return <g transform={`translate(${x}, ${y})`} ref={this.anchor} />;",
            "}",
            "  }",
            "}",
            "```",
            "",
            "You'll recognize most of that code from earlier.",
            "",
            "We have `componentDidMount` and`componentDidUpdate` lifecycle hooks that call",
            "`D3render` on component updates. `render` renders a grouping element as an",
            "anchor with a ref so D3 can use it to render stuff into.",
            "",
            "Because `D3render` is no longer a part of our component, we have to use `.call`",
            "to give it the scope we want: this class, or rather `this` instance of the",
            "`Blackbox` class.",
            "",
            "We've also made some changes that make `render` more flexible. Instead of",
            "hardcoding the `translate()` transformation, we take `x` and `y` props.",
            "`{ x, y } = this.props` takes `x` and `y` out of `this.props` using object",
            "decomposition, and we used ES6 string templates for the `transform` attribute.",
            "",
            "Consult the [ES6 cheatsheet](https://es6cheatsheet.com/) for details on the",
            "syntax.",
            "",
            "Using our new `D3blackbox` HOC to make an axis looks like this:",
            "",
            "```{.javascript caption=\"React blackbox HOC\"}",
            "const Axis = D3blackbox(function () {",
            "const scale = d3.scaleLinear()",
            "          .domain([0, 10])",
            "          .range([0, 200]);",
            "const axis = d3.axisBottom(scale);",
            "",
            "d3.select(this.anchor)",
            "  .call(axis);",
            "});",
            "```",
            "",
            "You know this code! We copy pasted our axis rendering code from before, wrapped",
            "it in a function, and passed it into `D3blackbox`. Now it's a React component.",
            "",
            "Play with this example on",
            "[Codesandbox, here](https://codesandbox.io/s/5v21r0wo4x).",
            "",
            "<iframe src=\"https://codesandbox.io/embed/5v21r0wo4x?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            ""
          ]
        },
        {
          "lectureTitle": "D3blackbox magic trick - render anything in 30 seconds",
          "lectureLines": [
            "",
            "## D3blackbox magic trick – render anything in 30 seconds {#magic-trick}",
            "",
            "Let me show you a magic trick. 30 seconds to take a random D3 piece of code and",
            "add it to your React project.",
            "",
            "We can try it on the example barchart from before.",
            "",
            "![An example D3 barchart](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/barchart-example.png)",
            "",
            "You can",
            "[try it online](https://cdn.rawgit.com/mbostock/3885304/raw/a91f37f5f4b43269df3dbabcda0090310c05285d/index.html).",
            "When you hover on a bar, it changes color. Pretty neat.",
            "",
            "I recommend you follow along in a CodeSandbox. If you fork the",
            "[react-d3-axis-hoc CodeSandbox](https://codesandbox.io/s/5v21r0wo4x) that will",
            "be easiest.",
            "",
            "<iframe src=\"https://codesandbox.io/embed/5v21r0wo4x?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "You should already have the `D3blackbox` HOC. If you don't, make a new file and",
            "paste it in.",
            "",
            "With your HOC ready, create a new file in CodeSandbox. Call it `Barchart.js`.",
            "",
            "Add your imports:",
            "",
            "```{.javascript caption=\"Import dependencies\"}",
            "import React from 'react';",
            "import D3blackbox from './D3blackbox';",
            "import * as d3 from 'd3';",
            "```",
            "",
            "This gives you React, our HOC, and D3.",
            "",
            "Now right-click view code on that barchart and copy the code. Wrap it in a",
            "`D3blackbox` call. Like this:",
            "",
            "```{.javascript caption=\"Wrap D3 code in D3blackbox\"}",
            "const Barchart = D3blackbox(function () {",
            "  var svg = d3.select(\"svg\"),",
            "  margin = {top: 20, right: 20, bottom: 30, left: 40},",
            "  width = +svg.attr(\"width\") - margin.left - margin.right,",
            "  height = +svg.attr(\"height\") - margin.top - margin.bottom;",
            "",
            "  var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),",
            "  y = d3.scaleLinear().rangeRound([height, 0]);",
            "",
            "  var g = svg.append(\"g\")",
            "  .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");",
            "",
            "  d3.tsv(\"data.tsv\", function(d) {",
            "d.frequency = +d.frequency;",
            "return d;",
            "  }, function(error, data) {",
            "if (error) throw error;",
            "",
            "x.domain(data.map(function(d) { return d.letter; }));",
            "y.domain([0, d3.max(data, function(d) { return d.frequency; })]);",
            "",
            "g.append(\"g\")",
            "    .attr(\"class\", \"axis axis--x\")",
            "    .attr(\"transform\", \"translate(0,\" + height + \")\")",
            "    .call(d3.axisBottom(x));",
            "",
            "g.append(\"g\")",
            "    .attr(\"class\", \"axis axis--y\")",
            "    .call(d3.axisLeft(y).ticks(10, \"%\"))",
            "  .append(\"text\")",
            "    .attr(\"transform\", \"rotate(-90)\")",
            "    .attr(\"y\", 6)",
            "    .attr(\"dy\", \"0.71em\")",
            "    .attr(\"text-anchor\", \"end\")",
            "    .text(\"Frequency\");",
            "",
            "g.selectAll(\".bar\")",
            "  .data(data)",
            "  .enter().append(\"rect\")",
            "    .attr(\"class\", \"bar\")",
            "    .attr(\"x\", function(d) { return x(d.letter); })",
            "    .attr(\"y\", function(d) { return y(d.frequency); })",
            "    .attr(\"width\", x.bandwidth())",
            "    .attr(\"height\", function(d) { return height - y(d.frequency); });",
            "  });",
            "})",
            "",
            "export default Barchart;",
            "```",
            "",
            "That should throw some errors. We have to change the `d3.select` and get",
            "`width` and `height` from props.",
            "",
            "```{.javascript caption=\"Change where D3 renders\"}",
            "const Barchart = D3blackbox(function () {",
            "  // Delete the line(s) between here...",
            "  var svg = d3.select(\"svg\"),",
            "  // ...and here.",
            "  // Insert the line(s) between here...",
            "  var svg = d3.select(this.anchor.current)",
            "  // ...and here.",
            "  margin = {top: 20, right: 20, bottom: 30, left: 40},",
            "  // Delete the line(s) between here...",
            "  width = +svg.attr(\"width\") - margin.left - margin.right,",
            "  height = +svg.attr(\"height\") - margin.top - margin.bottom;",
            "  // ...and here.",
            "  // Insert the line(s) between here...",
            "  width = +this.props.width - margin.left - margin.right,",
            "  height = +this.props.height - margin.top - margin.bottom;",
            "  // ...and here.",
            "```",
            "",
            "Most D3 examples use a global `svg` variable to refer to their drawing area",
            "– the SVG. Change that to the element you want, your anchor, and the whole",
            "visualization should render in there.",
            "",
            "We also replaced reading width and height from the SVG element to getting them",
            "from props. This makes our component more reusable and better follows best",
            "practices.",
            "",
            "Next step is to change where our barchart gets its data. Gotta use the public",
            "URL.",
            "",
            "```{.javascript caption=\"Change data URL\"}",
            "//Delete the line(s) between here...",
            "d3.tsv(\"data.tsv\", function(d) {",
            "// ...and here.",
            "// Insert the line(s) between here...",
            "d3.tsv(\"https://swizec.github.io/dl/barchart.tsv\", function(d) {",
            "// ...and here.",
            "d.frequency = +d.frequency;",
            "return d;",
            "// Delete the line(s) between here...",
            "  }, function(error, data) {",
            "if (error) throw error;",
            "// ...and here.",
            "// Insert the line(s) between here...",
            "  }).then(function(data) {",
            "// ...and here.",
            "```",
            "",
            "Same link, absolute version. And we updated the callback-based code to use the",
            "D3v5 promises version. That's the most disruptive change going from v4 to v5 I",
            "believe.",
            "",
            "That's it. You now have a Barchart component that renders the example barchart",
            "from D3's docs.",
            "",
            "You can use it like this :point_down: I recommend adding this code to the main",
            "App component that CodeSandbox creates for you.",
            "",
            "```{.javascript caption=\"Use the Barchart\"}",
            "import Barchart from './Barchart';",
            "",
            "// ...",
            "return (",
            "  <svg width=\"800\" height=\"600\">",
            "<Barchart x={10} y={10} width={400} height={300} />",
            "  </svg>",
            ")",
            "```",
            "",
            "But like I said, don't use this in production. It's great for quick prototypes,",
            "trying stuff out, or seeing how an existing visualization might fit your app.",
            "",
            "## A note about D3blackbox",
            "",
            "To make your life easier, I have open sourced my version of the D3blackbox HOC.",
            "You can read more about it at [d3blackbox.com](https://d3blackbox.com)",
            "",
            "Works the same as the HOC we just built together, adds the anchor ref, props,",
            "and state to function arguments so it's easier to use. No need to mess with",
            "`this` if you don't want to :)",
            "",
            "Install it from npm:",
            "",
            "```",
            "$ npm install d3blackbox",
            "```",
            "",
            "Then use it as you would your own HOC:",
            "",
            "```{.javascript caption=\"Open source D3blackbox HOC\"}",
            "import React from \"react\";",
            "import D3blackbox from \"d3blackbox\";",
            "import * as d3 from \"d3\";",
            "",
            "const Barchart = D3blackbox(function(anchor, props, state) {",
            "const svg = d3.select(anchor.current);",
            "// the rest of your D3 code",
            "});",
            "",
            "export default Barchart;",
            "```",
            "",
            "The function you pass into `D3blackbox` is still your full D3 render. Except",
            "now you can access important values directly without using `this`.",
            "",
            "You can use my D3blackbox or build your own. What's important is that you now",
            "understand how higher order components work.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Build scalable dataviz components with full integration",
      "lectures": [
        {
          "lectureTitle": "The approach",
          "lectureLines": [
            "",
            "# Build scalable dataviz components with full integration {#full-feature-integration}",
            "",
            "As useful as blackbox components are, we need something better if we want to",
            "leverage React's rendering engine. The blackbox approach in particular",
            "struggles with scale. The more charts and graphs and visualizations on your",
            "screen, the slower it gets.",
            "",
            "Someone once came to my workshop and said _\"We used the blackbox approach and",
            "it takes several seconds to re-render our dashboard on any change. I'm here to",
            "learn how to do it better.\"_",
            "",
            "In our full-feature integration, React does the rendering and D3 calculates the",
            "props.",
            "",
            "Our goal is to build controlled components that listen to their props and",
            "reconcile that with D3's desire to use a lot of internal state.",
            "",
            "There are two situations we can find ourselves in:",
            "",
            "1. We know for a fact our component's props never change",
            "2. We think props could change",
            "",
            "It's easiest to show you with an example.",
            "",
            "Let's build a scatterplot step by step. Take a random array of two-dimensional",
            "data, render in a loop. Make magic.",
            "",
            "Something like this :point_down:",
            "",
            "![A simple scatterplot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/scatterplot.png)",
            "",
            "You've already built the axes! Copy pasta time.",
            ""
          ]
        },
        {
          "lectureTitle": "When props don't change - a scatterplot",
          "lectureLines": [
            "",
            "## Props don't change",
            "",
            "Ignoring props changes makes our life easier, but the component less flexible",
            "and reusable. Great when you know in advance that there are features you don't",
            "ned to support.",
            "",
            "Like, no filtering your data or changing component size :point_right: means",
            "your D3 scales don't have to change.",
            "",
            "When our props don't change, we follow a 2-step integration process:",
            "",
            "- set up D3 objects as class properties",
            "- output SVG in `render()`",
            "",
            "We don't have to worry about updating D3 objects on prop changes. Work done",
            ":ok_hand:",
            "",
            "### An unchanging scatterplot",
            "",
            "We're building a scatterplot of random data. You can see the",
            "[final solution on CodeSandbox](https://codesandbox.io/s/1zlp4jv494)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/1zlp4jv494?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "Here's the approach :point_down:",
            "",
            "- stub out the basic setup",
            "- generate random data",
            "- stub out Scatterplot",
            "- set up D3 scales",
            "- render circles for each entry",
            "- add axes",
            "",
            "I recommend creating a new CodeSandbox, or starting a new app with",
            "create-react-app. They should work the same.",
            "",
            "#### Basic setup",
            "",
            "Make sure you have `d3` added as a dependency. Then add imports in your",
            "`App.js` file.",
            "",
            "```{.javascript caption=\"Import files in App.js\"}",
            "// ./App.js",
            "",
            "import * as d3 from \"d3\";",
            "import Scatterplot from \"./Scatterplot\";",
            "```",
            "",
            "Add an `<svg>` and render a Scatterplot in the render method. This will throw",
            "an error because we haven't defined the Scatterplot yet and that's okay.",
            "",
            "```{.javascript caption=\"Render Scatterplot in App.js\"}",
            "// ./App.js",
            "",
            "function App() {",
            "  return (",
            "<div className=\"App\">",
            "  <h1>Hello CodeSandbox</h1>",
            "  <h2>Start editing to see some magic happen!</h2>",
            "  <svg width=\"800\" height=\"800\">",
            "    <Scatterplot x={50} y={50} width={300} height={300} data={data} />",
            "  </svg>",
            "</div>",
            "  );",
            "}",
            "```",
            "",
            "CodeSandbox adds most of that code by default. If you're using",
            "create-react-app, your App component has different markup. That's okay too.",
            "",
            "We added this part:",
            "",
            "```javascript",
            "<svg width=\"800\" height=\"800\">",
            "  <Scatterplot x={50} y={50} width={300} height={300} data={data} />",
            "</svg>",
            "```",
            "",
            "An `<svg>` drawing area with a width and a height. Inside, a `<Scatterplot`",
            "that's positioned at `(50, 50)` and is 300px tall and wide. We'll have to",
            "listen to those props when building the Scatterplot.",
            "",
            "It also accepts data.",
            "",
            "#### Random data",
            "",
            "We're using a line of code to generate data for our scatterplot. Put it in",
            "App.js. Either globally or within the App function. Doesn't matter because this",
            "is an example.",
            "",
            "```{.javascript caption=\"Generate random data\"}",
            "const data = d3.range(100)",
            "           .map(_ => [Math.random(), Math.random()]);",
            "```",
            "",
            "`d3.range` returns a counting array from 0 to 100. Think `[1,2,3,4 ...]`.",
            "",
            "We iterate over this array and return a pair of random numbers for each entry.",
            "These will be our X and Y coordinates.",
            "",
            "#### Scatterplot",
            "",
            "Our scatterplot goes in a new `Scatterplot.js` file. Starts with imports and an",
            "empty React component.",
            "",
            "```{.javascript caption=\"Scatterplot stub\"}",
            "// ./Scatterplot.js",
            "import React from \"react\";",
            "import * as d3 from \"d3\";",
            "",
            "class Scatterplot extends React.Component {",
            "",
            "  render() {",
            "const { x, y, data, height } = this.props;",
            "",
            "return (",
            "  <g transform={`translate(${x}, ${y})`}>",
            "",
            "  </g>",
            ");",
            "  }",
            "}",
            "",
            "export default Scatterplot;",
            "```",
            "",
            "Import dependencies, create a `Scatterplot` component, render a grouping",
            "element moved to the correct `x` and `y` position. Nothing too strange yet.",
            "",
            "#### D3 scales",
            "",
            "Now we define D3 scales as component properties. We're using the class field",
            "syntax that's common in React projects.",
            "",
            "Technically a Babel plugin, but comes by default with CodeSandbox React",
            "projects and create-react-app setup. As far as I can tell, it's a common way to",
            "write React components.",
            "",
            "```{.javascript caption=\"Add D3 scales\"}",
            "// ./Scatterplot.js",
            "class Scatterplot extends React.Component {",
            "  xScale = d3",
            ".scaleLinear()",
            ".domain([0, 1])",
            ".range([0, this.props.width]);",
            "  yScale = d3",
            ".scaleLinear()",
            ".domain([0, 1])",
            ".range([this.props.height, 0]);",
            "```",
            "",
            "We're defining `this.xScale` and `this.yScale` as linear scales. Their domains",
            "go from 0 to 1 because that's what Math.random returns and their ranges",
            "describe the size of our scatterplot component.",
            "",
            "Idea being that these two scales will help us take those tiny variations in",
            "datapoint coordinates and explode them up to the full size of our scatterplot.",
            "Without this, they'd overlap and we wouldn't see anything.",
            "",
            "#### Circles for each entry",
            "",
            "Rendering our data points is a matter of looping over the data and rendering a",
            "`<circle>` for each entry. Using our scales to define positioning.",
            "",
            "```{.javascript caption=\"Loop through data and render circles\"}",
            "// ./Scatterplot.js",
            "",
            "return (",
            "  <g transform={`translate(${x}, ${y})`}>",
            "{data.map(([x, y]) => (",
            "  <circle cx={this.xScale(:satisfied:} cy={this.yScale(y)} r=\"5\" />",
            "))}",
            "  </g>",
            ");",
            "```",
            "",
            "In the `return` statement of our `render` render method, we add a `data.map`",
            "with an iterator method. This method takes our datapoint, uses array",
            "destructuring to get `x` and `y` coordinates, then uses our scales to define",
            "`cx` and `cy` attributes on a `<circle>` element.",
            "",
            "#### Add axes",
            "",
            "You can reuse axes from our earlier exercise. Or copy mine from",
            "[the CodeSandbox](https://codesandbox.io/s/1zlp4jv494)",
            "",
            "<iframe src=\"https://codesandbox.io/embed/1zlp4jv494?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "Mine take a scale and orientation as props, which makes them more flexible.",
            "Means we can use the same component for both the vertical and horizontal axis",
            "on our Scatterplot.",
            "",
            "Put the axis code in `Axis.js`, then augment the Scatterplot like this",
            ":point_down:",
            "",
            "```{.javascript caption=\"Add axes to Scatterplot\"}",
            "import Axis from \"./Axis\";",
            "",
            "// ...",
            "",
            "return (",
            "  <g transform={`translate(${x}, ${y})`}>",
            "{data.map(([x, y]) => (",
            "  <circle cx={this.xScale(:satisfied:} cy={this.yScale(y)} r=\"5\" />",
            "))}",
            "<Axis x={0} y={0} scale={this.yScale} type=\"Left\" />",
            "<Axis x={0} y={height} scale={this.xScale} type=\"Bottom\" />",
            "  </g>",
            ");",
            "```",
            "",
            "Vertical axis takes the vertical `this.yScale` scale, orients to the `Left` and",
            "we position it top left. The horizontal axis takes the horizontal `this.xScale`",
            "scale, orients to the `Bottom`, and we render it bottom left.",
            "",
            "Your Scatterplot should now look like this",
            "",
            "![Rendered basic scatterplot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/scatterplot-basic.png)",
            ""
          ]
        },
        {
          "lectureTitle": "A scatterplot When props do change",
          "lectureLines": [
            "",
            "## Props might update",
            "",
            "The story is a little different when our props might update. Since we're using",
            "D3 objects to calculate SVG properties, we have to make sure those objects are",
            "updated _before_ we render.",
            "",
            "No problem in React 15: Update in `componentWillUpdate`. But since React 16.3",
            "we've been told never to use that again. Causes problems for modern async",
            "rendering.",
            "",
            "The official recommended solution is that anything that used to go in",
            "`componentWillUpdate`, can go in `componentDidUpdate`. But not so fast!",
            "",
            "Updating D3 objects in `componentDidUpdate` would mean our visualization always",
            "renders one update behind. Stale renders! :scream:",
            "",
            "The new `getDerivedStateFromProps` to the rescue. Our integration follows a",
            "3-step pattern:",
            "",
            "- set up D3 objects in component state",
            "- update D3 objects in `getDerivedStateFromProps`",
            "- output SVG in `render()`",
            "",
            "`getDerivedStateFromProps` is officially discouraged, and yet the best tool we",
            "have to make sure D3 state is updated _before_ we render.",
            "",
            "Because React calls `getDerivedStateFromProps` on every component render, not",
            "just when our props actually change, you should avoid recalculating complex",
            "things too often. Use memoization helpers, check for changes before updating,",
            "stuff like that.",
            "",
            "### An updateable scatterplot",
            "",
            "Let's update our scatterplot so it can deal with resizing and updating data.",
            "",
            "3 steps :point_down:",
            "",
            "- add an interaction that resizes the scatterplot",
            "- move scales to state",
            "- update scales in `getDerivedStateFromProps`",
            "",
            "You can see",
            "[my final solution on CodeSandbox](https://codesandbox.io/s/ll9kp8or0l). I",
            "recommend you follow along updating your existing code.",
            "",
            "<iframe src=\"https://codesandbox.io/embed/ll9kp8or0l?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "#### Resize scatterplot on click",
            "",
            "To test our scatterplot's adaptability, we have to add an interaction: Resize",
            "the scatterplot on click.",
            "",
            "That change happens in `App.js`. Click on the `<svg>`, reduce width and height",
            "by 30%.",
            "",
            "Move sizing into App state and add an `onClick` handler.",
            "",
            "```{.javascript caption=\"Sizing into state and click handler\"}",
            "// App.js",
            "class App extends React.Component {",
            "  state = {",
            "width: 300,",
            "height: 300",
            "  };",
            "",
            "  onClick = () => {",
            "const { width, height } = this.state;",
            "this.setState({",
            "  width: width * 0.7,",
            "  height: height * 0.7",
            "});",
            "  };",
            "",
            "  render() {",
            "const { width, height } = this.state;",
            "```",
            "",
            "We changed our App component from a function to a class, added `state` with",
            "default `width` and `height`, and an `onClick` method that reduces size by 30%.",
            "The `render` method reads `width` and `height` from state.",
            "",
            "Now gotta change rendering to listen to these values and fire the `onClick`",
            "handler.",
            "",
            "```{.javascript caption=\"Use state in rendering\"}",
            "// App.js",
            "",
            "<svg width=\"800\" height=\"800\" onClick={this.onClick}>",
            "  <Scatterplot",
            "x={50}",
            "y={50}",
            "width={width}",
            "height={height}",
            "data={data}",
            "  />",
            "</svg>",
            "```",
            "",
            "Similar rendering as before. We have an `<svg>` that contains a",
            "`<Scatterplot>`. The svg fires `this.onClick` on click events and the",
            "scatterplot uses our `width` and `height` values for its props.",
            "",
            "If you try this code now, you should see a funny effect where axes move, but",
            "the scatterplot doesn't resize.",
            "",
            "![Axes move, scatterplot doesn't resize](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/not-resizing-scatterplot.png)",
            "",
            "Peculiar isn't it? Try to guess why.",
            "",
            "#### Move scales to state",
            "",
            "The horizontal axis moves because it's render at `height` vertical coordinate.",
            "Datapoints don't move because the scales that position them are calculated once",
            "– on component mount.",
            "",
            "First step to keeping scales up to date is to move them from component values",
            "into state.",
            "",
            "```{.javascript caption=\"Move scales into state\"}",
            "// Scatterplot.js",
            "class Scatterplot extends React.Component {",
            "  state = {",
            "xScale: d3",
            "  .scaleLinear()",
            "  .domain([0, 1])",
            "  .range([0, this.props.width]),",
            "yScale: d3",
            "  .scaleLinear()",
            "  .domain([0, 1])",
            "  .range([this.props.height, 0])",
            "  };",
            "```",
            "",
            "Same scale definition code we had before. Linear scales, domain from 0 to 1,",
            "using props for ranges. But now they're wrapped in a `state = {}` object and",
            "it's `xScale: d3 ...` instead of `xScale = d3 ...`.",
            "",
            "Our render function should use these as well. Small change:",
            "",
            "```{.javascript caption=\"Render function uses state scales\"}",
            "// Scatterplot.js",
            "  render() {",
            "const { x, y, data, height } = this.props,",
            "  { yScale, xScale } = this.state;",
            "",
            "return (",
            "  <g transform={`translate(${x}, ${y})`}>",
            "    {data.map(([x, y]) => <circle cx={xScale(:satisfied:} cy={yScale(y)} r=\"5\" />)}",
            "```",
            "",
            "We use destructuring to take our scales from state, then use them when mapping",
            "over our data.",
            "",
            "Clicking on the SVG produces the same result as before, but we're almost there.",
            "Just one more step.",
            "",
            "#### Update scales in `getDerivedStateFromProps`",
            "",
            "Last step is to update our scales' ranges in `getDerivedStateFromProps`. This",
            "method runs every time React touches our component for any reason.",
            "",
            "```{.javascript caption=\"Update scales\"}",
            "// Scatterplot.js",
            "class Scatterplot extends React.PureComponent {",
            "  // ..",
            "  static getDerivedStateFromProps(props, state) {",
            "const { yScale, xScale } = state;",
            "",
            "yScale.range([props.height, 0]);",
            "xScale.range([0, props.width]);",
            "",
            "return {",
            "  ...state,",
            "  yScale,",
            "  xScale",
            "};",
            "  }",
            "```",
            "",
            "Take scales from state, update ranges with new values, return new state. Nice",
            "and easy.",
            "",
            "Notice that `getDerivedStateFromProps` is a static method shared by all",
            "instances of our Scatterplot component. You have no reference to a `this` and",
            "have to calculate new state purely from the `props` and `state` passed into",
            "your method.",
            "",
            "It's a lot like a Redux reducer, if that helps you think about it. If you don't",
            "know what Redux reducers are, don't worry. Just remember to return a new",
            "version of component state.",
            "",
            "Your Scatterplot should now update its size on every click.",
            "",
            "![Scatterplot resizes](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/scatterplot-resizes.png)",
            ""
          ]
        },
        {
          "lectureTitle": "Making your components more flexible with render props",
          "lectureLines": [
            "",
            "## Making your components more flexible with render props",
            "",
            "Our scatterplot doesn't look quite as nice as the earlier screenshot. Regular",
            "SVG circles with no styling just can't match up.",
            "",
            "What if we wanted to render beautiful circles? Or stars? Or maybe something",
            "else entirely?",
            "",
            "We can use render props to give users of our scatterplot component the power to",
            "define how they want datapoints to render. :scream:",
            "",
            "Think of it as a sort of inversion of control. Another common buzzword are",
            "\"slots\", or renderless components. The idea is that one of our props accepts a",
            "React component.",
            "",
            "We then use that prop to render our datapoints.",
            "",
            "It looks a little like this :point_down:",
            "",
            "```jsx",
            "<Scatterplot",
            "  x={10} y={10}",
            "  data={data}",
            "  datapoint={(props) => <Datapoint {...props} />}",
            ">",
            "```",
            "",
            "What's more, we can add interactions and other useful stuff to our",
            "`<Datapoint>` and `<Scatterplot>` doesn't have to know anything about it. All",
            "the scatterplot cares about is rendering two axes and a bunch of datapoints.",
            "",
            "Let's use the render prop approach to make our scatterplot more reusable.",
            "",
            "Steps :point_down:",
            "",
            "- pass in a render prop",
            "- use it to render datapoints",
            "- make datapoint component look nice",
            "",
            "You can see [my solution on CodeSandbox](https://codesandbox.io/s/j73xlyr8v5).",
            "I recommend you follow along with your existing code.",
            "",
            "<iframe src=\"https://codesandbox.io/embed/j73xlyr8v5?codemirror=1&view=split\" style=\"width:100%; height:500px; border:open_mouth:; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>",
            "",
            "### Pass in a render prop",
            "",
            "React components are Just JavaScript. Either a JSX function call or a function",
            "that returns some JSX.",
            "",
            "That means we can pass them into components via props. Let's do that in App.js",
            "",
            "```{.javascript caption=\"Pass render prop into Scatterplot\"}",
            "// App.js",
            "",
            "import Datapoint from \"./Datapoint\";",
            "",
            "//..",
            "<svg width=\"800\" height=\"800\" onClick={this.onClick}>",
            "  <Scatterplot",
            "x={50}",
            "y={50}",
            "width={width}",
            "height={height}",
            "data={data}",
            "datapoint={({ x, y }) => <Datapoint x={x} y={y} />}",
            "  />",
            "</svg>",
            "```",
            "",
            "For extra flexibility and readability we're wrapping our `<Datapoint>`",
            "component in another function that accepts `x` and `y` coordinates. This is a",
            "common pattern you'll see with render props :point_right: it gives you the",
            "ability to pass in props from both the rendering component and the component",
            "that's setting the render prop.",
            "",
            "Say we wanted Datapoint to know something about our App _and_ our Scatterplot.",
            "The scatterplot calls this function with coordinates. We pass those into",
            "`<Datapoint>`. And because the method is defined inside App, we could pass-in",
            "anything that's defined in the App. Like perhaps `data`.",
            "",
            "Your code will start throwing an error now. Datapoint isn't defined. Don't",
            "worry, it's coming soon.",
            "",
            "### Use render prop to render datapoints",
            "",
            "To use our new `datapoint` render prop, we have to change how we render the",
            "scatterplot. Instead of returning a `<circle>` for each iteration of the",
            "dataset, we're calling a function passed in from props.",
            "",
            "```{.javascript caption=\"Accept a render prop\"}",
            "// Scatterplot.js",
            "  render() {",
            "const { x, y, data, height, datapoint } = this.props,",
            "  { yScale, xScale } = this.state;",
            "",
            "return (",
            "  <g transform={`translate(${x}, ${y})`}>",
            "    {data.map(([x, y]) => datapoint({",
            "        x: xScale(:satisfied:,",
            "        y: yScale(y)",
            "    }))}",
            "```",
            "",
            "We take the `datapoint` function from props and call it in `data.map` making",
            "sure to pass in `x` and `y` as an object. Calling functions with objects like",
            "this is a common JavaScript pattern to fake named arguments.",
            "",
            "### Make datapoint component look nice",
            "",
            "We've got all the rendering, now all we need is the `<Datapoint` component",
            "itself. That goes in a new `Datapoint.js` file.",
            "",
            "```{.javascript caption=\"Datapoint file\"}",
            "import React from \"react\";",
            "import styled from \"styled-components\";",
            "",
            "const Circle = styled.circle`",
            "  fill: steelblue;",
            "  fill-opacity: .7;",
            "  stroke: steelblue;",
            "  stroke-width: 1.5px;",
            "`;",
            "",
            "class Datapoint extends React.Component {",
            "  render() {",
            "const { x, y } = this.props;",
            "",
            "return (",
            "  <Circle",
            "    cx={x}",
            "    cy={y}",
            "    r={3}",
            "  />",
            ");",
            "  }",
            "}",
            "",
            "export default Datapoint;",
            "```",
            "",
            "I'm using styled-components to define the CSS for my Datapoint. You can use",
            "whatever you prefer. I like styled components because they're a good balance",
            "between CSS-in-JS and normal CSS syntax.",
            "",
            "The component itself renders a styled circle using props for positioning and a",
            "radius of 3 pixels.",
            "",
            "![Finished scatterplot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/scatterplot-finished.png)",
            "",
            "For an extra challenge, try rendering circle radius from state and changing",
            "datapoint size on mouse over. Make the scatterplot interactive.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "You're awesome",
      "lectures": [
        {
          "lectureTitle": ":muscle:",
          "lectureLines": [
            "",
            "# You're awesome",
            "",
            "You know the basics!",
            "",
            "You can take any D3 example from the internets and wrap it in a React",
            "component, _and_ you know how to build React+D3 components from scratch. You're",
            "amazing. High five! :raised_hand_with_fingers_splayed:",
            "",
            "The rest of this book is about using these concepts and pushing them to the",
            "limits of practicality. We're going to build an interactive visualization of",
            "tech salaries compared to median household income.",
            "",
            "Why? Because it piqued my interest, and because it shows why you should call",
            "yourself an engineer, not a programmer or a developer. **You're an engineer**.",
            "Remember that.",
            "",
            "Throughout the example, you'll learn more details of D3, tidbits from React,",
            "and the animation chapter is going to blow your mind.",
            "",
            "Super fun!",
            "",
            "![Default view](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/full-dataviz.png)",
            "",
            "![After a click](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/interaction-dataviz.png)",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "A note about state",
      "lectures": [
        {
          "lectureTitle": "Handling state in your React app",
          "lectureLines": [
            "",
            "# Handling state in your React app {#state-handling-architecture}",
            "",
            "Before I can set you loose on the world, we should talk about managing state.",
            "It's where most engineers shoot themselves in the foot.",
            "",
            "You'll notice you shot yourself in the foot six months ago when all of a sudden",
            "it becomes near impossible to build new features, add functionality, and know",
            "what's going on with your app. If you find yourself spending a lot of time",
            "confused about why your UI does something, you've shot yourself in the foot.",
            "",
            "Don't worry tho, happens to everyone!",
            "",
            "I shoot myself in the foot all the time. You can't predict how your app is",
            "going to evolve. You can't know how technology is going to improve. Can't know",
            "how your team will grow.",
            "",
            "Best approach is to optimize for change.",
            "",
            "Otherwise you might have to do a rewrite. Rewrites are bad. One of the most",
            "infamous rewrite story is about",
            "[The Rewrite that Killed Netscape](https://www.joelonsoftware.com/articles/fog0000000069.html).",
            "You might not even have heard of Netscape :wink:",
            "",
            "Let's save you from that.",
            ""
          ]
        },
        {
          "lectureTitle": "Basic architecture we'll use",
          "lectureLines": [
            "",
            "## Basic architecture {#basic-architecture}",
            "",
            "![Unidirectional data flow](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/unidirectionalflow.png)",
            "",
            "We're using a unidirectional data flow architecture with a single source of",
            "truth. That means you always know what to expect. Think of your app as a giant",
            "circle.",
            "",
            "Data goes from your source of truth into your components. Events go from your",
            "components into your source of truth. All in one direction",
            "",
            "![The basic architecture](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/architecture.png)",
            "",
            "Our main App component holds state for your entire application. Anything that",
            "multiple components should be aware of lives here. This state flows down the",
            "hierarchy via props. Changes happen via callbacks, also passed down through",
            "props.",
            "",
            "Like this :point_down:",
            "",
            "- The Main Component – `App` – holds the truth",
            "- Truth flows down through props",
            "- Child components react to user events",
            "- They announce changes using callbacks",
            "- The Main Component updates its truth",
            "- Updates flow back down the chain",
            "- UI updates through re-renders",
            "",
            "This looks roundabout, but it's amazing. Far better than worrying about parts",
            "of the UI growing out of sync with the rest of your app. I could talk your ear",
            "off with debugging horror stories, but I'm nice, so I won't.",
            "",
            "When a user clicks one of our controls, a `Toggle`, it invokes a callback. This",
            "in turn invokes a callback on `ControlRow`, which invokes a callback on",
            "`Controls`, which invokes a callback on `App`.",
            "",
            "![Callback chain](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/architecture_callbacks.png)",
            "",
            "With each hop, the nature of our callback changes. `Toggle` tells `ControlRow`",
            "which entry was toggled, `ControlRow` tells `Controls` how to update the data",
            "filter function, and `Controls` gives `App` a composite filter built from all",
            "the controls. You'll see how that works in the next chapter.",
            "",
            "All you have to remember right now is that callbacks evolve from passing",
            "low-level information to high-level business logic. Starts with _\"I was",
            "clicked\"_ ends with _\"Update visualization filter\"_",
            "",
            "When the final callback is invoked, `App` updates its repository of truth –",
            "`this.state` – and communicates the change back down the chain via props. No",
            "additional wiring needed on your part. React's got you covered.",
            "",
            "![Data flows down](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/architecture_dataflow.png)",
            "",
            "You can think of it like calling functions with new arguments. Because the",
            "functions – components – render the UI, your interface updates.",
            "",
            "Because your components are well-made and rely on their props to render,",
            "React's engine can optimize these changes. It compares the new and old",
            "component trees and decides which components to re-render and which to leave",
            "alone.",
            "",
            "Functional programming for HTML! :sunglasses:",
            "",
            "The functional programming concepts we're relying on are called",
            "[referential transparency](https://en.wikipedia.org/wiki/Referential_transparency),",
            "[idempotent functions](https://en.wikipedia.org/wiki/Idempotence), and",
            "[functional purity](https://en.wikipedia.org/wiki/Pure_function). I suggest",
            "Googling them if you want to learn the theory behind it all.",
            ""
          ]
        },
        {
          "lectureTitle": "What about React Context? Redux? MobX?",
          "lectureLines": [
            "",
            "## What about React Context? Redux? MobX?",
            "",
            "You may have heard of React Context, Redux, MobX and other state handling",
            "libraries. They're all great in different ways and the internet can't decide",
            "which one is best. Everyone has their own little twist on the story.",
            "",
            "And yet the basic principles are all the same:",
            "",
            "1. Single source of truth",
            "2. State flows down",
            "3. Updates flow up",
            "",
            "Where React Context, Redux, MobX and other libraries help, is how much work it",
            "is to build this machinery and keep it running. How much flexibility you get",
            "when moving components. Basically how easy it is to change your app later.",
            "",
            "Remember the rewrite conundrum?",
            "",
            "Our basic approach binds business structure to UI structure. Your state, your",
            "props, your callbacks, they all follow the same hierarchy as your UI does.",
            "",
            "Want to move the buy button? Great! You have to update the entire chain of",
            "components leading from your state to that button.",
            "",
            "Everything needs new callbacks and new props.",
            "",
            "This is known as prop drilling and fast becomes super tedious. Rewiring your",
            "whole app just to move a single button is no fun.",
            "",
            "To solve this problem, React Context, Redux, MobX, etc. decouple your business",
            "logic from your UI architecture. Take state out of the main component and move",
            "it into its own object. Connect everything to that instead.",
            "",
            "[picture]",
            "",
            "Now it doesn't matter where you move that button. It still triggers the same",
            "function on the same state. Every other component that cares about that state",
            "updates too.",
            "",
            "Different libraries have different details for how that works, but they all",
            "follow the same idea and solve the same problem.",
            "",
            "---",
            "",
            "We're sticking with the basic approach because it's easier to explain, works",
            "without additional libraries, and is Good Enough™.",
            "",
            "You can see an approach to using Redux in dataviz in the",
            "[Animating with React, Redux, and D3 chapter](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906668#animating-react-redux),",
            "and we tackle MobX in the",
            "[MobX chapter](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906696).",
            ""
          ]
        },
        {
          "lectureTitle": "How to structure your app",
          "lectureLines": [
            "",
            "# How to structure your app {#structuring-your-app}",
            "",
            "Our app is built from components. You already know how components work. Where",
            "it gets tricky is deciding where one component ends and another beings.",
            "",
            "One of the hardest problems in software engineering I'd say. Defining the",
            "boundaries and interfaces between objects. Entire books have been written on",
            "the subject.",
            "",
            "You'll learn most of it with experience. Just through trying different",
            "approaches, seeing what works, and developing your taste. Like a chef gets",
            "better at improvisation the more things they try. Or a musician.",
            "",
            "To get you started, here's a rule of thumb that I like to use: if you have to",
            "use the word \"and\" to describe what your component does, then it should become",
            "two components. If you build the same feature multiple times, turn it into a",
            "component.",
            "",
            "You can then remix components into larger components where it makes sense, or",
            "you can keep them separate. It makes sense to combine when multiple small",
            "components have to work together to build a big feature.",
            "",
            "This architecture often mimics the design of your UI.",
            "",
            "For example: our tech salary visualization is going to use 1 very top level",
            "component, 5 major components, and a bunch of child components.",
            "",
            "- `App` is the very top level component; it keeps everything together",
            "- `Title` renders the dynamic title",
            "- `Description` renders the dynamic description",
            "- `Histogram` renders the histogram and has child components for the axis and",
            "  histogram bars",
            "- `CountyMap` renders the choropleth map and uses child components for the",
            "  counties",
            "- `Controls` renders the rows of buttons that let users explore our dataset",
            "",
            "Most of these are specific to our use case, but `Histogram` and `CountyMap`",
            "have potential to be used elsewhere. We'll keep that in mind when we build",
            "them.",
            "",
            "`Histogram`, `CountyMap`, and `Controls` are going to have their own folder",
            "inside `src/components/` to help us group major components with their children.",
            "An `index.js` file will help with imports.",
            "",
            "We'll use a `Meta` folder for all our metadata components like `Title` and",
            "`Description`. We don't _have_ to do this, but",
            "`import { Title, Description } from './Meta'` looks better than separate",
            "imports for related-but-different components. Namespacing, if you will.",
            "",
            "We want to access every component with",
            "`import My Component from './MyComponent'` and render as",
            "`<MyComponent {...params} />`. Something is wrong, if a parent component has to",
            "know details about the implementation of a child component.",
            "",
            "You can read more about these ideas by Googling",
            "[\"leaky abstractions\"](https://en.wikipedia.org/wiki/Leaky_abstraction),",
            "[\"single responsibility principle\"](https://en.wikipedia.org/wiki/Single_responsibility_principle),",
            "[\"separation of concerns\"](https://en.wikipedia.org/wiki/Separation_of_concerns),",
            "and",
            "[\"structured programming\"](https://en.wikipedia.org/wiki/Structured_programming).",
            "Books from the late 90's and early 2000's (when object-oriented programming was",
            "The Future™) have the best curated info in my experience.",
            ""
          ]
        },
        {
          "lectureTitle": "Congratz!",
          "lectureLines": [
            "",
            "Congratz! You know everything you need to build visualizations with React and",
            "D3. :clap:",
            "",
            "This is the point in tech books where I run off and start building things on my",
            "own. Then I get frustrated, spend hours Googling for answers, and then",
            "remember, \"Hey! Maybe I should read the rest of the book!\"",
            "",
            "Reading the rest of the book helps. I'll show you how all this fits together",
            "into a larger project.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Set up your local environment",
      "lectures": [
        {
          "lectureTitle": "Local environment setup",
          "lectureLines": [
            "",
            "# Set up a local environment with create-react-app {#getting-started}",
            "",
            "Can you believe this is the third time I'm writing a _\"How to set up all the",
            "tools and get started\"_ section? The ecosystem moves fast!",
            "",
            "You can see the old versions in the ebook as Appendix A – a roll-your-own",
            "environment that's almost the same as the one I'm about to show you, and",
            "Appendix B – a browserify-based environment (if you don't like Webpack).",
            "",
            "In the summer of 2016, the React team released a tool called",
            "`create-react-app`. It creates a React app so that you can get started right",
            "away. All of the code in this book runs with an app set up like this.",
            "",
            "Getting started with React has never been easier.",
            "",
            "1. Make sure you have node.js",
            "2. Install the app generator",
            "3. Run the app generator",
            ""
          ]
        },
        {
          "lectureTitle": "Start with create-react-app",
          "lectureLines": [
            "",
            "## Make sure you have node.js",
            "",
            "Modern JavaScript development runs on node.js. Your code still ends up in a",
            "browser, but there are a few steps it has to go through before it gets there.",
            "Those toolchains run on node.js.",
            "",
            "Go to [nodejs.org](https://nodejs.org/en/), download one of the latest",
            "versions, and run the installer. You can pick the more stable LTS",
            "(long-term-support) version, or the more gimme-all-the-features version.",
            "JavaScript toolchains run fine in both.",
            "",
            "Server-side rendering might be easier with the fancy-pants version. More on",
            "that later.",
            "",
            "## Install create-react-app",
            "",
            "Great, you have node and you're ready to go.",
            "",
            "Run this command in a terminal:",
            "",
            "```{caption=\"Install create-react-app\"}",
            "$ npm install -g create-react-app",
            "```",
            "",
            "This installs a global npm package called `create-react-app`. Its job is to",
            "create a directory and install `react-scripts`.",
            "",
            "Confusing, I know.",
            "",
            "You can think of `create-react-app` and `react-scripts` as two parts of the",
            "same construction. The first is a lightweight script that you can install",
            "globally and never update; the second is where the work happens. You want this",
            "one to be fresh every time you start a new app.",
            "",
            "Keeping a global dependency up to date would suck, especially considering there",
            "have been six major updates since Facebook first launched `create-react-app` in",
            "July 2016.",
            "",
            "## Run create-react-app",
            "",
            "Superb! You have `create-react-app`. Time to create an app and get started with",
            "some coding.",
            "",
            "Run this in a terminal:",
            "",
            "```{caption=\"Create your project\"}",
            "$ create-react-app react-d3js-example",
            "```",
            "",
            "Congratulations! You just created a React app. _With_ all the setup and the",
            "fuss that goes into using a modern JavaScript toolchain.",
            "",
            "Your next step is to run your app:",
            "",
            "```{caption=\"Start your dev server\"}",
            "$ cd react-d3js-example",
            "$ npm start",
            "```",
            "",
            "A browser tab should open with a page that looks like this:",
            "",
            "![Initial React app](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/initial-app.png)",
            "",
            "If that didn't work, then something must have gone terribly wrong. You should",
            "consult",
            "[the official docs](https://github.com/facebookincubator/create-react-app).",
            "Maybe that will help.",
            ""
          ]
        },
        {
          "lectureTitle": "What you get",
          "lectureLines": [
            "",
            "## What you get",
            "",
            "Running `create-react-app` installs tools and libraries. There's around 80MB of",
            "them as of October 2016. This is why using a generator is easier than slogging",
            "through on your own.",
            "",
            "Crucially, there is a single dependency in your project – `react-scripts`. But",
            "it gives you everything you need to build modern React apps.",
            "",
            "- **Webpack** - a module bundler and file loader. It turns your app into a",
            "  single JavaScript file, and it even lets you import images and styles like",
            "  they were code.",
            "- **Babel** - a JavaScript transpiler. It turns your modern JS code (ES6,",
            "  ECMAScript2015, 2016, ES7, whatever you call it) into code that can run on",
            "  real world browsers. It's the ecosystem's answer to slow browser adoption.",
            "- **ESLint** - linting! It annoys you when you write code that is bad. This is",
            "  a good thing. :smile:",
            "- **Jest** - a test runner. Having tests set up from the beginning of a project",
            "  is a good idea. We won't really write tests in this book, but I will show you",
            "  how it's done.",
            "",
            "All tools come preconfigured with sane defaults and ready to use. You have no",
            "idea how revolutionary this is. Check the appendixes to see how hard setting up",
            "an environment used to be. I'm so happy that `create-react-app` exists.",
            "",
            "---",
            "",
            "Besides the toolchain, `create-react-app` also gives you a default directory",
            "structure and a ton of helpful docs.",
            "",
            "You should read the `README.md` file. It's full of great advice, and it goes",
            "into more detail about the app generator than we can get into here. The team",
            "also makes sure it's kept up-to-date.",
            "",
            "All of the code samples in this book are going to follow the default directory",
            "structure. Public assets like HTML files, datasets, and some images go into",
            "`public/`. Code goes into `src/`.",
            "",
            "Code is anything that we `import` or `require()`. That includes JavaScript",
            "files themselves, as well as stylesheets and images.",
            "",
            "You can poke around `src/App.js` to see how it's structured and what happens",
            "when you change something. You're going to change bits and pieces of this file",
            "as you go through the book.",
            "",
            "I suggest you keep `npm start` running at all times while coding. The browser",
            "will refresh on every code change, so you'll be able to see instant results.",
            ""
          ]
        },
        {
          "lectureTitle": "Install extra dependencies",
          "lectureLines": [
            "",
            "## Install dependencies for React for Datavisualization {#install-dependencies}",
            "",
            "There are a couple of libraries we're going to use often in this book: D3,",
            "Topojson, and Lodash. We're using D3 to do our heavy lifting, Topojson to parse",
            "geographical data, and Lodash to make data manipulation easier.",
            "",
            "You can install them like this:",
            "",
            "```{caption=\"Install dependencies\"}",
            "$ npm install --save d3 topojson lodash",
            "```",
            "",
            "Additionally, we're using Bootstrap for default styling and String for string",
            "manipulation. You should install them as well.",
            "",
            "```{caption=\"Styling and string manipulation\"}",
            "$ npm install --save bootstrap string",
            "```",
            "",
            "Now your environment is ready! You should see a default React App page in the",
            "browser without errors. Keep `npm start` running as you follow the examples in",
            "this book.",
            "",
            "Some examples are going to need other libraries. When that happens, I'll remind",
            "you to install them.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "176,113 tech salaries visualized – a dataviz dashboard",
      "lectures": [
        {
          "lectureTitle": "176,113 tech salaries visualized",
          "lectureLines": [
            "",
            "# A big example project - 176,113 tech salaries visualized {#salary-visualization}",
            "",
            "We're going to build this:",
            "",
            "![](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/full-dataviz.png)",
            "",
            "An interactive visualization dashboard app with a choropleth map and a",
            "histogram comparing tech salaries to median household income in the area. Users",
            "can filter by year, job title, or US state to get a better view.",
            "",
            "![](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/interaction-dataviz.png)",
            "",
            "It's going to be great.",
            "",
            "At this point, I assume you've used `create-react-app` to set up your",
            "environment. Check the",
            "[getting started](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888622#getting-started)",
            "section if you haven't. I'm also assuming you've read the",
            "[basics chapter](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887708#the-meat-start).",
            "I'm still going to explain what we're doing, but knowing the basics helps.",
            "",
            "I suggest you follow along, keep `npm start` running, and watch your",
            "visualization change in real time as you code. It's rewarding as hell.",
            "",
            "If you get stuck, you can use my",
            "[react-d3js-step-by-step Github repo](https://github.com/Swizec/react-d3js-step-by-step)",
            "to jump between steps. The",
            "[9 tags](https://github.com/Swizec/react-d3js-step-by-step/releases) correspond",
            "to the code at the end of each step. Download the first tag and run",
            "`npm install` to skip the initial setup.",
            "",
            "If you want to see how this project evolved over 22 months, check",
            "[the original repo](https://github.com/Swizec/h1b-software-salaries). The",
            "[modern-code](https://github.com/Swizec/h1b-software-salaries/tree/modern-code)",
            "branch has the code you're about to build.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Show a Preloader",
      "lectures": [
        {
          "lectureTitle": "Show a Preloader",
          "lectureLines": [
            "",
            "# Show a Preloader",
            "",
            "![Preloader screenshot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/preloader-screenshot.png)",
            "",
            "Our preloader is a screenshot of the final result. Usually you'd have to wait",
            "until the end of the project to make that, but I'll just give you mine.",
            "Starting with the preloader makes sense for two reasons:",
            "",
            "1. It's nicer than looking at a blank screen while data loads",
            "2. It's a good sanity check for our environment",
            "",
            "We're using a screenshot of the final result because the full dataset takes a",
            "few seconds to load, parse, and render. It looks better if visitors see",
            "something informative while they wait.",
            "",
            "React Suspense is about to make building preloaders a whole lot better.",
            "Adapting to the user's network speed, built-in preload functionality, stuff",
            "like that. More on that in the chapter on React Suspense and Time Slicing.",
            "",
            "Make sure you've installed",
            "[all dependencies](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888625#install-dependencies)",
            "and that `npm start` is running.",
            "",
            "We're building our preloader in 4 steps:",
            "",
            "1. Get the image",
            "2. Make the `Preloader` component",
            "3. Update `App`",
            "4. Load Bootstrap styles in `index.js`",
            ""
          ]
        },
        {
          "lectureTitle": "Step1: get image",
          "lectureLines": [
            "",
            "## Step 1: Get the image",
            "",
            "Download",
            "[my screenshot from Github](https://raw.githubusercontent.com/Swizec/react-d3js-step-by-step/798ec9eca54333da63b91c66b93339565d6d582a/src/assets/preloading.png)",
            "and save it in `src/assets/preloading.png`. It goes in the `src/assets/`",
            "directory because we're going to `import` it in JavaScript (which makes it part",
            "of our source code), and I like to put non-JavaScript files in `assets`. Keeps",
            "the project organized.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 2: make component",
          "lectureLines": [
            "",
            "## Step 2: Preloader component",
            "",
            "Our `Preloader` is a small component that pretends it's the `App` and renders a",
            "static title, description, and a screenshot of the end result. It goes in",
            "`src/components/Preloader.js`.",
            "",
            "We'll put all of our components in `src/components/`.",
            "",
            "We start the component off with some imports, an export, and a functional",
            "stateless component that returns an empty div element.",
            "",
            "```{.javascript caption=\"Preloader skeleton\"}",
            "// src/components/Preloader.js",
            "",
            "import React from \"react\";",
            "",
            "import PreloaderImg from \"../assets/preloading.png\";",
            "",
            "const Preloader = () => (",
            "<div className=\"App container\">",
            "",
            "</div>",
            ");",
            "",
            "export default Preloader;",
            "```",
            "",
            "We `import` React (which we need to make JSX syntax work) and the",
            "`PreloaderImg` for our image. We can import images because of the Webpack",
            "configuration that comes with `create-react-app`. The webpack image loader",
            "returns a URL that we put in the `PreloaderImg` constant.",
            "",
            "At the bottom, we `export default Preloader` so that we can use it in `App.js`",
            "as `import Preloader`. Default exports are great when your file exports a",
            "single object. Named exports when you want to export multiple items. You'll see",
            "that play out in the rest of this project.",
            "",
            "The `Preloader` function takes no props (because we don't need any) and returns",
            "an empty `div`. Let's fill it in.",
            "",
            "```{.javascript caption=\"Preloader content\"}",
            "// src/components/Preloader.js",
            "",
            "const Preloader = () => (",
            "<div className=\"App container\">",
            "    <h1>The average H1B in tech pays $86,164/year</h1>",
            "    <p className=\"lead\">",
            "        Since 2012 the US tech industry has sponsored 176,075 H1B work",
            "        visas. Most of them paid <b>$60,660 to $111,668</b> per year (1",
            "        standard deviation).{\" \"}",
            "        <span>",
            "            The best city for an H1B is <b>Kirkland, WA</b> with an average",
            "            individual salary <b>$39,465 above local household median</b>.",
            "            Median household salary is a good proxy for cost of living in an",
            "            area.",
            "        </span>",
            "    </p>",
            "    <img",
            "        src={PreloaderImg}",
            "        style={{ width: \"100%\" }}",
            "        alt=\"Loading preview\"",
            "    />",
            "    <h2 className=\"text-center\">Loading data ...</h2>",
            "</div>",
            ");",
            "```",
            "",
            "A little cheating with grabbing copy from the future, but that's okay. In real",
            "life you'd use some temporary text, then fill it in later.",
            "",
            "The code itself looks like HTML. We have the usual tags - `h1`, `p`, `b`,",
            "`img`, and `h2`. That's what I like about JSX: it's familiar. Even if you don't",
            "know React, you can guess what's going on here.",
            "",
            "But look at the `img` tag: the `src` attribute is dynamic, defined by",
            "`PreloaderImg`, and the `style` attribute takes an object, not a string. That's",
            "because JSX is more than HTML; it's JavaScript. Think of props as function",
            "arguments – any valid JavaScript fits.",
            "",
            "That will be a cornerstone of our project.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 3: Update App",
          "lectureLines": [
            "",
            "## Step 3: Update App",
            "",
            "We use our new Preloader component in App – `src/App.js`. Let's remove the",
            "`create-react-app` defaults and import our `Preloader` component.",
            "",
            "```{.javascript caption=\"Revamp App.js\"}",
            "// src/App.js",
            "",
            "import React from 'react';",
            "// Delete the line(s) between here...",
            "import logo from './logo.svg';",
            "import './App.css';",
            "// ...and here.",
            "",
            "// Insert the line(s) between here...",
            "import Preloader from './components/Preloader';",
            "// ...and here.",
            "",
            "class App extends React.Component {",
            "// Delete the line(s) between here...",
            "  render() {",
            "return (",
            "  <div className=\"App\">",
            "    <div className=\"App-header\">",
            "      <img src={logo} className=\"App-logo\" alt=\"logo\" />",
            "      <h2>Welcome to React</h2>",
            "    </div>",
            "    <p className=\"App-intro\">",
            "      To get started, edit <code>src/App.js</code> and save to reload.",
            "    </p>",
            "  </div>",
            ");",
            "  }",
            "// ...and here.",
            "}",
            "",
            "export default App;",
            "```",
            "",
            "We removed the logo and style imports, added an import for `Preloader`, and",
            "gutted the `App` class. It's great for a default app, but we don't need that",
            "anymore.",
            "",
            "Let's define a default `state` and a `render` method that uses our `Preloader`",
            "component when there's no data.",
            "",
            "```{.javascript caption=\"Render our preloader\"}",
            "// src/App.js",
            "",
            "class App extends React.Component {",
            "// Insert the line(s) between here...",
            "state = {",
            "    techSalaries: []",
            "}",
            "",
            "render() {",
            "    const { techSalaries } = this.state;",
            "",
            "    if (techSalaries.length < 1) {",
            "        return (",
            "            <Preloader />",
            "        );",
            "    }",
            "",
            "    return (",
            "        <div className=\"App\">",
            "",
            "        </div>",
            "    );",
            "}",
            "// ...and here.",
            "}",
            "```",
            "",
            "Nowadays we can define properties directly in the class body without a",
            "constructor method. It's not part of the official JavaScript standard yet, but",
            "most React codebases use this pattern.",
            "",
            "Properties defined this way are bound to each instance of our components so",
            "they have the correct `this` value. Late you'll see we can use this shorthand",
            "to neatly define event handlers.",
            "",
            "We set `techSalaries` to an empty array by default. In `render` we use object",
            "destructuring to take `techSalaries` out of component state, `this.state`, and",
            "check whether it's empty. When `techSalaries` is empty our component renders",
            "the preloader, otherwise an empty div.",
            "",
            "If your `npm start` is running, the preloader should show up on your screen.",
            "",
            "![Preloader without Bootstrap styles](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/preloader-without-styles-screenshot.png)",
            "",
            "Hmm… that's not very pretty. Let's fix it.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 4: Load styles",
          "lectureLines": [
            "",
            "## Step 4: Load Bootstrap styles",
            "",
            "We're going to use Bootstrap styles to avoid reinventing the wheel. We're",
            "ignoring their JavaScript widgets and the amazing integration built by the",
            "[react-bootstrap](https://react-bootstrap.github.io/) team. Just the",
            "stylesheets please.",
            "",
            "They'll make our fonts look better, help with layouting, and make buttons look",
            "like buttons. We _could_ use styled components, but writing our own styles",
            "detracts from this tutorial.",
            "",
            "We load stylesheets in `src/index.js`.",
            "",
            "```{.javascript caption=\"Add Bootstrap in index.js\"}",
            "// src/index.js",
            "",
            "import React from 'react';",
            "import ReactDOM from 'react-dom';",
            "import App from './App';",
            "// Insert the line(s) between here...",
            "import 'bootstrap/dist/css/bootstrap.css';",
            "// ...and here.",
            "",
            "ReactDOM.render(",
            "  <App />,",
            "  document.getElementById('root')",
            ");",
            "```",
            "",
            "Another benefit of Webpack: `import`-ing stylesheets. These imports turn into",
            "`<style>` tags with CSS in their body at runtime.",
            "",
            "This is also a good opportunity to see how `index.js` works to render our app",
            ":point_down:",
            "",
            "1. loads `App` and React",
            "2. loads styles",
            "3. Uses `ReactDOM` to render `<App />` into the DOM",
            "",
            "That's it.",
            "",
            "Your preloader screen should look better now.",
            "",
            "![Preloader screenshot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/preloader-screenshot.png)",
            "",
            "If you don't, try comparing your changes to this",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/798ec9eca54333da63b91c66b93339565d6d582a).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Load and parse your data",
      "lectures": [
        {
          "lectureTitle": "Asynchronously load data",
          "lectureLines": [
            "",
            "# Asynchronously load data",
            "",
            "Great! We have a preloader. Time to load some data.",
            "",
            "We'll use D3's built-in data loading methods and tie their promises into",
            "React's component lifecycle. You could talk to a REST API in the same way.",
            "Neither D3 nor React care what the datasource is.",
            "",
            "First, you need some data.",
            "",
            "Our dataset comes from a few sources. Tech salaries are from",
            "[h1bdata.info](https://h1bdata.info), median household incomes come from the US",
            "census data, and I got US geo map info from Mike Bostock's github repositories.",
            "Some elbow grease and python scripts tied them all together.",
            "",
            "You can read about the scraping on my blog",
            "[here](https://swizec.com/blog/place-names-county-names-geonames/swizec/7083),",
            "[here](https://swizec.com/blog/facts-us-household-income/swizec/7075), and",
            "[here](https://swizec.com/blog/livecoding-24-choropleth-react-js/swizec/7078).",
            "But it's not the subject of this book.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 0: Get data",
          "lectureLines": [
            "",
            "## Step 0: Get the data",
            "",
            "Download the 6 data files from",
            "[my step-by-step repository on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/8819d9c38b4aef0a0c569e493f088ff9c3bfdf33).",
            "Put them in your `public/data` directory.",
            "",
            "The quickest way to download each file is to click `View`, then right-click",
            "`Raw` and `Save Link As`.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 1: Prep App.js",
          "lectureLines": [
            "",
            "## Step 1: Prep App.js",
            "",
            "Let's set up our `App` component first. That way you'll see results as soon",
            "data loading starts to work.",
            "",
            "Start by importing our data loading method - `loadAllData` - and both D3 and",
            "Lodash. We'll need them later.",
            "",
            "```{.javascript caption=\"Import D3\"}",
            "// src/App.js",
            "import React from 'react';",
            "// Insert the line(s) between here...",
            "import * as d3 from 'd3';",
            "import _ from 'lodash';",
            "// ...and here.",
            "",
            "import Preloader from './components/Preloader';",
            "// Insert the line(s) between here...",
            "import { loadAllData } from './DataHandling';",
            "// ...and here.",
            "```",
            "",
            "You already know about default imports. Importing with `{}` is how we import",
            "named exports. That lets us get multiple things from the same file. You'll see",
            "the export side in Step 2.",
            "",
            "Don't worry about the missing `DataHandling` file. It's coming soon.",
            "",
            "```{.javascript caption=\"Initiate data loading in App.js\"}",
            "// src/App.js",
            "class App extends React.Component {",
            "state = {",
            "    techSalaries: [],",
            "    // Insert the line(s) between here...",
            "    medianIncomes: [],",
            "    countyNames: [],",
            "};",
            "",
            "componentDidMount() {",
            "    loadAllData(data => this.setState(data));",
            "}",
            "// ...and here.",
            "```",
            "",
            "We initiate data loading inside the `componentDidMount` lifecycle hook. It",
            "fires when React first mounts our component into the DOM.",
            "",
            "I like to tie data loading to component mounts because it means you aren't",
            "making requests you'll never use. In a bigger app, you'd use Redux, MobX, or",
            "similar to decouple loading from rendering. Many reasons why.",
            "",
            "To load our data, we call the `loadAllData` function, then use `this.setState`",
            "in the callback. This updates `App`'s state and triggers a re-render, which",
            "updates our entire visualization via props.",
            "",
            "Yes, it _would_ be better to make `loadAllData` return a promise instead of",
            "expecting a callback. That was giving me trouble for some reason and it doesn't",
            "matter right now anyway.",
            "",
            "We also add two more entries to our `state`: `countyNames`, and",
            "`medianIncomes`. Defining what's in your component state in advance makes your",
            "code easier to read. People, including you, know what to expect.",
            "",
            "Let's change the `render` method to show a message when our data finishes",
            "loading.",
            "",
            "```{.javascript caption=\"Show when data loads\"}",
            "// src/App.js",
            "  render() {",
            " const { techSalaries } = this.state;",
            "",
            " if (techSalaries.length < 1) {",
            "     return (",
            "         <Preloader />",
            "     );",
            "  }",
            "",
            "return (",
            "    // Delete the line(s) between here...",
            "    <div className=\"App\">",
            "    // ...and here.",
            "    // Insert the line(s) between here...",
            "    <div className=\"App container\">",
            "        <h1>Loaded {techSalaries.length} salaries</h1>",
            "    // ...and here.",
            "    </div>",
            ");",
            "}",
            "```",
            "",
            "We added a `container` class to the main `<div>` and an `<h1>` tag that shows",
            "how many datapoints there are. You can use any valid JavaScript in curly braces",
            "`{}` and JSX will evaluate it. By convention we only use that ability to",
            "calculate display values.",
            "",
            "You should now get an error overlay.",
            "",
            "![DataHandling.js not found error overlay](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/datahandling-error.png)",
            "",
            "These nice error overlays come with `create-react-app` and make your code",
            "easier to debug. No hunting around in the terminal to see compilation errors.",
            "",
            "Let's build that file and fill it with our data loading logic.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 2: Prep data parsing functions",
          "lectureLines": [
            "",
            "## Step 2: Prep data parsing functions",
            "",
            "We're putting data loading logic in a separate file from `App.js` because it's",
            "a bunch of functions that work together and don't have much to do with the",
            "`App` component itself.",
            "",
            "We start with two imports and four data parsing functions:",
            "",
            "- `cleanIncome`, which parses each row of household income data",
            "- `dateParse`, which we use for parsing dates",
            "- `cleanSalary`, which parses each row of salary data",
            "- `cleanUSStateName`, which parses US state names",
            "",
            "```{.javascript caption=\"Data parsing functions\"}",
            "// src/DataHandling.js",
            "import * as d3 from 'd3';",
            "import _ from 'lodash';",
            "",
            "const cleanIncome = (d) => ({",
            "countyName: d['Name'],",
            "USstate: d['State'],",
            "medianIncome: Number(d['Median Household Income']),",
            "lowerBound: Number(d['90% CI Lower Bound']),",
            "upperBound: Number(d['90% CI Upper Bound'])",
            "});",
            "",
            "const dateParse = d3.timeParse(\"%m/%d/%Y\");",
            "",
            "const cleanSalary = (d) => {",
            "if (!d['base salary'] || Number(d['base salary']) > 300000) {",
            "    return null;",
            "}",
            "",
            "return {employer: d.employer,",
            "        submit_date: dateParse(d['submit date']),",
            "        start_date: dateParse(d['start date']),",
            "        case_status: d['case status'],",
            "        job_title: d['job title'],",
            "        clean_job_title: d['job title'],",
            "        base_salary: Number(d['base salary']),",
            "        city: d['city'],",
            "        USstate: d['state'],",
            "        county: d['county'],",
            "        countyID: d['countyID']",
            "};",
            "}",
            "",
            "const cleanUSStateName = (d) => ({",
            "code: d.code,",
            "id: Number(d.id),",
            "name: d.name",
            "});",
            "",
            "const cleanCounty = d => ({",
            "id: Number(d.id),",
            "name: name",
            "});",
            "",
            "```",
            "",
            "You'll see those `d3` and `lodash` imports a lot.",
            "",
            "Our data parsing functions all follow the same approach: Take a row of data as",
            "`d`, return a dictionary with nicer key names, cast any numbers or dates into",
            "appropriate formats. They all start as strings.",
            "",
            "Doing all this parsing now, keeps the rest of our codebase clean. Handling data",
            "is always messy. You want to contain that mess as much as possible.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 3: Load the datasets",
          "lectureLines": [
            "",
            "## Step 3: Load the datasets",
            "",
            "Now we can use D3 to load our data with fetch requests.",
            "",
            "```{.javascript caption=\"Data loading\"}",
            "// src/DataHandling.js",
            "export const loadAllData = (callback = _.noop) => {",
            "Promise.all([",
            "    d3.json(\"data/us.json\"),",
            "    d3.csv(\"data/us-county-names-normalized.csv\", cleanCounty),",
            "    d3.csv(\"data/county-median-incomes.csv\", cleanIncome),",
            "    d3.csv(\"data/h1bs-2012-2016-shortened.csv\", cleanSalary),",
            "    d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)",
            "]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {",
            "",
            "});",
            "};",
            "",
            "```",
            "",
            "Here you can see another ES6 trick: default argument values. If `callback` is",
            "undefined, we set it to `_.noop` - a function that does nothing. This lets us",
            "later call `callback()` without worrying whether it's defined.",
            "",
            "In version 5, D3 updated its data loading methods to use promises instead of",
            "callbacks. You can load a single file using",
            "`d3.csv(\"filename\").then(data => ....`. The promise resolves with your data, or",
            "throws an error.",
            "",
            "If you're on D3v4 and can't upgrade, you'll have to import from `d3-fetch`.",
            "",
            "Each `d3.csv` call makes a fetch request, parses the fetched CSV file into an",
            "array of JavaScript dictionaries, and passes each row through the provided",
            "cleanup function. We pass all median incomes through `cleanIncome`, salaries",
            "through `cleanSalary`, etc.",
            "",
            "To load multiple files, we use `Promise.all` with a list of unresolved",
            "promises. Once resolved, our `.then` handler gets a list of results. We use",
            "array destructuring to expand that list into our respective datasets before",
            "running some more logic to tie them together.",
            "",
            "D3 supports formats like `json`, `csv`, `tsv`, `text`, and `xml` out of the",
            "box. You can make it work with custom data sources through the underlying",
            "`request` API.",
            "",
            "PS: we're using the shortened salary dataset to make page reloads faster while",
            "building our project.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 4: Tie datasets together",
          "lectureLines": [
            "",
            "## Step 4: Tie the datasets together {#tie-datasets-together}",
            "",
            "If you add a `console.log` to the `.then` callback above, you'll see a bunch of",
            "data. Each argument - `us`, `countyNames`, `medianIncomes`, `techSalaries`,",
            "`USstateNames` - holds a parsed dataset from the corresponding file.",
            "",
            "To tie them together and prepare a dictionary for `setState` back in the `App`",
            "component, we need to add some logic. We're building a dictionary of county",
            "household incomes and removing any empty salaries.",
            "",
            "```{.javascript caption=\"Tie our datasets together\"}",
            "// src/DataHandling.js",
            "]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {",
            "let medianIncomesMap = {};",
            "",
            "medianIncomes.filter(d => _.find(countyNames,",
            "                                 {name: d['countyName']}))",
            "             .forEach((d) => {",
            "                 d['countyID'] = _.find(countyNames,",
            "                                        {name: d['countyName']}).id;",
            "                 medianIncomesMap[d.countyID] = d;",
            "             });",
            "",
            "techSalaries = techSalaries.filter(d => !_.isNull(d));",
            "",
            "callback({",
            "    usTopoJson: us,",
            "    countyNames: countyNames,",
            "    medianIncomes: medianIncomesMap,",
            "    medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),",
            "    medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),",
            "    techSalaries: techSalaries,",
            "    USstateNames: USstateNames",
            "});",
            "});",
            "",
            "```",
            "",
            "Building the income map looks weird because of indentation, but it's not that",
            "bad. We `filter` the `medianIncomes` array to discard any incomes whose",
            "`countyName` we can't find. I made sure they were all unique when I built the",
            "datasets.",
            "",
            "We walk through the filtered array with a `forEach`, find the correct",
            "`countyID`, and add each entry to `medianIncomesMap`. When we're done, we have",
            "a large dictionary that maps county ids to their household income data.",
            "",
            "Then we filter `techSalaries` to remove any empty values where the",
            "`cleanSalaries` function returned `null`. That happens when a salary is either",
            "undefined or absurdly high.",
            "",
            "When our data is ready, we call our `callback` with a dictionary of the new",
            "datasets. To make future access quicker, we use `_.groupBy` to build dictionary",
            "maps of counties by county name and by US state.",
            "",
            "You should now see how many salary entries the shortened dataset contains.",
            "",
            "![Data loaded screenshot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/data-loaded-screenshot.png)",
            "",
            "If that didn't work, try comparing your changes to this",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/9f113cdd3bc18535680cb5a4e87a3fd45743c9ae).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Render a choropleth map of the US",
      "lectures": [
        {
          "lectureTitle": "Render a choropleth map of the US",
          "lectureLines": [
            "",
            "# Render a choropleth map of the US {#choropleth-map}",
            "",
            "With our data in hand, it's time to draw some pictures. A choropleth map will",
            "show us the best places to be in tech.",
            "",
            "We're showing the delta between median household salary in a statistical county",
            "and the average salary of an individual tech worker on a visa. The darker the",
            "blue, the higher the difference.",
            "",
            "The more a single salary can out-earn an entire household, the better off you",
            "are.",
            "",
            "![Choropleth map with shortened dataset](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/choropleth-map-shortened-dataset.png)",
            "",
            "There's a lot of gray on this map because the shortened dataset doesn't have",
            "that many counties. Full dataset is going to look better, I promise.",
            "",
            "Turns out immigration visa opportunities for techies aren't evenly distributed",
            "throughout the country. Who knew?",
            "",
            "Just like before, we're going to start with changes in our `App` component,",
            "then build the new bit. This time, a `CountyMap` component spread over three",
            "files:",
            "",
            "- `CountyMap/index.js`, to make imports easier",
            "- `CountyMap/CountyMap.js`, for overall map logic",
            "- `CountyMap/County.js`, for individual county polygons",
            ""
          ]
        },
        {
          "lectureTitle": "Step 1: Prep App.js",
          "lectureLines": [
            "",
            "## Step 1: Prep App.js",
            "",
            "You might guess the pattern already: add an import, add a helper method or two,",
            "update `render`.",
            "",
            "```{.javascript caption=\"Import CountyMap component\"}",
            "// src/App.js",
            "import Preloader from './components/Preloader';",
            "import { loadAllData } from './DataHandling';",
            "",
            "// Insert the line(s) between here...",
            "import CountyMap from './components/CountyMap';",
            "// ...and here.",
            "",
            "```",
            "",
            "That imports the `CountyMap` component from `components/CountyMap/`. Your",
            "browser will show an error overlay about some file or another until we're done.",
            "",
            "In the `App` class itself, we add a `countyValue` method. It takes a county",
            "entry and a map of tech salaries, and it returns the delta between median",
            "household income and a single tech salary.",
            "",
            "```{.javascript caption=\"App.countyValue method\"}",
            "// src/App.js",
            "countyValue(county, techSalariesMap) {",
            "    const medianHousehold = this.state.medianIncomes[county.id],",
            "          salaries = techSalariesMap[county.name];",
            "",
            "    if (!medianHousehold || !salaries) {",
            "        return null;",
            "    }",
            "",
            "    const median = d3.median(salaries, d => d.base_salary);",
            "",
            "    return {",
            "        countyID: county.id,",
            "        value: median - medianHousehold.medianIncome",
            "    };",
            "}",
            "```",
            "",
            "We use `this.state.medianIncomes` to get the median household salary and the",
            "`techSalariesMap` input to get salaries for a specific census area. Then we use",
            "`d3.median` to calculate the median value for salaries and return a two-element",
            "dictionary with the result.",
            "",
            "`countyID` specifies the county and `value` is the delta that our choropleth",
            "displays.",
            "",
            "In the `render` method, we'll:",
            "",
            "- prep a list of county values",
            "- remove the \"data loaded\" indicator",
            "- render the map",
            "",
            "```{.javascript caption=\"Render the CountyMap component\"}",
            "// src/App.js",
            "render() {",
            "// Insert the line(s) between here...",
            "const { countyNames, usTopoJson, techSalaries, } = this.state;",
            "// ...and here.",
            "",
            "if (techSalaries.length < 1) {",
            "    return (",
            "        <Preloader />",
            "    );",
            "}",
            "",
            "// Insert the line(s) between here...",
            "const filteredSalaries = techSalaries,",
            "      filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID'),",
            "      countyValues = countyNames.map(",
            "          county => this.countyValue(county, filteredSalariesMap)",
            "      ).filter(d => !_.isNull(d));",
            "",
            "let zoom = null;",
            "// ...and here.",
            "",
            "return (",
            "  <div className=\"App container\">",
            "    // Delete the line(s) between here...",
            "    <h1>Loaded {techSalaries.length} salaries</h1>",
            "    // ...and here.",
            "    // Insert the line(s) between here...",
            "    <svg width=\"1100\" height=\"500\">",
            "        <CountyMap usTopoJson={usTopoJson}",
            "                   USstateNames={USstateNames}",
            "                   values={countyValues}",
            "                   x={0}",
            "                   y={0}",
            "                   width={500}",
            "                   height={500}",
            "                   zoom={zoom} />",
            "    </svg>",
            "    // ...and here.",
            "  </div>",
            ");",
            "}",
            "```",
            "",
            "We call our dataset `filteredTechSalaries` because we're going to add filtering",
            "in the",
            "[subchapter about adding user controls](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888938#user-controls).",
            "Using the proper name now means less code to change later. The magic of",
            "foresight :smile:",
            "",
            "We use `_.groupBy` to build a dictionary mapping each `countyID` to an array of",
            "salaries, and we use our `countyValue` method to build an array of counties for",
            "our map.",
            "",
            "We set `zoom` to `null` for now. We'll use this later.",
            "",
            "In the `return` statement, we remove our \"data loaded\" indicator, and add an",
            "`<svg>` element that's `1100` pixels wide and `500` pixels high. Inside, we",
            "place the `CountyMap` component with a bunch of properties. Some dataset stuff,",
            "some sizing and positioning stuff.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 2: CountyMap index.js",
          "lectureLines": [
            "",
            "## Step 2: CountyMap/index.js",
            "",
            "We make `index.js` for just reason: to make imports and debugging easier. I",
            "learned this lesson the hard way so you don't have to.",
            "",
            "```{.javascript caption=\"CountyMap index.js\"}",
            "// src/components/CountyMap/index.js",
            "",
            "export { default } from './CountyMap';",
            "",
            "```",
            "",
            "Re-export the default import from `./CountyMap.js`. That's it.",
            "",
            "This allows us to import `CountyMap` from the directory without knowing about",
            "internal file structure. We _could_ put all the code in this `index.js` file,",
            "but that makes debugging harder. You'll have plenty of index.js files in your",
            "project.",
            "",
            "Having a lot of code in `<directory>/index.js` is a common pattern in new",
            "projects. But when you're looking at a stack trace, source files in the",
            "browser, or filenames in your editor, you'll wish every component lived in a",
            "file of the same name.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 3: CountyMap CountyMap.js",
          "lectureLines": [
            "",
            "## Step 3: CountyMap/CountyMap.js",
            "",
            "Here comes the fun part - declaratively drawing a map. You'll see why I love",
            "using React for dataviz.",
            "",
            "We're using the",
            "[full-feature integration](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887740#full-feature-integration)",
            "approach and a lot of D3 maps magic. Drawing a map with D3 I'm always surprised",
            "how little code it takes.",
            "",
            "Start with the imports: React, D3, lodash, topojson, County component.",
            "",
            "```{.javascript caption=\"Import CountyMap dependencies\"}",
            "// src/components/CountyMap/CountyMap.js",
            "import React, { Component } from 'react';",
            "import * as d3 from 'd3';",
            "import * as topojson from 'topojson';",
            "import _ from 'lodash';",
            "",
            "import County from './County';",
            "",
            "```",
            "",
            "Out of these, we haven't built `County` yet, and you haven't seen `topojson`",
            "before.",
            "",
            "TopoJSON is a geographical data format based on JSON. We're using the",
            "`topojson` library to translate our geographical datasets into GeoJSON, which",
            "is another way of defining geo data with JSON.",
            "",
            "I don't know why there are two, but TopoJSON produces smaller files, and",
            "GeoJSON can be fed directly into D3's geo functions. ¯\\\\_(ツ)_/¯",
            "",
            "Maybe it's a case of [competing standards](https://xkcd.com/927/).",
            "",
            "### Constructor",
            "",
            "We stub out the `CountyMap` component then fill it in with logic.",
            "",
            "```{.javascript caption=\"CountyMap stub\"}",
            "// src/components/CountyMap/CountyMap.js",
            "class CountyMap extends Component {",
            "constructor(props) {",
            "    super(props);",
            "",
            "    this.state = {",
            "    }",
            "}",
            "",
            "static getDerivedStateFromProps(props, state) {",
            "",
            "}",
            "",
            "render() {",
            "    const { usTopoJson } = this.props;",
            "",
            "    if (!usTopoJson) {",
            "        return null;",
            "    }else{",
            "        return (",
            "",
            "        );",
            "    }",
            "}",
            "}",
            "",
            "export default CountyMap;",
            "```",
            "",
            "We'll set up default D3 state in `constructor` and keep it up to date with",
            "`getDerivedStateFromProps`.",
            "",
            "We need three D3 objects to build a choropleth map: a geographical projection,",
            "a path generator, and a quantize scale for colors.",
            "",
            "```{.javascript caption=\"D3 objects for a map\"}",
            "// src/components/CountyMap/CountyMap.js",
            "class CountyMap extends React.Component {",
            "constructor(props) {",
            "    super(props);",
            "",
            "    const projection = d3.geoAlbersUsa().scale(1280);",
            "",
            "    this.state = {",
            "        geoPath: d3.geoPath().projection(projection),",
            "        quantize: d3.scaleQuantize().range(d3.range(9)),",
            "        projection",
            "    };",
            "}",
            "```",
            "",
            "You might remember geographical projections from high school. They map a sphere",
            "to a flat surface. We use `geoAlbersUsa` because it's made specifically for",
            "maps of the USA.",
            "",
            "D3 offers many other projections. You can see them on",
            "[d3-geo's Github page](https://github.com/d3/d3-geo#projections).",
            "",
            "A `geoPath` generator takes a projection and returns a function that generates",
            "the `d` attribute of `<path>` elements. This is the most general way to specify",
            "SVG shapes. I won't go into explaining the `d` here, but it's",
            "[an entire language](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d)",
            "for describing shapes.",
            "",
            "`quantize` is a D3 scale. We've talked about the basics of scales in the",
            "[D3 Axis example](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887732#blackbox-axis).",
            "This one splits a domain into 9 quantiles and assigns them specific values from",
            "the `range`.",
            "",
            "Let's say our domain goes from 0 to 90. Calling the scale with any number",
            "between 0 and 9 would return 1. 10 to 19 returns 2 and so on. We'll use it to",
            "pick colors from an array.",
            "",
            "### getDerivedStateFromProps",
            "",
            "Keeping our geo path and quantize scale up to date is simple, but we'll make it",
            "harder by adding a zoom feature. It won't work until we build the filtering,",
            "but hey, we'll already have it by then! :smile:",
            "",
            "```{.javascript caption=\"CountyMap getDerivedStateFromProps\"}",
            "// src/components/CountyMap/CountyMap.js",
            "static getDerivedStateFromProps(props, state) {",
            "    let { projection, quantize, geoPath } = state;",
            "",
            "    projection",
            "        .translate([props.width / 2, props.height / 2])",
            "        .scale(props.width * 1.3);",
            "",
            "    if (props.zoom && props.usTopoJson) {",
            "        const us = props.usTopoJson,",
            "            USstatePaths = topojson.feature(us, us.objects.states).features,",
            "            id = _.find(props.USstateNames, { code: props.zoom }).id;",
            "",
            "        projection.scale(props.width * 4.5);",
            "",
            "        const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),",
            "            translate = projection.translate();",
            "",
            "        projection.translate([",
            "            translate[0] - centroid[0] + props.width / 2,",
            "            translate[1] - centroid[1] + props.height / 2",
            "        ]);",
            "    }",
            "",
            "    if (props.values) {",
            "        quantize.domain([",
            "            d3.quantile(props.values, 0.15, d => d.value),",
            "            d3.quantile(props.values, 0.85, d => d.value)",
            "        ]);",
            "    }",
            "",
            "    return {",
            "        ...state,",
            "        projection,",
            "        quantize",
            "    };",
            "}",
            "```",
            "",
            "There's a lot going on here.",
            "",
            "We destructure `projection`, `quantize`, and `geoPath` out of component state.",
            "These are the D3 object we're about to update.",
            "",
            "First up is the projection. We translate (move) it to the center of our drawing",
            "area and set the scale property. You have to play around with this value until",
            "you get a nice result because it's different for every projection.",
            "",
            "Then we do some weird stuff if `zoom` is defined.",
            "",
            "We get the list of all US state features in our geo data, find the one we're",
            "`zoom`-ing on, and use the `geoPath.centroid` method to calculate its center",
            "point. This gives us a new coordinate to `translate` our projection onto.",
            "",
            "The calculation in `.translate()` helps us align the center point of our `zoom`",
            "US state with the center of the drawing area.",
            "",
            "While all of this is going on, we also tweak the `.scale` property to make the",
            "map bigger. This creates a zooming effect.",
            "",
            "After all that, we update the quantize scale's domain with new values. Using",
            "`d3.quantile` lets us offset the scale to produce a more interesting map.",
            "Again, I discovered these values through experiment - they cut off the top and",
            "bottom of the range because there isn't much there. This brings higher contrast",
            "to the richer middle of the range.",
            "",
            "With our D3 objects updated, we return a new derived state. _Technically_ you",
            "don't have to do this but you should. Due to how JavaScript works, you already",
            "updated D3 objects in place, but you should pretend `this.state` is immutable",
            "and return a new copy.",
            "",
            "Overall that makes your code easier to understand and closer to React",
            "principles.",
            "",
            "### render",
            "",
            "After all that hard work, the `render` method is a breeze. We prep our data",
            "then loop through it and render a `County` element for each entry.",
            "",
            "```{.javascript caption=\"CountyMap render\"}",
            "render() {",
            "    const { geoPath, quantize } = this.state,",
            "        { usTopoJson, values, zoom } = this.props;",
            "",
            "    if (!usTopoJson) {",
            "        return null;",
            "    } else {",
            "        const us = usTopoJson,",
            "            USstatesMesh = topojson.mesh(",
            "                us,",
            "                us.objects.states,",
            "                (a, b) => a !== b",
            "            ),",
            "            counties = topojson.feature(us, us.objects.counties).features;",
            "",
            "        const countyValueMap = _.fromPairs(",
            "            values.map(d => [d.countyID, d.value])",
            "        );",
            "",
            "        return (",
            "            <g>",
            "                {counties.map(feature => (",
            "                    <County",
            "                        geoPath={geoPath}",
            "                        feature={feature}",
            "                        zoom={zoom}",
            "                        key={feature.id}",
            "                        quantize={quantize}",
            "                        value={countyValueMap[feature.id]}",
            "                    />",
            "                ))}",
            "",
            "                <path",
            "                    d={geoPath(USstatesMesh)}",
            "                    style={{",
            "                        fill: \"none\",",
            "                        stroke: \"#fff\",",
            "                        strokeLinejoin: \"round\"",
            "                    }}",
            "                />",
            "            </g>",
            "        );",
            "    }",
            "}",
            "```",
            "",
            "We use destructuring to save all relevant props and state in constants, then",
            "use the TopoJSON library to grab data out of the `usTopoJson` dataset.",
            "",
            "`.mesh` calculates a mesh for US states – a thin line around the edges.",
            "`.feature` calculates feature for each count – fill in with color.",
            "",
            "Mesh and feature aren't tied to US states or counties by the way. It's just a",
            "matter of what you get back: borders or flat areas. What you need depends on",
            "what you're building.",
            "",
            "We use Lodash's `_.fromPairs` to build a dictionary that maps county",
            "identifiers to their values. Building it beforehand makes our code faster. You",
            "can read some details about the speed optimizations",
            "[here](https://swizec.com/blog/optimizing-react-choropleth-map-rendering/swizec/7302).",
            "",
            "As promised, the `return` statement loops through the list of `counties` and",
            "renders `County` components. Each gets a bunch of attributes and returns a",
            "`<path>` element that looks like a specific county.",
            "",
            "For US state borders, we render a single `<path>` element and use `geoPath` to",
            "generate the `d` attribute.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 4: CountyMap County.js",
          "lectureLines": [
            "",
            "## Step 4: CountyMap/County.js",
            "",
            "The `County` component is built from two parts: imports and color constants,",
            "and a component that returns a `<path>`. All the hard calculation happens in",
            "`CountyMap`.",
            "",
            "```{.javascript caption=\"Imports and color constants\"}",
            "// src/components/CountyMap/County.js",
            "import React, { Component } from 'react';",
            "import _ from 'lodash';",
            "",
            "const ChoroplethColors = _.reverse([",
            "'rgb(247,251,255)',",
            "'rgb(222,235,247)',",
            "'rgb(198,219,239)',",
            "'rgb(158,202,225)',",
            "'rgb(107,174,214)',",
            "'rgb(66,146,198)',",
            "'rgb(33,113,181)',",
            "'rgb(8,81,156)',",
            "'rgb(8,48,107)'",
            "]);",
            "",
            "const BlankColor = 'rgb(240,240,240)'",
            "",
            "```",
            "",
            "We import React and Lodash, and define some color constants. I got the",
            "`ChoroplethColors` from some example online, and `BlankColor` is a pleasant",
            "gray.",
            "",
            "Now we need the `County` component.",
            "",
            "```{.javascript caption=\"County component\"}",
            "// src/components/CountyMap/County.js",
            "class County extends Component {",
            "shouldComponentUpdate(nextProps, nextState) {",
            "    const { zoom, value } = this.props;",
            "",
            "    return zoom !== nextProps.zoom",
            "        || value !== nextProps.value;",
            "}",
            "",
            "render() {",
            "    const { value, geoPath, feature, quantize } = this.props;",
            "",
            "    let color = BlankColor;",
            "",
            "    if (value) {",
            "        color = ChoroplethColors[quantize(value)];",
            "    }",
            "",
            "    return (",
            "        <path d={geoPath(feature)}",
            "              style={{fill: color}}",
            "              title={feature.id} />",
            "    );",
            "}",
            "}",
            "",
            "export default County;",
            "```",
            "",
            "The `render` method uses a `quantize` scale to pick the right color and returns",
            "a `<path>` element. `geoPath` generates the `d` attribute, we set style to",
            "`fill` the color, and we give our path a `title`.",
            "",
            "`shouldComponentUpdate` is more interesting. It's a React lifecycle method that",
            "lets you specify which prop changes are relevant to component re-rendering.",
            "",
            "`CountyMap` passes complex props - `quantize`, `geoPath`, and `feature`.",
            "They're pass-by-reference instead of pass-by-value. That means React can't see",
            "when their output changes unless you make completely new copies.",
            "",
            "This can lead to all 3,220 counties re-rendering every time a user does",
            "anything. But they only have to re-render if we change the map zoom or if the",
            "county gets a new value.",
            "",
            "Using `shouldComponentUpdate` like this we can go from 3,220 DOM updates to a",
            "few hundred. Big speed improvement",
            ""
          ]
        },
        {
          "lectureTitle": "A map appears :world_map:",
          "lectureLines": [
            "",
            "Your browser should now show a map.",
            "",
            "![Choropleth map with shortened dataset](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/choropleth-map-shortened-dataset.png)",
            "",
            "Tech work visas just aren't that evenly distributed. Even with the full dataset",
            "most counties are gray.",
            "",
            "If that didn't work, consult",
            "[this diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/f4c1535e9c9ca4982c8f3c74cff9f739eb08c0f7).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Render a Histogram of salaries",
      "lectures": [
        {
          "lectureTitle": "Render a Histogram of salaries",
          "lectureLines": [
            "",
            "# Render a Histogram of salaries {#histogram-of-salaries}",
            "",
            "Knowing median salaries is great and all, but it doesn't tell you much about",
            "what you can expect. You need to know the distribution to see if it's more",
            "likely you'll get 140k or 70k.",
            "",
            "That's what histograms are for. Give them a bunch of data, and they show its",
            "distribution. We're going to build one like this:",
            "",
            "![Basic histogram](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/basic-histogram.png)",
            "",
            "In the shortened dataset, 35% of tech salaries fall between $60k and $80k, 26%",
            "between $80k and $100k etc. Throwing a weighed dice with this",
            "[random distribution](https://en.wikipedia.org/wiki/Probability_distribution),",
            "you're far more likely to get 60k-80k than 120k-140k. It's a great way to gauge",
            "situations.",
            "",
            "It's where statistics like \"More people die from vending machines than shark",
            "attacks\" come from. Which are you afraid of, vending machines or sharks? Stats",
            "say your answer should be",
            "[heart disease](https://www.cdc.gov/nchs/fastats/deaths.htm). :wink:",
            "",
            "We'll start our histogram with some changes in `App.js`, make a `Histogram`",
            "component using the",
            "[full-feature approach](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887740#full-feature-integration),",
            "add an `Axis` using the",
            "[blackbox HOC approach](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887729#blackbox-hoc),",
            "and finally add some styling.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 1: Prep App.js",
          "lectureLines": [
            "",
            "## Step 1: Prep App.js",
            "",
            "You know the drill, don't you? Import some stuff, add it to the `render()`",
            "method in the `App` component.",
            "",
            "```{.javascript caption=\"Histogram imports\"}",
            "// src/App.js",
            "import _ from 'lodash';",
            "",
            "// Insert the line(s) between here...",
            "import './style.css';",
            "// ...and here.",
            "",
            "import Preloader from './components/Preloader';",
            "import { loadAllData } from './DataHandling';",
            "",
            "import CountyMap from './components/CountyMap';",
            "// Insert the line(s) between here...",
            "import Histogram from './components/Histogram';",
            "// ...and here.",
            "```",
            "",
            "We import `style.css` and the `Histogram` component. That's what I love about",
            "Webpack - you can import CSS in JavaScript. We got the setup with",
            "`create-react-app`.",
            "",
            "There are competing schools of thought about styling React apps. Some say each",
            "component should come with its own CSS files, some think it should be in large",
            "per-app CSS files, many think CSS-in-JS is the way to go.",
            "",
            "Personally I like to use CSS for general cross-component styling and",
            "styled-components for more specific styles. We're using CSS in this project",
            "because it works and means we don't have to learn yet another dependency.",
            "",
            "After the imports, we can render our `Histogram` in the `App` component.",
            "",
            "```{.javascript caption=\"Render Histogram in App\"}",
            "// src/App.js",
            "// ...",
            "render() {",
            "// ...",
            "return (",
            "    <div className=\"App container\">",
            "        <h1>Loaded {this.state.techSalaries.length} salaries</h1>",
            "        <svg width=\"1100\" height=\"500\">",
            "            <CountyMap usTopoJson={this.state.usTopoJson}",
            "                       USstateNames={this.state.USstateNames}",
            "                       values={countyValues}",
            "                       x={0}",
            "                       y={0}",
            "                       width={500}",
            "                       height={500}",
            "                       zoom={zoom} />",
            "            // Insert the line(s) between here...",
            "            <Histogram bins={10}",
            "                       width={500}",
            "                       height={500}",
            "                       x=\"500\"",
            "                       y=\"10\"",
            "                       data={filteredSalaries}",
            "                       axisMargin={83}",
            "                       bottomMargin={5}",
            "                       value={d => d.base_salary} />",
            "            // ...and here.",
            "        </svg>",
            "    </div>",
            ");",
            "}",
            "```",
            "",
            "We render the `Histogram` component with a bunch of props. They specify the",
            "dimensions we want, positioning, and pass data to the component. We're using",
            "`filteredSalaries` even though we haven't set up any filtering yet. One less",
            "line of code to change later :ok_hand:",
            "",
            "That's it. `App` is ready to render our `Histogram`.",
            "",
            "You should now see an error about missing files. That's normal.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 2: CSS changes",
          "lectureLines": [
            "",
            "## Step 2: CSS changes {#histogram-css}",
            "",
            "As mentioned, opinions vary on the best approach to styling React apps. Some",
            "say stylesheets per component, some say styling inside JavaScript, others swear",
            "by global app styling.",
            "",
            "The truth is somewhere in between. Do what fits your project and your team.",
            "We're using global stylesheets because it's the simplest.",
            "",
            "Create a new file `src/style.css` and add these 29 lines:",
            "",
            "```{.css caption=\"style.css stylesheet\"}",
            ".histogram .bar rect {",
            "fill: steelblue;",
            "shape-rendering: crispEdges;",
            "}",
            "",
            ".histogram .bar text {",
            "fill: #fff;",
            "font: 12px sans-serif;",
            "}",
            "",
            "button {",
            "margin-right: .5em;",
            "margin-bottom: .3em !important;",
            "}",
            "",
            ".row {",
            "margin-top: 1em;",
            "}",
            "",
            ".mean text {",
            "font: 11px sans-serif;",
            "fill: grey;",
            "}",
            "",
            ".mean path {",
            "stroke-dasharray: 3;",
            "stroke: grey;",
            "stroke-width: 1px;",
            "}",
            "```",
            "",
            "We won't go into details about the CSS here. Many better books have been",
            "written about it.",
            "",
            "In broad strokes:",
            "",
            "- we're making `.histogram` rectangles – the bars – blue",
            "- labels white `12px` font",
            "- `button`s and `.row`s have some spacing",
            "- the `.mean` line is a dotted grey with gray `11px` text.",
            "",
            "More CSS than we need for just the histogram, but we're already here so might",
            "as well write it now.",
            "",
            "Adding our CSS before building the Histogram means it's going to look beautiful",
            "the first time around.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 3: Histogram component",
          "lectureLines": [
            "",
            "## Step 3: Histogram component",
            "",
            "We're following the",
            "[full-feature integration](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887740#full-feature-integration)",
            "approach for our Histogram component. React talks to the DOM, D3 calculates the",
            "props.",
            "",
            "We'll use two components:",
            "",
            "1. `Histogram` makes the general layout, dealing with D3, and translating raw",
            "   data into a histogram",
            "2. `HistogramBar` draws a single bar and labels it",
            "",
            "Let's start with the basics: a `Histogram` directory and an `index.js` file.",
            "Keeps our code organized and imports easy. I like to use directories for",
            "components made of multiple files.",
            "",
            "```{.javascript caption=\"Re-export Histogram\"}",
            "export { default } from \"./Histogram\";",
            "```",
            "",
            "Import and re-export the histogram componenet from `./Histogram`. This way you",
            "can keep your histogram code in a file called Histogram and pretend the",
            "directory itself is exporting it.",
            "",
            "Great way to group files that belong together without exposing your directory's",
            "internal structure.",
            "",
            "Now we need the `Histogram.js` file. Start with some imports, a default export,",
            "and a stubbed out `Histogram` class.",
            "",
            "```{.javascript caption=\"Histogram component stub\"}",
            "// src/components/Histogram/Histogram.js",
            "import React from \"react\";",
            "import * as d3 from \"d3\";",
            "",
            "class Histogram extends React.Component {",
            "state = {",
            "    histogram: d3.histogram(),",
            "    widthScale: d3.scaleLinear(),",
            "    yScale: d3.scaleLinear()",
            "};",
            "",
            "static getDerivedStateFromProps(props, state) {",
            "    let { histogram, widthScale, yScale } = state;",
            "",
            "    return {",
            "        ...state,",
            "        histogram,",
            "        widthScale,",
            "        yScale",
            "    };",
            "}",
            "",
            "makeBar = bar => {",
            "    const { yScale, widthScale } = this.state;",
            "",
            "};",
            "",
            "render() {",
            "    const { histogram, yScale } = this.state,",
            "        { x, y, data, axisMargin } = this.props;",
            "",
            "    return null;",
            "}",
            "}",
            "```",
            "",
            "We import React and D3, and set up `Histogram`.",
            "",
            "Default `state` for our D3 objects: histogram, widthScale, and yScale. An empty",
            "`getDerivedStateFromProps` to keep them updated, `makeBar` to help us render",
            "each bar, and `render` returning null for now.",
            "",
            "### getDerivedStateFromProps",
            "",
            "```{.javascript caption=\"getDerivedStateFromProps in Histogram\"}",
            "// src/components/Histogram/Histogram.js",
            "static getDerivedStateFromProps(props, state) {",
            "    let { histogram, widthScale, yScale } = state;",
            "",
            "    histogram.thresholds(props.bins).value(props.value);",
            "",
            "    const bars = histogram(props.data),",
            "        counts = bars.map(d => d.length);",
            "",
            "    widthScale",
            "        .domain([d3.min(counts), d3.max(counts)])",
            "        .range([0, props.width - props.axisMargin]);",
            "",
            "    yScale",
            "        .domain([0, d3.max(bars, d => d.x1)])",
            "        .range([props.height - props.y - props.bottomMargin, 0]);",
            "",
            "    return {",
            "        ...state,",
            "        histogram,",
            "        widthScale,",
            "        yScale",
            "    };",
            "}",
            "```",
            "",
            "First, we configure the `histogram` generator. `thresholds` specify how many",
            "bins we want and `value` specifies the value accessor function. We get both",
            "from props passed into the `Histogram` component.",
            "",
            "In our case that makes 20 bins, and the value accessor returns each data",
            "point's `base_salary`.",
            "",
            "We feed the data prop into our histogram generator, and count how many values",
            "are in each bin with a `.map` call. We need those to configure our scales.",
            "",
            "If you print the result of `histogram()`, you'll see an array structure where",
            "each entry holds metadata about the bin and the values it contains.",
            "",
            "![console.log(this.histogram())](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/histogram-data-screenshot.png)",
            "",
            "Let's use this info to set up our scales.",
            "",
            "`widthScale` has a range from the smallest (`d3.min`) bin to the largest",
            "(`d3.max`), and a range of `0` to width less a margin. We'll use it to",
            "calculate bar sizes.",
            "",
            "`yScale` has a range from `0` to the largest `x1` coordinate we can find in a",
            "bin. Bins go from `x0` to `x1`, which reflects the fact that most histograms",
            "are horizontally oriented. Ours is vertical so that our labels are easier to",
            "read. The range goes from `0` to the maximum height less a margin.",
            "",
            "Now let's render this puppy.",
            "",
            "### render",
            "",
            "```{.javascript caption=\"Histogram.render\"}",
            "// src/components/Histogram/Histogram.js",
            "class Histogram extends React.Component {",
            "// ...",
            "render() {",
            "    const { histogram, yScale } = this.state,",
            "        { x, y, data, axisMargin } = this.props;",
            "",
            "    const bars = histogram(data);",
            "",
            "    return (",
            "        <g className=\"histogram\" transform={`translate(${x}, ${y})`}>",
            "            <g className=\"bars\">",
            "                {bars.map(this.makeBar))}",
            "            </g>",
            "        </g>",
            "    );",
            "}",
            "}",
            "```",
            "",
            "We take everything we need out of `state` and `props` with destructuring, call",
            "`histogram()` on our data to get a list of bars, and render.",
            "",
            "Our render method returns a `<g>` grouping element transformed to the position",
            "given in props and walks through the `bars` array, calling `makeBar` for each.",
            "Later, we're going to add an `Axis` as well.",
            "",
            "This is a great example of React's declarativeness. We have a bunch of stuff,",
            "and all it takes to render is a loop. No worrying about how it renders, where",
            "it goes, or anything like that. Walk through data, render, done.",
            "",
            "### makeBar",
            "",
            "`makeBar` is a function that takes a histogram bar's metadata and returns a",
            "`HistogramBar` component. We use it to make our declarative loop more readable.",
            "",
            "```{.javascript caption=\"Histogram.makeBar\"}",
            "// src/components/Histogram/Histogram.js",
            "class Histogram extends React.Component {",
            "// ...",
            "makeBar = bar => {",
            "    const { yScale, widthScale } = this.state;",
            "",
            "    let percent = (bar.length / this.props.data.length) * 100;",
            "",
            "    let props = {",
            "        percent: percent,",
            "        x: this.props.axisMargin,",
            "        y: yScale(bar.x1),",
            "        width: widthScale(bar.length),",
            "        height: yScale(bar.x0) - yScale(bar.x1),",
            "        key: \"histogram-bar-\" + bar.x0",
            "    };",
            "",
            "    return <HistogramBar {...props} />;",
            "};",
            "}",
            "```",
            "",
            "See, we're calculating `props` and feeding them into `HistogramBar`. Putting it",
            "in a separate function just makes the `.map` construct in `render` easier to",
            "read. There's a lot of props to calculate.",
            "",
            "Some, like `axisMargin` we pass through, others like `width` and `height` we",
            "calculate using our scales.",
            "",
            "Setting the `key` prop is important. React uses it to tell the bars apart and",
            "only re-render those that change.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 4: HistogramBar (sub)component",
          "lectureLines": [
            "",
            "## Step 4: HistogramBar (sub)component",
            "",
            "Before our histogram shows up, we need another component: `HistogramBar`. We",
            "_could_ have shoved all of it in the `makeBar` function, but it makes sense to",
            "keep separate. Better future flexibility.",
            "",
            "You can write small components like this in the same file as their main",
            "component. They're not reusable since they fit a specific use-case, and they're",
            "small enough so your files don't get too crazy.",
            "",
            "But in the interest of readability, let's make a `HistogramBar` file.",
            "",
            "```{.javascript caption=\"HistogramBar component\"}",
            "// src/components/Histogram/HistogramBar.js",
            "import React from \"react\";",
            "",
            "const HistogramBar = ({ percent, x, y, width, height }) => {",
            "let translate = `translate(${x}, ${y})`,",
            "    label = percent.toFixed(0) + \"%\";",
            "",
            "if (percent < 1) {",
            "    label = percent.toFixed(2) + \"%\";",
            "}",
            "",
            "if (width < 20) {",
            "    label = label.replace(\"%\", \"\");",
            "}",
            "",
            "if (width < 10) {",
            "    label = \"\";",
            "}",
            "",
            "return (",
            "    <g transform={translate} className=\"bar\">",
            "        <rect",
            "            width={width}",
            "            height={height - 2}",
            "            transform=\"translate(0, 1)\"",
            "        />",
            "        <text textAnchor=\"end\" x={width - 5} y={height / 2 + 3}>",
            "            {label}",
            "        </text>",
            "    </g>",
            ");",
            "};",
            "",
            "export default HistogramBar;",
            "```",
            "",
            "Pretty long for a functional component. Most of it goes into deciding how much",
            "precision to render in the label, so it's okay.",
            "",
            "We start with an SVG translate and a default `label`. Then we update the label",
            "based on the bar size and its value.",
            "",
            "When we have a label we like, we return a `<g>` grouping element with a",
            "rectangle and a text. Both positioned based on the `width` and `height` of the",
            "bar.",
            "",
            "Make sure to import `HistogramBar` in the main `Histogram` file.",
            "",
            "```{.javascript caption=\"HistogramBar import\"}",
            "// src/components/Histogram/Histogram.js",
            "",
            "import HistogramBar from './HistogramBar'",
            "```",
            "",
            "You should now see a histogram.",
            "",
            "![Histogram without axis](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/histogram-without-axis.png)",
            ""
          ]
        },
        {
          "lectureTitle": "Step 5: Add an axis",
          "lectureLines": [
            "",
            "## Step 5: Axis HOC",
            "",
            "Our histogram is pretty, but it needs an axis to be useful. You've already",
            "learned how to implement an axis when we talked about",
            "[blackbox integration](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887732#blackbox-axis).",
            "We're going to use the same approach and copy those concepts into the real",
            "project.",
            "",
            "### D3blackbox",
            "",
            "We start with the D3blackbox higher order component. Same as before, except we",
            "put it in `src/components`.",
            "",
            "```{.javascript caption=\"D3blackbox HOC\"}",
            "import React from \"react\";",
            "",
            "export default function D3blackbox(D3render) {",
            "return class Blackbox extends React.Component {",
            "    anchorRef = React.createRef();",
            "",
            "    componentDidMount() {",
            "        D3render.call(this);",
            "    }",
            "    componentDidUpdate() {",
            "        D3render.call(this);",
            "    }",
            "",
            "    render() {",
            "        const { x, y } = this.props;",
            "        return (",
            "            <g transform={`translate(${x}, ${y})`} ref={this.anchorRef} />",
            "        );",
            "    }",
            "};",
            "}",
            "```",
            "",
            "Take a `D3render` function, call it on `componentDidMount` and",
            "`componentDidUpdate`, and render a positioned anchor element for `D3render` to",
            "hook into.",
            "",
            "### Axis component",
            "",
            "With `D3blackbox`, we can reduce the `Axis` component to a wrapped function.",
            "We're implementing the `D3render` method.",
            "",
            "```{.javascript caption=\"Axis component using D3blackbox\"}",
            "import * as d3 from \"d3\";",
            "import D3blackbox from \"../D3blackbox\";",
            "",
            "const Axis = D3blackbox(function() {",
            "const axis = d3",
            "    .axisLeft()",
            "    .tickFormat(d => `${d3.format(\".2s\")(d)}`)",
            "    .scale(this.props.scale)",
            "    .ticks(this.props.data.length);",
            "",
            "d3.select(this.anchorRef.current).call(axis);",
            "});",
            "",
            "export default Axis;",
            "```",
            "",
            "We use D3's `axisLeft` generator, configure its `tickFormat`, pass in a `scale`",
            "from our props, and specify how many `ticks` we want. To render, we `select`",
            "the anchor element from `D3blackbox` and `call` the axis generator on it.",
            "",
            "Yes, this `Axis` works just for our specific use case and that's okay. No need",
            "to generalize your code until you know where else you're using it.",
            "",
            "Remember the",
            "[YAGNI principle](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it).",
            "",
            "### Add Axis to Histogram",
            "",
            "To render our new `Axis`, we add it to the `Histogram` component. It's a two",
            "step process:",
            "",
            "1. Import `Axis` component",
            "2. Render it",
            "",
            "```{.javascript caption=\"Import and render Axis\"}",
            "// src/components/Histogram/Histogram.js",
            "import React, { Component } from 'react';",
            "import * as d3 from 'd3';",
            "",
            "// Insert the line(s) between here...",
            "import Axis from './Axis';",
            "// ...and here.",
            "",
            "// ...",
            "class Histogram extends Component {",
            "// ...",
            "render() {",
            "    const { histogram, yScale } = this.state,",
            "        { x, y, data, axisMargin } = this.props;",
            "",
            "    const bars = histogram(data);",
            "",
            "    return (",
            "        <g className=\"histogram\" transform={translate}>",
            "            <g className=\"bars\">",
            "                {bars.map(this.makeBar)}",
            "            </g>",
            "            // Insert the line(s) between here...",
            "            <Axis x={axisMargin-3}",
            "                  y={0}",
            "                  data={bars}",
            "                  scale={yScale} />",
            "            // ...and here.",
            "        </g>",
            "    );",
            "}",
            "```",
            "",
            "We import our `Axis` and add it to the `render` method with some props. It",
            "takes an `x` and `y` coordinate, the `data`, and a `scale`.",
            "",
            "An axis appears.",
            "",
            "![Basic histogram with axis](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/basic-histogram.png)",
            "",
            "If that didn't work, try comparing your changes to this",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/02a40899e348587a909e97e8f18ecf468e2fe218).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Make it understandable with meta info",
      "lectures": [
        {
          "lectureTitle": "Add meta info",
          "lectureLines": [
            "",
            "# Make it understandable - meta info",
            "",
            "You've come so far! There's a US map and a histogram. They're blue and shiny",
            "and you look at them and you go _\"Huh?\"_.",
            "",
            "The key to a good data visualization is telling users what it means. An easy",
            "way to do that is a good title and description. Just tell them. The picture",
            "supports the words, the words explain the picture.",
            "",
            "Let's add those words.",
            "",
            "We're adding a dynamic title and description, and a median line on the",
            "histogram. The text is dynamic because we're adding user controls later, and we",
            "want the pictures and the words to stay in sync.",
            "",
            "At the end of this section, you'll have a full visualization of the shortened",
            "dataset.",
            "",
            "![Full visualization without user controls](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/dataviz-without-controls.png)",
            ""
          ]
        },
        {
          "lectureTitle": "Dynamic title",
          "lectureLines": [
            "",
            "## Dynamic title",
            "",
            "We begin with the title because it shows up first.",
            "",
            "We start with an import in `App.js` and add it to the render method. You know",
            "the drill :smile:",
            "",
            "```{.javascript caption=\"Adding Title to main App component\"}",
            "// src/App.js",
            "import CountyMap from './components/CountyMap';",
            "import Histogram from './components/Histogram';",
            "// Insert the line(s) between here...",
            "import { Title } from './components/Meta';",
            "// ...and here.",
            "",
            "class App extends Component {",
            "state = {",
            "    techSalaries: [],",
            "    countyNames: [],",
            "    medianIncomes: [],",
            "    // Insert the line(s) between here...",
            "    filteredBy: {",
            "        USstate: '*',",
            "        year: '*',",
            "        jobTitle: '*'",
            "    }",
            "    // ...and here.",
            "}",
            "",
            "// ...",
            "",
            "render() {",
            "    const { filteredBy } = this.state;",
            "    // ..",
            "    return (",
            "        <div className=\"App container\">",
            "            // Insert the line(s) between here...",
            "            <Title data={filteredSalaries}",
            "                   filteredBy={filteredBy} />",
            "            // ...and here.",
            "            // ...",
            "        </div>",
            "    )",
            "}",
            "}",
            "```",
            "",
            "Ok, I lied. We did a lot more than just imports and adding to render.",
            "",
            "We also set up the `App` component for future user-controlled data filtering.",
            "The `filteredBy` key in `state` tells us what the user is filtering by – 3",
            "options: `USstate`, `year`, and `jobTitle`. We set them to \"everything\" by",
            "default.",
            "",
            "We added them now so that we can immediately write our `Title` component in a",
            "filterable way. No need to make changes later.",
            "",
            "As you can see, `Title` takes `data` and `filteredBy` props.",
            "",
            "### Prep Meta component",
            "",
            "Before we begin the `Title` component, there are a few things to take care of.",
            "Our meta components work together for a common purpose – showing meta data.",
            "Grouping them in a directory makes sense.",
            "",
            "We make a `components/Meta` directory and add an `index.js`. It makes importing",
            "easier.",
            "",
            "```{.javascript caption=\"Meta index.js\"}",
            "// src/components/Meta/index.js",
            "export { default as Title } from './Title'",
            "export { default as Description } from './Description';",
            "```",
            "",
            "We have to name our `Title` and `Description` re-exports because you can't have",
            "two default exports.",
            "",
            "#### Get the USStatesMap file",
            "",
            "You need the `USStatesMap` file.",
            "",
            "It's a big dictionary that translates US state codes to full names. You can",
            "[get it from Github](https://github.com/Swizec/react-d3js-step-by-step/blob/4f94fcd1c3caeb0fc410636243ca99764e27c5e6/src/components/Meta/USStatesMap.js)",
            "and save it as `components/Meta/USStatesMap.js`.",
            "",
            "We'll use it when creating titles and descriptions.",
            "",
            "### Implement Title",
            "",
            "We're building two types of titles based on user selection. If both `years` and",
            "`US state` were selected, we return",
            "`In {US state}, the average {job title} paid ${mean}/year in {year}`. If not,",
            "we return `{job title} paid ${mean}/year in {state} in {year}`.",
            "",
            "I know, it's confusing. They look like the same sentence turned around. Notice",
            "the _and_. First option when _both_ are selected, second when either/or.",
            "",
            "We start with imports, a stub, and a default export.",
            "",
            "```{.javascript caption=\"Title component stub\"}",
            "// src/components/Meta/Title.js",
            "import React, { Component } from 'react';",
            "import { scaleLinear } from 'd3-scale';",
            "import { mean as d3mean, extent as d3extent } from 'd3-array';",
            "",
            "import USStatesMap from './USStatesMap';",
            "",
            "class Title extends Component {",
            "get yearsFragment() {",
            "}",
            "",
            "get USstateFragment() {",
            "}",
            "",
            "get jobTitleFragment() {",
            "}",
            "",
            "get format() {",
            "}",
            "",
            "render() {",
            "}",
            "}",
            "",
            "export default Title;",
            "```",
            "",
            "We import only what we need from D3's `d3-scale` and `d3-array` packages. I",
            "consider this best practice until you're importing so much that it gets messy",
            "to look at.",
            "",
            "In the `Title` component, we have 4 getters and a render. Getters are ES6",
            "functions that work like dynamic properties. You specify a function without",
            "arguments, and you use it without `()`. It's neat.",
            "",
            "#### The getters",
            "",
            "1. `yearsFragment` describes the selected year",
            "2. `USstateFragment` describes the selected US state",
            "3. `jobTitleFragment` describes the selected job title",
            "4. `format` returns a number formatter",
            "",
            "We can implement `yearsFragment`, `USstateFragment`, and `format` in one code",
            "sample. They're short.",
            "",
            "```{.javascript caption=\"3 short getters in Title\"}",
            "// src/components/Meta/Title.js",
            "class Title extends Component {",
            "get yearsFragment() {",
            "    const year = this.props.filteredBy.year;",
            "",
            "    return year === '*' ? \"\" : `in ${year}`;",
            "}",
            "",
            "getteFragment() {",
            "    const USstate = this.props.filteredBy.USstate;",
            "",
            "    return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];",
            "}",
            "",
            "// ...",
            "",
            "get format() {",
            "    return scaleLinear()",
            "             .domain(d3extent(this.props.data, d => d.base_salary))",
            "             .tickFormat();",
            "}",
            "```",
            "",
            "In both `yearsFragment` and `USstateFragment`, we get the appropriate value",
            "from Title's `filteredBy` prop, then return a string with the value or an empty",
            "string.",
            "",
            "We rely on D3's built-in number formatters to build `format`. Linear scales",
            "have the one that turns `10000` into `10,000`. Tick formatters don't work well",
            "without a `domain`, so we define it. We don't need a range because we never use",
            "the scale itself.",
            "",
            "`format` returns a function, which makes it a",
            "[higher order function](https://en.wikipedia.org/wiki/Higher-order_function).",
            "Being a getter makes it really nice to use: `this.format()`. Looks just like a",
            "normal function call :smile:",
            "",
            "The `jobTitleFragment` getter is conceptually no harder than `yearsFragment`",
            "and `USstateFragment`, but it comes with a few more conditionals.",
            "",
            "```{.javascript caption=\"Title.jobTitleFragment\"}",
            "// src/components/Meta/Title.js",
            "",
            "class Title extends Component {",
            "// ...",
            "get jobTitleFragment() {",
            "    const { jobTitle, year } = this.props.filteredBy;",
            "    let title = \"\";",
            "",
            "    if (jobTitle === \"*\") {",
            "        if (year === \"*\") {",
            "            title = \"The average H1B in tech pays\";",
            "        } else {",
            "            title = \"The average tech H1B paid\";",
            "        }",
            "    } else {",
            "        title = `Software ${jobTitle}s on an H1B`;",
            "        if (year === \"*\") {",
            "            title += \" make\";",
            "        } else {",
            "            title += \" made\";",
            "        }",
            "    }",
            "",
            "    return title;",
            "}",
            "// ...",
            "}",
            "```",
            "",
            "We're dealing with the `(jobTitle, year)` combination. Each influences the",
            "other when building the fragment for a total 4 different options.",
            "",
            "#### The render",
            "",
            "We put all this together in the `render` method. A conditional decides which of",
            "the two situations we're in, and we return an `<h2>` tag with the right text.",
            "",
            "```{.javascript caption=\"Title.render\"}",
            "// src/components/Meta/Title.js",
            "class Title extends Component {",
            "// ...",
            "render() {",
            "    const mean = this.format(d3mean(this.props.data, d => d.base_salary));",
            "",
            "    let title;",
            "",
            "    if (this.yearsFragment && this.USstateFragment) {",
            "        title = (",
            "            <h2>",
            "                In {this.USstateFragment}, {this.jobTitleFragment}",
            "                ${mean}/year {this.yearsFragment}",
            "            </h2>",
            "        );",
            "    }else{",
            "        title = (",
            "            <h2>",
            "                {this.jobTitleFragment} ${mean}/year",
            "                {this.USstateFragment ? `in ${this.stateFragment}` : ''}",
            "                {this.yearsFragment}",
            "            </h2>",
            "        );",
            "    }",
            "",
            "    return title;",
            "}",
            "}",
            "```",
            "",
            "Calculate the mean value using `d3.mean` with a value accessor, turn it into a",
            "pretty number with `this.format`, then use one of two string patterns to make a",
            "`title`.",
            "",
            "And a title appears.",
            "",
            "![Dataviz with title](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/dataviz-with-title.png)",
            "",
            "If it doesn't, consult",
            "[this diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/4f94fcd1c3caeb0fc410636243ca99764e27c5e6).",
            ""
          ]
        },
        {
          "lectureTitle": "Dynamic description",
          "lectureLines": [
            "",
            "## Dynamic description",
            "",
            "You know what? The dynamic description component is pretty much the same as the",
            "title. It's just longer and more complex and uses more code. It's interesting,",
            "but not super relevant to the topic of this book.",
            "",
            "So rather than explain it all here, I'm going to give you a link to the",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/032fe6e988b903b6d86a60d2f0404456785e180f)",
            "",
            "We use the same approach as before:",
            "",
            "1. Add imports in `App.js`",
            "2. Add component to `App` render",
            "3. Add re-export to `components/Meta/index.js`",
            "4. Implement component in `components/Meta/Description.js`",
            "5. Use getters for sentence fragments",
            "6. Play with conditionals to construct different sentences",
            "",
            "142 lines of mundane code.",
            "",
            "All the interesting complexity goes into finding the richest city and county.",
            "That part looks like this:",
            "",
            "```{.javascript caption=\"Richest county calculation\"}",
            "// src/components/Meta/Description.js",
            "get countyFragment() {",
            "  const byCounty = _.groupBy(this.props.data, 'countyID'),",
            "    medians = this.props.medianIncomesByCounty;",
            "",
            "  let ordered = _.sortBy(",
            "  _.keys(byCounty)",
            "   .map(county => byCounty[county])",
            "   .filter(d => d.length/this.props.data.length > 0.01),",
            "  items => d3mean(items,",
            "                  d => d.base_salary) - medians[items[0].countyID][0].medianIncome);",
            "",
            "  let best = ordered[ordered.length-1],",
            "  countyMedian = medians[best[0].countyID][0].medianIncome;",
            "",
            "  // ...",
            "}",
            "```",
            "",
            "We group the dataset by county, then sort counties by their income delta. We",
            "look only at counties that are bigger than 1% of the entire dataset. And we",
            "define income delta as the difference between a county's median household",
            "income and the median tech salary in our dataset.",
            "",
            "This code is not super efficient, but it gets the job done. We could optimize",
            "by just looking for the max value, for example.",
            "",
            "Similar code handles finding the best city.",
            "",
            "### render the description",
            "",
            "I recommend copying the",
            "[`Description` component from GitHub](https://github.com/Swizec/react-d3js-step-by-step/commit/032fe6e988b903b6d86a60d2f0404456785e180f).",
            "Most of it has little to do with React and data visualization. It's all about",
            "combining sentence fragments based on props.",
            "",
            "You then render the Description like this:",
            "",
            "```{.javascript caption=\"Render Description component\"}",
            "// src/components/App.js",
            "",
            "import { Title, Description } from \"./components/Meta\";",
            "",
            "// ..",
            "",
            "<Description",
            "data={filteredSalaries}",
            "allData={techSalaries}",
            "filteredBy={filteredBy}",
            "medianIncomesByCounty={this.state.medianIncomesByCounty}",
            "/>",
            "```",
            "",
            "![Dataviz with Title and Description](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/dataviz-with-description.png)",
            "",
            "Another similar component is the `GraphDescription`. It shows a small",
            "description on top of each chart that explains how to read the picture. Less",
            "\"Here's a key takeaway\", more \"color means X\".",
            "",
            "You can follow this",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/37b5222546c3f8f58f3147ce0bef6a3c1afe1b47)",
            "to implement it. Same approach as `Title` and `Description`.",
            "",
            "![Dataviz with all descriptions](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/dataviz-with-all-descriptions.png)",
            ""
          ]
        },
        {
          "lectureTitle": "Overlay a median household line",
          "lectureLines": [
            "",
            "## Overlay a median household line",
            "",
            "Here's a more interesting component: the median dotted line. It shows a direct",
            "comparison between the histogram's distribution and the median household income",
            "in an area. I'm not sure people understand it at a glance, but I think it's",
            "cool.",
            "",
            "We're using a quick approach where everything fits into a functional React",
            "component. It's great for small components like this.",
            "",
            "### Step 1: App.js",
            "",
            "Inside `src/App.js`, we first have to add an import, then extract the median",
            "household value from state, and in the end, add `MedianLine` to the render",
            "method.",
            "",
            "Let's see if we can do it in a single code block :smile:",
            "",
            "```{.javascript caption=\"Adding MedianLine to App.js\"}",
            "// src/App.js",
            "import Histogram from './components/Histogram';",
            "import { Title, Description, GraphDescription } from './components/Meta';",
            "// Insert the line(s) between here...",
            "import MedianLine from './components/MedianLine';",
            "// ...and here.",
            "",
            "class App extends Component {",
            "// ...",
            "render() {",
            "    // ...",
            "    let zoom = null,",
            "        // Insert the line(s) between here...",
            "        medianHousehold = this.state.medianIncomesByUSState['US'][0]",
            "                              .medianIncome;",
            "        // ...and here.",
            "",
            "    return (",
            "        // ...",
            "        <svg width=\"1100\" height=\"500\">",
            "            <CountyMap // ... />",
            "            <Histogram // ... />",
            "            // Insert the line(s) between here...",
            "            <MedianLine data={filteredSalaries}",
            "                        x={500}",
            "                        y={10}",
            "                        width={600}",
            "                        height={500}",
            "                        bottomMargin={5}",
            "                        median={medianHousehold}",
            "                        value={d => d.base_salary} />",
            "            // ...and here.",
            "        </svg>",
            "    )",
            "}",
            "}",
            "```",
            "",
            "You probably don't remember `medianIncomesByUSState` anymore. We set it up way",
            "back when",
            "[tying datasets together](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888897#tie-datasets-together).",
            "It groups our salary data by US state.",
            "",
            "See, using good names helps :smile:",
            "",
            "When rendering `MedianLine`, we give it sizing and positioning props, the",
            "dataset, a `value` accessor, and the median value to show. We could make it",
            "smart enough to calculate the median, but the added flexibility of a prop felt",
            "right.",
            "",
            "### Step 2: MedianLine",
            "",
            "The `MedianLine` component looks similar to what you've seen so far. Some",
            "imports, a `constructor` that sets up D3 objects, an `updateD3` method that",
            "keeps them in sync, and a `render` method that outputs SVG.",
            "",
            "```{.javascript caption=\"MedianLine component stub\"}",
            "// src/components/MedianLine.js",
            "",
            "import React from \"react\";",
            "import * as d3 from \"d3\";",
            "",
            "const MedianLine = ({",
            "data,",
            "value,",
            "width,",
            "height,",
            "x,",
            "y,",
            "bottomMargin,",
            "median",
            "}) => {",
            "",
            "};",
            "",
            "export default MedianLine;",
            "```",
            "",
            "We have some imports, a functional `MedianLine` component that takes our props,",
            "and an export. It should cause an error because it's not returning anything.",
            "",
            "Everything we need to render the line, fits into this function.",
            "",
            "```{.javascript caption=\"MedianLine render\"}",
            "// src/components/MedianLine.js",
            "",
            "const MedianLine = ({",
            "  // ...",
            "}) => {",
            "const yScale = d3",
            "        .scaleLinear()",
            "        .domain([0, d3.max(data, value)])",
            "        .range([height - y - bottomMargin, 0]),",
            "    line = d3.line()([[0, 5], [width, 5]]);",
            "",
            "const medianValue = median || d3.median(data, value);",
            "",
            "const translate = `translate(${x}, ${yScale(medianValue)})`,",
            "    medianLabel = `Median Household: $${yScale.tickFormat()(median)}`;",
            "",
            "return (",
            "    <g className=\"mean\" transform={translate}>",
            "        <text",
            "            x={width - 5}",
            "            y=\"0\"",
            "            textAnchor=\"end\"",
            "            style={{ background: \"purple\" }}",
            "        >",
            "            {medianLabel}",
            "        </text>",
            "        <path d={line} />",
            "    </g>",
            ");",
            "};",
            "",
            "```",
            "",
            "We start with a scale for vertical positioning – `yScale`. It's linear, takes",
            "values from `0` to `max`, and translates them to pixels less some margin. For",
            "the `medianValue`, we use props, or calculate our own, if needed. Just like I",
            "promised.",
            "",
            "A `translate` SVG transform helps us position our line and label. We use it all",
            "to return a `<g>` grouping element containing a `<text>` for our label, and a",
            "`<path>` for the line.",
            "",
            "Building the `d` attribute for the path, that's interesting. We use a `line`",
            "generator from D3.",
            "",
            "```{.javascript caption=\"Line generator\"}",
            "line = d3.line()([[0, 5], [width, 5]]);",
            "```",
            "",
            "It comes from the [d3-shape](https://github.com/d3/d3-shape#lines) package and",
            "generates splines, or polylines. By default, it takes an array of points and",
            "builds a line through all of them. A line from `[0, 5]` to `[width, 5]` in our",
            "case.",
            "",
            "That makes it span the entire width and leaves 5px for the label. We're using a",
            "`transform` on the entire group to vertically position the final element.",
            "",
            "Remember, we already styled `medianLine` when we built",
            "[histogram styles](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888921#histogram-css)",
            "earlier.",
            "",
            "```{.css caption=\"Histogram css\"}",
            ".mean text {",
            "font: 11px sans-serif;",
            "fill: grey;",
            "}",
            "",
            ".mean path {",
            "stroke-dasharray: 3;",
            "stroke: grey;",
            "stroke-width: 1px;",
            "}",
            "```",
            "",
            "The `stroke-dasharray` is what makes it dashed. `3` means each `3px` dash is",
            "followed by a `3px` blank. You can use",
            "[any pattern you like](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray).",
            "",
            "You should see a median household salary line overlaid on your histogram.",
            "",
            "![Median line over histogram](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/dataviz-with-everything.png)",
            "",
            "Almost everyone in tech makes more than an entire median household. Crazy, huh?",
            "I think it is.",
            "",
            "If that didn't work, consult the",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/1fd055e461184fb8dc8dd509edb3a6a683c995fe).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Add user controls for exploration",
      "lectures": [
        {
          "lectureTitle": "Add user controls for data slicing and dicing",
          "lectureLines": [
            "",
            "# Add user controls for data slicing and dicing {#user-controls}",
            "",
            "Now comes the fun part. All that extra effort we put into making our components",
            "aware of filtering, and it all comes down to this: User controls.",
            "",
            "Here's what we're building:",
            "",
            "![User controlled filters](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/controls.png)",
            "",
            "It's a set of filters for users to slice and dice our visualization. The",
            "shortened dataset gives you 2 years, 12 job titles, and 50 US states. You'll",
            "get 5+ years and many more job titles with the full dataset.",
            "",
            "We're using the",
            "[architecture we discussed](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6887770#basic-architecture)",
            "earlier to make it work. Clicking buttons updates a filter function and",
            "communicates it all the way up to the `App` component. `App` then uses it to",
            "update `this.state.filteredSalaries`, which triggers a re-render and updates",
            "our dataviz.",
            "",
            "![Architecture sketch](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/architecture_callbacks.png)",
            "",
            "We're building controls in 4 steps, top to bottom:",
            "",
            "1. Update `App.js` with filtering and a `<Controls>` render",
            "2. Build a `Controls` component, which builds the filter based on inputs",
            "3. Build a `ControlRow` component, which handles a row of buttons",
            "4. Build a `Toggle` component, which is a button",
            "",
            "We'll go through the files linearly. That makes them easier for me to explain",
            "and easier for you to understand, but that also means there's going to be a",
            "long period where all you're seeing is an error like this:",
            "",
            "![Controls error during coding](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/controls-error.png)",
            "",
            "If you want to see what's up during this process, remove an import or two and",
            "maybe a thing from render. For instance, it's complaining about `ControlRow` in",
            "this screenshot. Remove the `ControlRow` import on top and delete",
            "`<ControlRow ... />` from render. The error goes away, and you see what you're",
            "doing.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 1: Update App.js",
          "lectureLines": [
            "",
            "## Step 1: Update App.js",
            "",
            "All right, you know the drill. Add imports, tweak some things, add to render.",
            "We have to import `Controls`, set up filtering, update the map's `zoom` prop,",
            "and render a white rectangle and `Controls`.",
            "",
            "The white rectangle makes it so the zoomed-in map doesn't cover up the",
            "histogram. I'll explain when we get there.",
            "",
            "```{.javascript caption=\"Imports and filter updates in App.js\"}",
            "// src/App.js",
            "import MedianLine from './components/MedianLine';",
            "",
            "// Insert the line(s) between here...",
            "import Controls from './components/Controls';",
            "// ...and here.",
            "",
            "class App extends React.Component {",
            "state = {",
            "    // ...",
            "    medianIncomes: [],",
            "    // Insert the line(s) between here...",
            "    salariesFilter: () => true,",
            "    // ...and here.",
            "    filteredBy: {",
            "        // ...",
            "    }",
            "}",
            "",
            "// ...",
            "",
            "// Insert the line(s) between here...",
            "updateDataFilter = (filter, filteredBy) => {",
            "    this.setState({",
            "        salariesFilter: filter,",
            "        filteredBy: filteredBy",
            "    });",
            "}",
            "// ...and here.",
            "",
            "render() {",
            "    // ...",
            "}",
            "}",
            "```",
            "",
            "We import the `Controls` component and add a default `salariesFilter` function",
            "to `this.state`. The `updateDataFilter` method passes the filter function and",
            "`filteredBy` dictionary from arguments to App state. We'll use it as a callback",
            "in `Controls`.",
            "",
            "The rest of filtering setup happens in the render method.",
            "",
            "```{.javascript caption=\"Filtering data and updating map zoom in App render\"}",
            "// src/App.js",
            "class App extends React.Component {",
            "// ...",
            "",
            "render() {",
            "    // ...",
            "    // Delete the line(s) between here...",
            "    const filteredSalaries = techSalaries",
            "    // ...and here.",
            "    // Insert the line(s) between here...",
            "    const filteredSalaries = techSalaries",
            "                                 .filter(this.state.salariesFilter)",
            "    // ...and here.",
            "",
            "    // ...",
            "",
            "    let zoom = null,",
            "        medianHousehold = // ...",
            "    // Insert the line(s) between here...",
            "    if (filteredBy.USstate !== '*') {",
            "        zoom = this.state.filteredBy.USstate;",
            "        medianHousehold = d3.mean(medianIncomesByUSState[zoom],",
            "                                  d => d.medianIncome);",
            "    }",
            "    // ...and here.",
            "",
            "    // ...",
            "}",
            "}",
            "```",
            "",
            "We add a `.filter` call to `filteredSalaries`, which uses our `salariesFilter`",
            "method to throw out anything that doesn't fit. Then we set up `zoom`, if a US",
            "state was selected.",
            "",
            "We built the `CountyMap` component to focus on a given US state. Finding the",
            "centroid of a polygon, re-centering the map, and increasing the sizing factor.",
            "It creates a nice zoom effect.",
            "",
            "![Zoom effect](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/zoom-effect.png)",
            "",
            "And here's the downside of this approach. SVG doesn't know about element",
            "boundaries. It just renders stuff.",
            "",
            "![Zoom without white rectangle](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/zoom-without-rectangle.png)",
            "",
            "See, it goes under the histogram. Let's fix that and add the `Controls` render",
            "while we're at it.",
            "",
            "```{.javascript caption=\"Add opaque background to histogram\"}",
            "// src/App.js",
            "class App extends React.Component {",
            "// ...",
            "",
            "render() {",
            "    // ...",
            "",
            "    return (",
            "        <div //...>",
            "            <svg //...>",
            "                <CountyMap //... />",
            "",
            "                // Insert the line(s) between here...",
            "                <rect x=\"500\" y=\"0\"",
            "                      width=\"600\"",
            "                      height=\"500\"",
            "                      style={{fill: 'white'}} />",
            "                // ...and here.",
            "",
            "                <Histogram //... />",
            "                <MedianLine //.. />",
            "            </svg>",
            "",
            "            // Insert the line(s) between here...",
            "            <Controls data={techSalaries}",
            "                      updateDataFilter={this.updateDataFilter} />",
            "            // ...and here.",
            "        </div>",
            "    )",
            "}",
            "}",
            "```",
            "",
            "Rectangle, `500` to the right, `0` from top, `600` wide and `500` tall, with a",
            "white background. Gives the histogram an opaque background, so it doesn't",
            "matter what the map is doing.",
            "",
            "We render the `Controls` component just after `</svg>` because it's not an SVG",
            "component – it uses normal HTML. Unlike other components, it needs our entire",
            "dataset as `data`. We use the `updateDataFilter` prop to say which callback",
            "function it should call when a new filter is ready.",
            "",
            "If this seems roundabout ... I've seen worse. The callbacks approach makes our",
            "app easier to componentize and keeps the code relatively unmessy. Imagine",
            "putting everything we've done so far in `App`! :satisfied:",
            ""
          ]
        },
        {
          "lectureTitle": "Step 2: Build Controls component",
          "lectureLines": [
            "",
            "## Step 2: Build Controls component",
            "",
            "The `Controls` component builds our filter function and `filteredBy` dictionary",
            "based on user choices.",
            "",
            "`Controls` renders 3 rows of buttons and builds filtering out of the choice",
            "made on each row. That makes `Controls` kind of repetitive, but that's okay.",
            "",
            "To keep this book shorter, we're going to build everything for a `year` filter",
            "first. Then I'll explain how to add `USstate` and `jobTitle` filters on a",
            "higher level. Once you have one working, the rest follows that same pattern.",
            "",
            "Make a `Controls` directory in `src/components/` and let's begin. The main",
            "`Controls` component goes in your `index.js` file.",
            "",
            "### Stub Controls",
            "",
            "```{.javascript caption=\"Controls stubbed for year filter\"}",
            "// src/components/Controls/index.js",
            "import React from \"react\";",
            "",
            "import ControlRow from \"./ControlRow\";",
            "",
            "class Controls extends React.Component {",
            "state = {",
            "    yearFilter: () => true,",
            "    year: \"*\"",
            "};",
            "",
            "componentDidMount() {",
            "",
            "}",
            "",
            "updateYearFilter = (year, reset) => {",
            "    let filter = d => d.submit_date.getFullYear() === year;",
            "",
            "    if (reset || !year) {",
            "        filter = () => true;",
            "        year = \"*\";",
            "    }",
            "",
            "    this.setState(",
            "        {",
            "            yearFilter: filter,",
            "            year: year",
            "        },",
            "        () => this.reportUpdateUpTheChain()",
            "    );",
            "};",
            "",
            "render() {",
            "    const { data } = this.props;",
            "}",
            "}",
            "",
            "export default Controls;",
            "```",
            "",
            "We start with some imports and a `Controls` class-based component. Inside, we",
            "define default `state` with an always-true `yearFilter` and an asterisk for",
            "`year`.",
            "",
            "We also need an `updateYearFilter` function, which we'll use to update the",
            "filter, a `reportUpdateUpTheChain` function, and a `render` method. We're using",
            "`reportUpdateUpTheChain` to bubble updates to our parent component. It's a",
            "simpler alternative to using React Context or a state management library.",
            "",
            "### Filter logic",
            "",
            "```{.javascript caption=\"year filtering logic in Controls\"}",
            "// src/components/Controls/index.js",
            "class Controls extends React.Component {",
            "// ...",
            "updateYearFilter = (year, reset) => {",
            "    let filter = d => d.submit_date.getFullYear() === year;",
            "",
            "    if (reset || !year) {",
            "        filter = () => true;",
            "        year = \"*\";",
            "    }",
            "",
            "    this.setState(",
            "        {",
            "            yearFilter: filter,",
            "            year: year",
            "        },",
            "        () => this.reportUpdateUpTheChain()",
            "    );",
            "};",
            "}",
            "```",
            "",
            "`updateYearFilter` is a callback we pass into `ControlRow`. When a user picks a",
            "year, their action triggers this function.",
            "",
            "When that happens, we create a new partial filter function. The `App` component",
            "uses it inside a `.filter` call like you saw earlier. We have to return `true`",
            "for elements we want to keep and `false` for elements we don't.",
            "",
            "Comparing `submit_date.getFullYear()` with `year` achieves that.",
            "",
            "The `reset` argument lets us reset filters back to defaults. Enables users to",
            "unselect options.",
            "",
            "When we have the `year` and `filter`, we update component state with",
            "`this.setState`. This triggers a re-render and calls `reportUpdateUpTheChain`",
            "afterwards. Great use-case for the little known setState callback :smiley:",
            "",
            "`reportUpdateUpTheChain` then calls `this.props.updateDataFilter`, which is a",
            "callback method on `App`. We defined it earlier – it needs a new filter method",
            "and a `filteredBy` dictionary.",
            "",
            "```{caption=\"reportUpdateUpTheChain method\"}",
            "// src/components/Controls/index.js",
            "class Controls extends React.Component {",
            "// ...",
            "reportUpdateUpTheChain() {",
            "    window.location.hash = [",
            "        this.state.year || \"*\"",
            "    ].join(\"-\");",
            "",
            "    this.props.updateDataFilter(",
            "        (filters => {",
            "            return d =>",
            "                filters.yearFilter(d)",
            "        })(this.state),",
            "        {",
            "            year: this.state.year",
            "        }",
            "    );",
            "}",
            "}",
            "```",
            "",
            "Building the filter method looks tricky because we're composing multiple",
            "functions. The new arrow function takes a dictionary of filters as an argument",
            "and returns a new function that `&&`s them all. We invoke it immediately with",
            "`this.state` as the argument.",
            "",
            "It looks silly when there's just one filter, but I promise it makes sense.",
            "",
            "### Render",
            "",
            "Great, we have the filter logic. Let's render those rows of controls we've been",
            "talking about.",
            "",
            "```{.javascript caption=\"Render the year ControlRow\"}",
            "// src/components/Controls/index.js",
            "class Controls extends React.Component {",
            "// ...",
            "render() {",
            "    const { data } = this.props;",
            "",
            "    const years = new Set(data.map(d => d.submit_date.getFullYear()));",
            "",
            "    return (",
            "        <div>",
            "            <ControlRow",
            "                data={data}",
            "                toggleNames={Array.from(years.values())}",
            "                picked={this.state.year}",
            "                updateDataFilter={this.updateYearFilter}",
            "            />",
            "        </div>",
            "    );",
            "}",
            "}",
            "```",
            "",
            "Once more, this is generalized code used for a single example: the `year`",
            "filter.",
            "",
            "We build a `Set` of distinct years in our dataset, then render a `ControlRow`",
            "using props to give it our `data`, a set of `toggleNames`, a callback to update",
            "the filter, and which entry is `picked` right now. Also known as the controlled",
            "component pattern, it enables us to maintain the data-flows-down,",
            "events-bubble-up architecture.",
            "",
            "If you don't know about `Set`s, they're an ES6 data structure that ensures",
            "every entry is unique. Just like a mathematical set. They're pretty fast.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 3: Build ControlRow component",
          "lectureLines": [
            "",
            "## Step 3: Build ControlRow component",
            "",
            "Let's build the `ControlRow` component. It renders a row of controls and",
            "ensures only one at a time is selected.",
            "",
            "We'll start with a stub and go from there.",
            "",
            "```{.javascript caption=\"ControlRow stub\"}",
            "// src/components/Controls/ControlRow.js",
            "import React from \"react\";",
            "",
            "import Toggle from \"./Toggle\";",
            "",
            "class ControlRow extends React.Component {",
            "makePick = (picked, newState) => {",
            "",
            "};",
            "",
            "_addToggle(name) {",
            "}",
            "",
            "render() {",
            "    const { toggleNames } = this.props;",
            "}",
            "}",
            "",
            "export default ControlRow;",
            "```",
            "",
            "We start with imports, big surprise, then make a stub with 3 methods. Can you",
            "guess what they are?",
            "",
            "- `makePick` is the `Toggle` click callback",
            "- `_addToggle` is a rendering helper method",
            "- `render` renders a row of buttons",
            "",
            "```{.javascript caption=\"makePick implementation\"}",
            "// src/components/Controls/ControlRow.js",
            "",
            "class ControlRow extends React.Component {",
            "makePick = (picked, newState) => {",
            "    // if newState is false, we want to reset",
            "    this.props.updateDataFilter(picked, !newState);",
            "};",
            "```",
            "",
            "`makePick` calls the data filter update and passes in the new value and whether",
            "we want to unselect. Pretty simple right?",
            "",
            "```{.javascript caption=\"Render a row of controls\"}",
            "// src/components/Controls/ControlRow.js",
            "class ControlRow extends React.Component {",
            "// ...",
            "",
            "_addToggle(name) {",
            "    let key = `toggle-${name}`,",
            "        label = name;",
            "",
            "    if (this.props.capitalize) {",
            "        label = label.toUpperCase();",
            "    }",
            "",
            "    return (",
            "        <Toggle",
            "            label={label}",
            "            name={name}",
            "            key={key}",
            "            value={this.props.picked === name}",
            "            onClick={this.makePick}",
            "        />",
            "    );",
            "}",
            "",
            "render() {",
            "    const { toggleNames } = this.props;",
            "",
            "    return (",
            "        <div className=\"row\">",
            "            <div className=\"col-md-12\">",
            "                {toggleNames.map(name => this._addToggle(name))}",
            "            </div>",
            "        </div>",
            "    );",
            "}",
            "}",
            "```",
            "",
            "Rendering comes in two functions: `_addToggle`, which is a helper, and",
            "`render`, which is the main render.",
            "",
            "In `render`, we set up two `div`s with Bootstrap classes. The first is a `row`,",
            "and the second is a full-width column. I tried using a column for each button,",
            "but it was annoying to manage and used too much space.",
            "",
            "Inside the divs, we map over all toggles and use `_addToggle` to render each of",
            "them.",
            "",
            "`_addToggle` renders a `Toggle` component with a `label`, `name`, `value` and",
            "`onClick` callback. The label is just a prettier version of the name, which",
            "also serves as a key in our `toggleValues` dictionary. It's going to be the",
            "`picked` attribute in `makePick`.",
            "",
            "Your browser should continue showing an error, but it should change to talking",
            "about the `Toggle` component instead of `ControlRow`.",
            "",
            "![](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/toggle-error.png)",
            "",
            "Let's build it.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 4: Build Toggle component",
          "lectureLines": [
            "",
            "## Step 4: Build Toggle component",
            "",
            "Last piece of the puzzle – the Toggle component. A button that turns on and",
            "off.",
            "",
            "```{.javascript caption=\"Toggle component\"}",
            "// src/components/Controls/Toggle.js",
            "import React from \"react\";",
            "",
            "const Toggle = ({ label, name, value, onClick }) => {",
            "let className = \"btn btn-default\";",
            "",
            "if (value) {",
            "    className += \" btn-primary\";",
            "}",
            "",
            "return (",
            "    <button className={className} onClick={() => onClick(name, !value)}>",
            "        {label}",
            "    </button>",
            ");",
            "};",
            "",
            "export default Toggle;",
            "```",
            "",
            "Import React to enable JSX and make a functional `Toggle` component. It's fully",
            "controlled and takes event handlers as callbacks in props. No need for a class.",
            "",
            "We set up a Bootstrap classname: `btn` and `btn-default` make an element look",
            "like a button, the conditional `btn-primary` makes it blue. If you're not",
            "familiar with Bootstrap classes, you should check",
            "[their documentation](https://getbootstrap.com/).",
            "",
            "Then we render a `<button>` tag and, well, that's it. A row of year filters",
            "appears in the browser. `onClick` passes",
            "",
            "![A row of year filters](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/year-filter-row.png)",
            "",
            "Click on a button and the `onClick` handler passes a toggle'd value to its",
            "parent via the `onClick` callback. This triggers an update in `Controls`, which",
            "calls `reportUpdateUpTheChain`, which in turn updates state in `App` and",
            "re-renders our button with the new value toggling its color on or off.",
            "",
            "If that didn't work, consult this",
            "[diff on GitHub](https://github.com/Swizec/react-d3js-step-by-step/commit/a45c33e172297ca1bbcfdc76733eae75779ebd7f).",
            ""
          ]
        },
        {
          "lectureTitle": "Step 5: Add US state and Job Title filters",
          "lectureLines": [
            "",
            "## Step 5: Add US state and Job Title filters",
            "",
            "With all that done, we can add two more filters: US states and job titles. Our",
            "`App` component is already set up to use them, so we just have to add them to",
            "the `Controls` component.",
            "",
            "We'll start with the `render` method, then handle the parts I said earlier",
            "would look repetitive.",
            "",
            "```{.javascript caption=\"Adding two more rows to Controls\"}",
            "// src/components/Controls/index.js",
            "class Controls extends Component {",
            "// ...",
            "render() {",
            "    const { data } = this.props;",
            "",
            "    const years = new Set(data.map(d => d.submit_date.getFullYear())),",
            "          // Insert the line(s) between here...",
            "          jobTitles = new Set(data.map(d => d.clean_job_title)),",
            "          USstates = new Set(data.map(d => d.USstate));",
            "          // ...and here.",
            "",
            "    return (",
            "        <div>",
            "            <ControlRow data={data}",
            "                        toggleNames={Array.from(years.values())}",
            "                        picked={this.state.year}",
            "                        updateDataFilter={this.updateYearFilter}",
            "                        />",
            "",
            "        // Insert the line(s) between here...",
            "            <ControlRow data={data}",
            "                        toggleNames={Array.from(jobTitles.values())}",
            "                        picked={this.state.jobTitle}",
            "                        updateDataFilter={this.updateJobTitleFilter} />",
            "",
            "            <ControlRow data={data}",
            "                        toggleNames={Array.from(USstates.values())}",
            "                        picked={this.state.USstate}",
            "                        updateDataFilter={this.updateUSstateFilter}",
            "                        capitalize=\"true\" />",
            "            // ...and here.",
            "        </div>",
            "    )",
            "}",
            "}",
            "```",
            "",
            "Ok, this part is plenty repetitive, too.",
            "",
            "We created new sets for `jobTitles` and `USstates`, then rendered two more",
            "`ControlRow` elements with appropriate attributes. They get `toggleNames` for",
            "building the buttons, `picked` to know which is active, an `updateDataFilter`",
            "callback, and we tell US states to render capitalized.",
            "",
            "The implementations of those `updateDataFilter` callbacks follow the same",
            "pattern as `updateYearFilter`.",
            "",
            "```{.javascript caption=\"new updateDataFilter callbacks\"}",
            "// src/components/Controls/index.js",
            "",
            "class Controls extends React.Component {",
            "state = {",
            "    yearFilter: () => true,",
            "    jobTitleFilter: () => true,",
            "    USstateFilter: () => true,",
            "    year: \"*\",",
            "    USstate: \"*\",",
            "    jobTitle: \"*\"",
            "};",
            "",
            "updateJobTitleFilter = (title, reset) => {",
            "    let filter = d => d.clean_job_title === title;",
            "",
            "    if (reset || !title) {",
            "        filter = () => true;",
            "        title = \"*\";",
            "    }",
            "",
            "    this.setState(",
            "        {",
            "            jobTitleFilter: filter,",
            "            jobTitle: title",
            "        },",
            "        () => this.reportUpdateUpTheChain()",
            "    );",
            "};",
            "",
            "updateUSstateFilter = (USstate, reset) => {",
            "    let filter = d => d.USstate === USstate;",
            "",
            "    if (reset || !USstate) {",
            "        filter = () => true;",
            "        USstate = \"*\";",
            "    }",
            "",
            "    this.setState(",
            "        {",
            "            USstateFilter: filter,",
            "            USstate: USstate",
            "        },",
            "        () => this.reportUpdateUpTheChain()",
            "    );",
            "};",
            "",
            "// ..",
            "}",
            "",
            "export default Controls;",
            "```",
            "",
            "Yes, they're basically the same as `updateYearFilter`. The only difference is a",
            "changed `filter` function and using different keys in `setState()`.",
            "",
            "Why separate functions then? No need to get fancy. It would've made the code",
            "harder to read.",
            "",
            "Our last step is to add these new keys to the `reportUpdateUpTheChain`",
            "function.",
            "",
            "```{.javascript caption=\"Add new filters to main state update\"}",
            "// src/components/Controls/index.js",
            "",
            "class Controls extends React.Component {",
            "reportUpdateUpTheChain() {",
            "    this.props.updateDataFilter(",
            "        (filters => {",
            "            return d =>",
            "                filters.yearFilter(d) &&",
            "                filters.jobTitleFilter(d) &&",
            "                filters.USstateFilter(d);",
            "        })(this.state),",
            "        {",
            "            USstate: this.state.USstate,",
            "            year: this.state.year,",
            "            jobTitle: this.state.jobTitle",
            "        }",
            "    );",
            "}",
            "```",
            "",
            "We add them to the filter condition with `&&` and expand the `filteredBy`",
            "argument.",
            "",
            "Two more rows of filters show up.",
            "",
            "![All the filters](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/all-filters.png)",
            "",
            ":clap:",
            "",
            "Again, if it didn't work, consult",
            "[the diff on GitHub](https://github.com/Swizec/react-d3js-step-by-step/commit/a45c33e172297ca1bbcfdc76733eae75779ebd7f).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Make it work in the real world",
      "lectures": [
        {
          "lectureTitle": "Add rudimentary routing",
          "lectureLines": [
            "",
            "# Rudimentary routing",
            "",
            "Imagine this. A user finds your dataviz, clicks around, and finds an",
            "interesting insight. They share it with their friends.",
            "",
            "_\"See! I was right! This link proves it.\"_",
            "",
            "_\"Wtf are you talking about?\"_",
            "",
            "_\"Oh… uuuuh… you have to click this and then that and then you'll see. I'm",
            "legit winning our argument.\"_",
            "",
            "_\"Wow! Kim Kardashian just posted a new snap with her dog.\"_",
            "",
            "Let's help our intrepid user out and make our dataviz linkable. We should store",
            "the current `filteredBy` state in the URL and be able to restore from a link.",
            "",
            "There are many ways to achieve this.",
            "[ReactRouter](https://github.com/ReactTraining/react-router) comes to mind, but",
            "the quickest is to implement our own rudimentary routing. We'll add some logic",
            "to manipulate and read the URL hash.",
            "",
            "The easiest place to put this logic is next to the existing filter logic inside",
            "the `Controls` component. Better places exist from a \"low-down components",
            "shouldn't play with global state\" perspective, but that's okay.",
            "",
            "```{.javascript caption=\"Add rudimentary routing\"}",
            "// src/components/Controls/index.js",
            "",
            "class Controls extends React.Component {",
            "// ..",
            "",
            "componentDidMount() {",
            "    let [year, USstate, jobTitle] = window.location.hash",
            "        .replace(\"#\", \"\")",
            "        .split(\"-\");",
            "",
            "    if (year !== \"*\" && year) {",
            "        this.updateYearFilter(Number(year));",
            "    }",
            "    if (USstate !== \"*\" && USstate) {",
            "        this.updateUSstateFilter(USstate);",
            "    }",
            "    if (jobTitle !== \"*\" && jobTitle) {",
            "        this.updateJobTitleFilter(jobTitle);",
            "    }",
            "}",
            "",
            "// ..",
            "reportUpdateUpTheChain() {",
            "    window.location.hash = [",
            "        this.state.year || \"*\",",
            "        this.state.USstate || \"*\",",
            "        this.state.jobTitle || \"*\"",
            "    ].join(\"-\");",
            "",
            "    // ..",
            "}",
            "```",
            "",
            "We use the `componentDidMount` lifecycle hook to read the URL when `Controls`",
            "first render on our page. Presumably when the page loads, but it could be",
            "later. It doesn't really matter _when_, just that we update our filter the",
            "first chance we get.",
            "",
            "`window.location.hash` gives us the hash part of the URL. We clean it up and",
            "split it into three parts: `year`, `USstate`, and `jobTitle`. If the URL is",
            "`localhost:3000/#2013-CA-manager`, then `year` becomes `2013`, `USstate`",
            "becomes `CA`, and `jobTitle` becomes `manager`.",
            "",
            "We make sure each value is valid and use our existing filter update callbacks",
            "to update the visualization. Just as if it was the user clicking a button.",
            "",
            "In `reportUpdateUpTheChain`, we make sure to update the URL hash. Assigning a",
            "new value to `window.location.hash` takes care of that.",
            "",
            "You should see the URL changing as you click around.",
            "",
            "![Changing URL hash](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/changing-url.png)",
            "",
            "There's a bug with some combinations in 2013 that don't have enough data. It",
            "will go away when we use the full dataset.",
            "",
            "If it doesn't work at all, consult the",
            "[diff on Github](https://github.com/Swizec/react-d3js-step-by-step/commit/2e8fb070cbee5f1e942be8ea42fa87c6c0379a9b).",
            ""
          ]
        },
        {
          "lectureTitle": "Prep your app for launch",
          "lectureLines": [
            "",
            "# Prep for launch",
            "",
            "You've built a great visualization. Congratz! Time to put it online and share",
            "with the world.",
            "",
            "To do that, we're going to use Github Pages because our app is a glorified",
            "static website. There's no backend, so all we need is something to serve our",
            "HTML, JavaScript, and CSV. Github Pages is perfect for that.",
            "",
            "It's free, works well with `create-react-app`, and can withstand a lot of",
            "traffic. You don't want to worry about traffic when your app gets to the top of",
            "HackerNews or Reddit.",
            "",
            "There are a few things we should take care of:",
            "",
            "- setting up deployment",
            "- adding a page title",
            "- adding some copy",
            "- Twitter and Facebook cards",
            "- an SEO tweak for search engines",
            "- use the full dataset",
            "",
            "## Setting up deployment",
            "",
            "You'll need a Github repository. If you're like me, writing all this code",
            "without version control or off-site backup made you nervous, so you already",
            "have one.",
            "",
            "For everyone else, head over to Github, click the green `New Repository` button",
            "and give it a name. Then copy the commands it gives you and run them in your",
            "console.",
            "",
            "It should be something like this:",
            "",
            "```{caption=\"Put code on github\"}",
            "$ git init",
            "$ git commit -m \"My entire dataviz\"",
            "$ git remote add origin git://github ...",
            "$ git push origin -u master",
            "```",
            "",
            "If you've been git-ing locally without pushing, then you only need the",
            "`git remote add` and `git push origin` commands. This puts your code on Github.",
            "Great idea for anything you don't want to lose if your computer craps out.",
            "",
            "Every Github repository comes with an optional Github Pages setup. The easiest",
            "way for us to use it is with the `gh-pages` npm module.",
            "",
            "Install it with this command:",
            "",
            "```{caption=\"Install gh-pages helper\"}",
            "$ npm install --save-dev gh-pages",
            "```",
            "",
            "Add two lines to package.json:",
            "",
            "```{.json caption=\"Update package.json\"}",
            "// package.json",
            "// Insert the line(s) between here...",
            "\"homepage\": \"https://<your username>.github.io/<your repo name>\"",
            "// ...and here.",
            "\"scripts\": {",
            "  \"eject\": \"react-scripts eject\",",
            "  // Insert the line(s) between here...",
            "  \"deploy\": \"npm run build && gh-pages -d build\"",
            "  // ...and here.",
            "}",
            "```",
            "",
            "We've been ignoring the `package.json` file so far, but it's a pretty important",
            "file. It specifies all of our project's dependencies, meta data for npm, and",
            "scripts that we run locally. This is where `npm start` is defined, for",
            "instance.",
            "",
            "We add a `deploy` script that runs `build` and a `gh-pages` deploy, and we",
            "specify a `homepage` URL. The URL tells our build script how to set up URLs for",
            "static files in `index.html`.",
            "",
            "Github Pages URLs follow the schema:",
            "",
            "```",
            "https://<your username>.github.io/<your repo name>",
            "```",
            "",
            "For instance, mine is:",
            "",
            "```",
            "https://swizec.github.io/react-d3js-step-by-step",
            "```",
            "",
            "Yours will be different.",
            "",
            "You can deploy with `npm run deploy`. Make sure all changes are committed.",
            "We'll do it together when we're done setting up.",
            ""
          ]
        },
        {
          "lectureTitle": "Twitter and Facebook cards and SEO",
          "lectureLines": [
            "",
            "## Twitter and Facebook cards and SEO",
            "",
            "How your visualization looks on social media matters more than you'd think.",
            "Does it have a nice picture, a great description, and a title, or does it look",
            "like a random URL? Those things matter.",
            "",
            "And they're easy to set up. No excuse.",
            "",
            "We're going to poke around `public/index.html` for the first time. Add titles,",
            "Twitter cards, Facebook Open Graph things, and so on.",
            "",
            "```{.html caption=\"Basic SEO\"}",
            "<!-- public/index.html -->",
            "<head>",
            "<!-- //... -->",
            "// Insert the line(s) between here...",
            "<title>How much does an H1B in tech pay?</title>",
            "",
            "<link rel=\"canonical\"",
            "      href=\"https://swizec.github.io/react-d3js-step-by-step/\" />",
            "// ...and here.",
            "</head>",
            "<body>",
            "<!-- //... -->",
            "<div id=\"root\">",
            "    // Insert the line(s) between here...",
            "     <h2>The average H1B in tech pays $86,164/year</h2>",
            "",
            "   <p class=\"lead\">",
            "         Since 2012 the US tech industry has sponsored 176,075",
            "         H1B work visas. Most of them paid <b>$60,660 to $111,668</b>",
            "         per year (1 standard deviation). <span>The best city for",
            "         an H1B is <b>Kirkland, WA</b> with an average individual",
            "         salary <b>$39,465 above local household median</b>.",
            "         Median household salary is a good proxy for cost of",
            "         living in an area.</span>",
            "     </p>",
            "    // ...and here.",
            "</div>",
            "</body>",
            "```",
            "",
            "We add a `<title>` and a `canonical` URL. Titles configure what shows up in",
            "browser tabs, and the canonical URL is there to tell search engines that this",
            "is the main and most important URL for this piece of content. This is",
            "especially important for when people copy-paste your stuff and put it on other",
            "websites.",
            "",
            "In the body root tag, we add some copy-pasted text from our dataviz. You'll",
            "recognize the default title and description.",
            "",
            "As soon as React loads, these get overwritten with our preloader, but it's good",
            "to have them here for any search engines that aren't running JavaScript yet. I",
            "think both Google and Bing are capable of running our React app and getting",
            "text from there, but you never know.",
            "",
            "To make social media embeds look great, we'll use",
            "[Twitter card](https://dev.twitter.com/cards/types/summary-large-image) and",
            "[Facebook OpenGraph](https://developers.facebook.com/docs/sharing/webmasters)",
            "meta tags. I think most other websites just rely on these since most people use",
            "them. They go in the `<head>` of our HTML.",
            "",
            "```{.javascript caption=\"Add FB and Twitter cards\"}",
            "<!-- public/index.html -->",
            "<head>",
            "<meta property=\"og:locale\" content=\"en_US\" />",
            "<meta property=\"og:type\" content=\"article\" />",
            "<meta property=\"og:title\"",
            "      content=\"The average H1B in tech pays $86,164/year\" />",
            "<meta property=\"og:description\"",
            "      content=\"Since 2012 the US tech industry has sponsored",
            "176,075 H1B work visas. With an average individual salary",
            "up to $39,465 above median household income.\" />",
            "<meta property=\"og:url\"",
            "      content=\"https://swizec.github.io/react-d3js-step-by-step\" />",
            "<meta property=\"og:site_name\" content=\"A geek with a hat\" />",
            "<meta property=\"article:publisher\"",
            "      content=\"https://facebook.com/swizecpage\" />",
            "<meta property=\"fb:admins\" content=\"624156314\" />",
            "<meta property=\"og:image\"",
            "      content=\"https://swizec.github.io/react-d3js-step-by-step/thumbnail.png\" />",
            "",
            "<meta name=\"twitter:card\" content=\"summary_large_image\" />",
            "<meta name=\"twitter:description\"",
            "      content=\"Since 2012 the US tech industry has sponsored",
            "176,075 H1B work visas. With an average individual salary",
            "up to $39,465 above median household income.\" />",
            "<meta name=\"twitter:title\"",
            "      content=\"The average H1B in tech pays $86,164/year\" />",
            "<meta name=\"twitter:site\" content=\"@swizec\" />",
            "<meta name=\"twitter:image\"",
            "      content=\"https://swizec.github.io/react-d3js-step-by-step/thumbnail.png\" />",
            "<meta name=\"twitter:creator\" content=\"@swizec\" />",
            "</head>",
            "```",
            "",
            "Much of this code is repetitive. Both Twitter and Facebook want the same info,",
            "but they're stubborn and won't read each other's formats. You can copy all of",
            "this, but make sure to change `og:url`, `og:site_name`, `article:publisher`,",
            "`fb:admins`, `og:image`, `twitter:site`, `twitter:image`, and",
            "`twitter:creator`. They're specific to you.",
            "",
            "The URLs you should change to the `homepage` URL you used above. The rest you",
            "should change to use your name and Twitter/Facebook handles. I'm not sure _why_",
            "it matters, but I'm sure it does.",
            "",
            "An important one is `fb:admin`. It enables admin features on your site if you",
            "add their social plugins. If you don't, it probably doesn't matter.",
            "",
            "You're also going to need a thumbnail image. I made mine by taking a screenshot",
            "of the final visualization, then I put it in `public/thumbnail.png`.",
            "",
            "Now when somebody shares your dataviz on Twitter or Facebook, it's going to",
            "look something like this:",
            "",
            "![Dataviz Twitter card](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/twitter-card.png)",
            ""
          ]
        },
        {
          "lectureTitle": "Use full dataset",
          "lectureLines": [
            "",
            "## Full dataset",
            "",
            "One more step left. Use the whole dataset!",
            "",
            "Go into `src/DataHandling.js` and change one line:",
            "",
            "```{.javascript caption=\"Switch to full dataset\"}",
            "// Example 4",
            "//",
            "// src/DataHandling.js",
            "export const loadAllData = (callback = _.noop) => {",
            "d3.queue()",
            "    // ..",
            "    // Delete the line(s) between here...",
            "    .defer(d3.csv, 'data/h1bs-2012-2016-shortened.csv', cleanSalary)",
            "    // ...and here.",
            "    // Insert the line(s) between here...",
            "    .defer(d3.csv, 'data/h1bs-2012-2016.csv', cleanSalary)",
            "    // ...and here.",
            "```",
            "",
            "We change the file name, and that's that. Full dataset locked and loaded.",
            "Dataviz ready to go.",
            ""
          ]
        },
        {
          "lectureTitle": "Launch! :rocket:",
          "lectureLines": [
            "",
            "# Launch!",
            "",
            "To show your dataviz to the world, make sure you've committed all changes.",
            "Using `git status` shows you anything you missed.",
            "",
            "Then run:",
            "",
            "```",
            "$ npm run deploy",
            "```",
            "",
            "You'll see a bunch of output:",
            "",
            "![Deploy output](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/npm-run-deploy.png)",
            "",
            "And you're ready to go. Your visualization is online. My URL is",
            "`https://swizec.github.io/react-d3js-step-by-step/`, yours is different. Visit",
            "it and you'll see what you've built. Share it and others will see it too.",
            "",
            "![Deployed dataviz](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/deployed-dataviz.png)",
            "",
            "Congratz! You've built and deployed your first React and D3 dataviz. You're",
            "amazing \\\\o/",
            "",
            "Thanks for following along with the meaty part of my book. You're now well",
            "equipped to build cool things.",
            "",
            "In the next section, we're going to look at building animations.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Animation",
      "lectures": [
        {
          "lectureTitle": "Intro",
          "lectureLines": [
            "",
            "# Animation",
            "",
            "Welcome to the animation section. This is where the real fun begins. Demos that",
            "look cool, impress your friends, and sound good at the dinner table.",
            "",
            "At my dinner table at least ...",
            "",
            "![](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/puking-rainbows.png)",
            "",
            "You already know how React and D3 work together, so these examples are going to",
            "go faster. You know that we're using React for rendering SVG and D3 for",
            "calculating props. You know how to make your dataviz interactive and how to",
            "handle oodles of data.",
            "",
            "Now you're going to learn how to make it dance. Smooth transitions between",
            "states, complex animations, interacting with users in real-time. 60 frames per",
            "second, baby!",
            "",
            "Animation looks like this in a nutshell:",
            "",
            "- render something",
            "- change it 60 times per second",
            "",
            "When that happens humans perceive smooth motion. You can go as low as 24 frames",
            "per second, like old TVs used to, but that often looks jaggeddy on modern",
            "monitors.",
            "",
            "You're about to learn two different approaches to building these animations.",
            "Using game loops and using transitions.",
            "",
            "1. Game loops give you more control",
            "2. Transitions are easier to implement",
            "",
            "We're starting with an example or two in CodeSandbox, then building some bigger",
            "stuff. No more big huge projects like the",
            "[tech salary visualization](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6888870#salary-visualization),",
            "though. Takes too long to set up and doesn't focus on animation.",
            ""
          ]
        },
        {
          "lectureTitle": "Using a game loop for rich animation",
          "lectureLines": [
            "",
            "# Using a game loop for rich animation {#game-loop}",
            "",
            "Game loops are fun! They're my favorite. They even sound fun: \"game loop\".",
            "Doesn't it sound fun to go build a game loop? Maybe it's because I've always",
            "used game loops when building something fun to play with.",
            "",
            "At its core, a game loop is an infinite loop where each iteration renders the",
            "next frame of your animation.",
            "",
            "The concept comes from the video game industry. At some point they realized",
            "that building game engines is much easier when you think about each frame as",
            "its own static representation of your game state.",
            "",
            "You take every object in the game and render it. Then you throw it all away,",
            "make small adjustments, and render again.",
            "",
            "This turns out to be both faster to run and easier to implement than diffing",
            "scenes and figuring out what moves and what doesn't. Of course as you get more",
            "objects on the screen it becomes silly to re-render the immovable background",
            "every time.",
            "",
            "But you don't have to worry about that. That's React's job.",
            "",
            "React can figure out a diff between hierarchical representations of your scene",
            "and re-render the appropriate objects.",
            "",
            "That's a hard engineering problem, but you can think of it this way:",
            "",
            "1. Render a DOM from state",
            "2. Change some values in state",
            "3. Trigger a re-render",
            "",
            "Make those state changes fast enough and you get 60 frames per second. The hard",
            "part then becomes thinking about your movement as snapshots in time.",
            "",
            "When something speeds up, what does that mean for changes in its position?",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "A bouncy ball game loop example",
      "lectures": [
        {
          "lectureTitle": "Begin bouncy ball",
          "lectureLines": [
            "",
            "## A bouncing ball game loop example",
            "",
            "Let's get our feet wet with my favorite childhood example: a bouncing ball.",
            "",
            "I must have built dozens of them back in my",
            "[Turbo Pascal](https://en.wikipedia.org/wiki/Turbo_Pascal) days using",
            "[BGI](https://en.wikipedia.org/wiki/Borland_Graphics_Interface). Endless",
            "afternoons playing with different parameters in my bouncy ball examples.",
            "",
            "Yes, those Turbo Pascal and BGI are from the 80's. No, I'm not that old. I",
            "started young and with old equipment. Coding for DOS is easier when you're a",
            "kid than coding for Windows 95.",
            "",
            "Here is a screenshot of our bouncing ball:",
            "",
            "![Bouncing Ball](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/bouncing-ball.png)",
            "",
            "Exciting, isn't it? Took me five tries to catch it. Future examples will look",
            "better as screenshots, I promise.",
            "",
            "I suggest you follow along on CodeSandbox. Here's one I prepared for you",
            "earlier: [click me](https://codesandbox.io/s/rrwz67jl04)",
            ""
          ]
        },
        {
          "lectureTitle": "Step 1: stub out App and Ball",
          "lectureLines": [
            "",
            "### Step 1: stub out App and Ball",
            "",
            "We start with a skeleton: An `App` component rendering a `BouncingBall`",
            "component inside an SVG, and a `Ball` component.",
            "",
            "```{.javascript caption=\"App component\"}",
            "// index.js",
            "import React from \"react\";",
            "import { render } from \"react-dom\";",
            "",
            "import BouncingBall from \"./BouncingBall\";",
            "",
            "const App = () => (",
            "  <div>",
            "<svg width=\"800\" height=\"600\">",
            "  <BouncingBall max_h={600} />",
            "</svg>",
            "  </div>",
            ");",
            "",
            "render(<App />, document.getElementById(\"root\"));",
            "```",
            "",
            "App imports dependencies, imports `BouncingBall`, renders it all into a `root`",
            "DOM node. CodeSandbox gives us most of this code by default.",
            "",
            "```{.javascript caption=\"Ball component\"}",
            "// Ball.js",
            "import React from \"react\";",
            "",
            "const Ball = ({ x, y }) => <circle cx={x} cy={y} r=\"5\" />;",
            "",
            "export default Ball;",
            "```",
            "",
            "We're calling it a ball, but eh it's a just a circle. You can make this more",
            "fun if you want. Right now it's a black SVG circle that renders at a specified",
            "`x, y` coordinate with a radius of `5` pixels.",
            "",
            "It's these coordinates that we're going to play with to make the ball drop and",
            "bounce. Each time, React is going to re-render and move our ball to its new",
            "coordinates. Because we change them so quickly, it looks like the ball is",
            "animated. You'll see.",
            "",
            "---",
            "",
            "Those are the boring components. The animation game loop fun happens in",
            "`BouncingBall`.",
            ""
          ]
        },
        {
          "lectureTitle": "Stub out BouncingBall",
          "lectureLines": [
            "",
            "### Step 2: Stub out BouncingBall",
            "",
            "We encapsulate everything in this component so that `App` doesn't have to know",
            "about the details of our animation. App declaratively renders a bouncing ball",
            "and that's it.",
            "",
            "```{.javascript caption=\"BouncingBall component stub\"}",
            "import React, { Component } from \"react\";",
            "import * as d3 from \"d3\";",
            "",
            "class BouncingBall extends Component {",
            "  constructor() {",
            "super();",
            "",
            "this.state = {",
            "  y: 5,",
            "  vy: 0",
            "};",
            "  }",
            "",
            "  componentDidMount() {",
            "// start game loop",
            "this.timer = d3.timer(this.gameLoop);",
            "  }",
            "",
            "  componentWillUnmount() {",
            "// stop loop",
            "this.timer.stop();",
            "  }",
            "",
            "  gameLoop = () => {",
            "// move ball by vy",
            "// increase vy to accelerate",
            "  }",
            "",
            "  render() {",
            "// render Ball at position y",
            "return <g />;",
            "  }",
            "}",
            "",
            "export default BouncingBall;",
            "```",
            "",
            "Nothing renders yet and we're set up to get started.",
            "",
            "We start with default state: vertical position `y=5`, vertical speed",
            "`vy:open_mouth:`.",
            "",
            "`componentDidMount` fires off a d3 timer and `componentWillUnmount` stops it so",
            "we don't have unwanted code running in the background. The timer calls",
            "`this.gameLoop` every 16 milliseconds, which translates to about 60 frames per",
            "second.",
            "",
            "D3 timers work like JavaScript's own `setInterval`, but their implementation is",
            "more robust. They use `requestAnimationFrame` to save computer resources when",
            "possible, and default to `setInterval` otherwise.",
            "",
            "Unlike `setInterval` timers are also synced so their frames match up, can be",
            "restarted, stopped, etc. You should default to favoring `d3.timer` over",
            "`setInterval` or hacking your own `requestAnimationFrame` implementation.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 3: Rendering",
          "lectureLines": [
            "",
            "### Step 3: Rendering",
            "",
            "To render our Ball we have to tweak BouncingBall's `render` method. A small",
            "change. Try it yourself first.",
            "",
            "```{.javascript caption=\"Render ball\"}",
            "// BouncingBall.js",
            "import Ball from \"./Ball\"",
            "",
            "class App extends Component {",
            "  // ...",
            "  render() {",
            "// render Ball at position y",
            "return <g><Ball x={10} y={this.state.y} /></g>",
            "  }",
            "}",
            "```",
            "",
            "Import our `Ball` component, render it at `x=10` and use `this.state.y` for the",
            "vertical coordinate.",
            "",
            "A black ball shows up on your screen. Like this:",
            "",
            "![Black ball](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/bouncing-ball.png)",
            ""
          ]
        },
        {
          "lectureTitle": "Step 4: The Game Loop",
          "lectureLines": [
            "",
            "### Step 4: The Game Loop",
            "",
            "Our game loop is already running. It's that `d3.timer` we started on component",
            "mount.",
            "",
            "What do you think we should do every time `gameLoop` is called?",
            "",
            "Move the ball. Accelerate. Bounce it back. :basketball:",
            "",
            "The physics is tricky to think about. Few students at my workshops figure this",
            "one out and that's the point: Game loop gives you control. All the control.",
            "",
            "```{.javascript caption=\"Bouncy ball at 60fps\"}",
            "// BouncingBall.js",
            "  componentDidMount() {",
            "  // start game loop",
            "  this.timer = d3.timer(this.gameLoop);",
            "  }",
            "",
            "  componentWillUnmount() {",
            "  this.timer.stop();",
            "  }",
            "",
            "  gameLoop = () => {",
            "let { y, vy } = this.state;",
            "",
            "if (y > this.props.max_h) {",
            "  vy = -vy * .87;",
            "}",
            "",
            "this.setState({",
            "  y: y + vy,",
            "  vy: vy + 0.3",
            "})",
            "  }",
            "```",
            "",
            "Our `gameLoop` method is called every 16 milliseconds give or take. Sometimes",
            "more, if the computer is busy, low on batter, or the tab is left inactive for",
            "too long",
            "",
            "Bounce physics go like this:",
            "",
            "- add vertical speed, `vy`, to position, `y`",
            "- increased `vy` by amount of acceleration",
            "- if position is more than max, bounce",
            "- bounce means invert speed",
            "- bounce means energy loss, reduce speed by 13%",
            "",
            "High school physics my friend. You might not remember.",
            "",
            "Speed tells you how much an object moves per unit of time. Our speed starts at",
            "5 pixels per frame.",
            "",
            "Acceleration tells you how much speed increases per unit of time. Gravity makes",
            "you fall 10 meters per second faster every second. Our gravity looks best at",
            "0.3 pixels per frame.",
            "",
            "Bounce is what really breaks people's brains.",
            "",
            "I think it's one of Newton's laws? Or a derivation from there. Bouncing means",
            "balls maintain the same speed, but change direction. Our wall is perpendicular",
            "to the path of travel, so the speed inverts.",
            "",
            "We add some energy loss to make the bounce more realistic.",
            "",
            "Gravity acceleration points the same downwards direction as always. Except now",
            "it's slowing down the ball instead of speeding it up.",
            "",
            "Eventually speed reaches zero and the ball starts falling again.",
            "",
            "![Magic](https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif)",
            "",
            "Here's a CodeSandbox with the",
            "[final bouncy ball code](https://codesandbox.io/s/o4vk8zkn96).",
            "",
            "Experiment with multiple balls. Start them at different heights. Play with",
            "different factors in those equations. It's fun if you're a nerd like me.",
            ""
          ]
        },
        {
          "lectureTitle": "Step 5: Correcting for time and frame drops",
          "lectureLines": [
            "",
            "### Step 5: Correcting for time and frame drops",
            "",
            "If you run the CodeSandbox a few times, you'll notice two bugs.",
            "",
            "1. Sometimes our ball gets trapped at the bottom of the bounce. We won't fix",
            "   this one; it's tricky.",
            "",
            "2. When you slow down your computer, the ball lags. That's not how things",
            "   behave in real life.",
            "",
            "We're dealing with dropped frames.",
            "",
            "Modern browsers slow down JavaScript in tabs that aren't focused, on computers",
            "running off batteries, when batteries get low… many different reasons. To make",
            "our animation silky smooth, we have to take this into account.",
            "",
            "That involves calculating how many frames we dropped and adjusting our physics.",
            "",
            "```{.javascript caption=\"Adjust for frame drops\"}",
            "// BouncingBall.js",
            "  gameLoop = () => {",
            "let { y, vy, lastFrame } = this.state;",
            "",
            "let frames = 1;",
            "",
            "if (lastFrame) {",
            "  frames = (d3.now() - lastFrame) / (1000 / 60);",
            "}",
            "",
            "for (let i = 0; i < frames; i++) {",
            "  if (y > this.props.max_h) {",
            "    vy = -vy * 0.87;",
            "  }",
            "",
            "  y = y + vy;",
            "  vy = vy + 0.3;",
            "}",
            "",
            "this.setState({",
            "  y,",
            "  vy,",
            "  lastFrame: d3.now()",
            "});",
            "  };",
            "",
            "```",
            "",
            "We add `lastFrame` to game state and set it with `d3.now()`. This gives us a",
            "high resolution timestamp that's pegged to `requestAnimationFrame`. D3",
            "guarantees that every `d3.now()` called within the same frame gets the same",
            "timestamp.",
            "",
            "`(d3.now()-lastFrame)/16` tells us how many frames were meant to have happened",
            "since last iteration. Most of the time, this value will be `1`.",
            "",
            "We use `frames` to simulate as many frames as we need in a quick loop. Run the",
            "same calculations with the same height checks. This simulates the missing",
            "frames and makes our animation look smooth.",
            "",
            "Try it out on CodeSandbox:",
            "[click me for time-fixed bouncy ball](https://codesandbox.io/s/8n3p6720wl)",
            ""
          ]
        },
        {
          "lectureTitle": "Game loop recap",
          "lectureLines": [
            "",
            "## Game loop recap",
            "",
            "You now know how to build a game loop and use it to run custom animations.",
            ":clap:",
            "",
            "- render from state",
            "- change state 60 times per second",
            "- reason about movement in snapshots",
            "- deal with dropped frames",
            "- complete control",
            "",
            "Complete control is nice, but the mental acrobatics are not. Getting game loops",
            "just right is hard.",
            "",
            "And that's why I recommend transitions in most cases. Transitions can handle",
            "all of that for you out of the box.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Use transitions for simple animation",
      "lectures": [
        {
          "lectureTitle": "Transition basics",
          "lectureLines": [
            "",
            "# Using transitions for simple animation",
            "",
            "Game loops are great for fine-grained control. And when all you need is a",
            "little flourish on user action, that's where transitions shine.",
            "",
            "No details, just keyframes.",
            "",
            "Transitions let you animate SVG elements by saying _\"I want this property to",
            "change to this new value and take this long to do so\"_.",
            "",
            "Start-end keyframes are the simplest. You define the starting position. Start a",
            "transition. Define the end position. D3 figures out the rest. Everything from",
            "calculating the perfect rate of change to match your start and end values and",
            "your duration, to _what_ to change and handling dropped frames.",
            "",
            "Quite magical.",
            "",
            "You can also sequence transitions to create complex keyframe-based animation.",
            "Each new transition definition is like a new keyframe. D3 figures out the rest.",
            "",
            "Better yet, you can use easing functions to make your animation look more",
            "natural. Make rate of change follow a mathematical curve to create smooth",
            "natural movement.",
            "",
            "You can read more about the _why_ of easing functions in Disney's",
            "[12 Basic Principles of Animation](https://en.wikipedia.org/wiki/12_basic_principles_of_animation).",
            "Bottom line is that it makes your animation feel natural.",
            "",
            "_How_ they work is hard to explain. You can grok part of it in my",
            "[Custom transition tweens](https://swizec.com/blog/silky-smooth-piechart-transitions-react-d3js/swizec/8258)",
            "article.",
            "",
            "But don't worry about it. All you have to know is that many easing functions",
            "exist. [easings.net](https://easings.net/) lists the common ones. D3 implements",
            "everything on that list.",
            "",
            "![Common easing functions](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/easings.net.png)",
            "",
            "Let's try an example: A swipe transition.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Build a simple transition component",
      "lectures": [
        {
          "lectureTitle": "A swipe transition component",
          "lectureLines": [
            "",
            "## Swipe transition {#swipe-transition}",
            "",
            "Our goal is to build a declarative component fully controlled by props. We pass",
            "in the `x` coordinate and the coordinate figures out the rest.",
            "",
            "We shouldn't care about the transition or how long it takes. That's up to the",
            "component. We just change `x`.",
            "",
            "You can see it in action",
            "[on CodeSandbox, here](https://codesandbox.io/s/618mr9r6nr). Tweak params, see",
            "what happens. Follow along as I explain how it works.",
            "",
            "![Ball on the left before you click](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/ball-swipe-left.png)",
            "![Ball on the right before you click](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/ball-swipe-right.png)",
            ""
          ]
        },
        {
          "lectureTitle": "App.js",
          "lectureLines": [
            "",
            "### App.js",
            "",
            "Like we said: the hard stuff happens inside our Ball component. That means App",
            "has render our Ball and implement a mechanism to toggle the `x` coordinate",
            "between two states: Left and right.",
            "",
            "```{.javascript caption=\"Rendering a declarative transitionable component\"}",
            "class App extends React.Component {",
            "  state = {",
            "ballLeft: true",
            "  };",
            "  ballJump = () =>",
            "this.setState({",
            "  ballLeft: !this.state.ballLeft",
            "});",
            "",
            "  render() {",
            "const { ballLeft } = this.state;",
            "return (",
            "  <div style={styles}>",
            "    <h1>D3 transitions in React 16.3 {\"\\u2728\"}</h1>",
            "    <p>Click the ball :point_down:</p>",
            "    <svg style={{ width: \"300\", height: \"300px\" }} onClick={this.ballJump}>",
            "      <Ball x={ballLeft ? 15 : 250} />",
            "    </svg>",
            "  </div>",
            ");",
            "  }",
            "}",
            "```",
            "",
            "Typical class based component:",
            "",
            "1. State holding a `ballLeft` boolean",
            "2. A method to toggle said boolean",
            "3. A render method that renders an SVG with an `onClick` event",
            "",
            "When `state.ballLeft` is true, ball renders on the left. When it's false, on",
            "the right. Left and right are hardcoded `x` coordinates.",
            "",
            "Ball component handles the rest.",
            ""
          ]
        },
        {
          "lectureTitle": "Ball.js",
          "lectureLines": [
            "",
            "### Ball.js",
            "",
            "You've rendered a ball before: It's an SVG circle. You can make it fancier, but",
            "that's not the point. The point are transitions.",
            "",
            "The way D3 transitions work with React feels like combining the blackbox and",
            "full integration approaches. Full integration for rendering, switch to blackbox",
            "for the transition, release control back to React. 🤯",
            "",
            "```{.javascript caption=\"Rendering a ball\"}",
            "class Ball extends React.PureComponent {",
            "  constructor(props) {",
            "super();",
            "this.state = {",
            "  x: props.x",
            "};",
            "  }",
            "",
            "  circleRef = React.createRef();",
            "",
            "",
            "  render() {",
            "const { x, y } = this.state;",
            "",
            "return <circle r=\"10\" cx={x} cy={10} ref={this.circleRef} />;",
            "  }",
            "}",
            "```",
            "",
            "We render a `circle` at `x` coordinate and a random `y` and give it a React",
            "ref. We'll use this ref to give control of the DOM node to D3. Just like",
            "blackbox components.",
            "",
            "The interesting part is that we use a constructor to copy our `x` prop into",
            "state. That's because we're going to use props as a sort of staging area for",
            "what we _want_ `x` to be, not what it currently is.",
            "",
            "Props change, state stays the same. React doesn't move our ball.",
            ""
          ]
        },
        {
          "lectureTitle": "Ball.js state transition",
          "lectureLines": [
            "",
            "### Ball.js state transition",
            "",
            "What does move our ball, is our transition. We do that in `componentDidUpdate`.",
            "",
            "```{.javascript caption=\"D3 transition our ball\"}",
            "  componentDidUpdate() {",
            "let el = d3.select(this.circleRef.current);",
            "",
            "el.transition()",
            "  .duration(800)",
            "  .ease(d3.easeBounceOut)",
            "  .attr(\"cx\", this.props.:satisfied:",
            "  .on(\"end\", () =>",
            "    this.setState({",
            "      x: this.props.x",
            "    })",
            "  );",
            "  }",
            "```",
            "",
            "React calls `componentDidUpdate` when props or state change. We use this as an",
            "opportunity to run a D3 transition on our DOM node.",
            "",
            "Here's what happens:",
            "",
            "1. Take the node with `d3.select`",
            "2. Start a transition with `.transition`",
            "3. Specify 800ms duration with `.duration`",
            "4. Add an easing function for that beautiful bounce effect with `.ease`",
            "5. Define which attributes are changing with `.attr`",
            "6. Use `.on(\"end\")` to sync React worldview with reality after transition ends",
            "",
            "What's great about D3 transitions is that D3 figures everything for you. You",
            "can throw as many attributes at a transition as you want. The attributes can be",
            "as complex as you can imagine.",
            "",
            "D3's interpolation methods will figure it out for you. Numbers, strings,",
            "colors, it all works great.",
            "",
            "After a transition is done, I like to sync React's worldview with what the",
            "transition changed. It's not strictly required but it can sometimes lead to",
            "React freaking out that you moved an element.",
            "",
            "Play around. Try adding some more transitions. Make the ball move diagonally.",
            "Make it go right then down. It's fun. :blush:",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Enter-update-exit animation",
      "lectures": [
        {
          "lectureTitle": "Enter-update-exit animation intro",
          "lectureLines": [
            "",
            "# Enter/update/exit animation {#enter-exit-animation}",
            "",
            "Now that you know how to use transitions, it's time to take it up a notch.",
            "Enter/exit animations.",
            "",
            "Enter/exit animations are the most common use of transitions. They're what",
            "happens when a new element enters or exits the picture. For example: in",
            "visualizations like this famous",
            "[Nuclear Detonation Timeline](https://www.youtube.com/watch?v=LLCF7vPanrY) by",
            "Isao Hashimoto. Each new Boom! flashes to look like an explosion.",
            "",
            "I don't know how Hashimoto did it, but with React & D3, you'd do it with",
            "enter/exit transitions.",
            "",
            "Another favorite of mine is this",
            "[animated alphabet](https://bl.ocks.org/mbostock/3808234) example by Mike",
            "Bostock, the creator of D3, that showcases enter/update/exit transitions.",
            "",
            "That's what we're going to build: An animated alphabet. New letters fall down",
            "and are green, updated letters move right or left, deleted letters are red and",
            "fall down.",
            "",
            "You can play with a more advanced version",
            "[here](https://swizec.github.io/react-d3-enter-exit-transitions/). Same",
            "principle as the alphabet, but it animates what you type.",
            "",
            "![Typing animation screenshot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/typing-screenshot.png)",
            "",
            "We're building the alphabet version because the",
            "[string diffing algorithm](https://swizec.com/blog/animated-string-diffing-with-react-and-d3/swizec/6952)",
            "is a pain to explain. I learned that the hard way when giving workshops on",
            "React and D3…",
            "",
            "![String diffing algorithm sketch](https://cdn.staticaly.com/gh/hsribei/react-d3js-es6-ebook/024f7e0ae8547f5288f61bc442370f0f689d84eb/manuscript/resources/images/es6v2/string-diffing.jpg)",
            "",
            "See?",
            "",
            "Easy on paper, but the code is long and weird. That, or I'm bad at implementing",
            "it. Either way, it's too tangential to explain here. You can",
            "[read the article about it](https://swizec.com/blog/animated-string-diffing-with-react-and-d3/swizec/6952).",
            ""
          ]
        },
        {
          "lectureTitle": "Build a declarative animated alphabet",
          "lectureLines": [
            "",
            "## Animated alphabet {#animated-alphabet}",
            "",
            "Our goal is to render a random subset of the alphabet. Every time the set",
            "updates, old letters transition out, new letters transition in, and updated",
            "letters transition into a new position.",
            "",
            "We need two components:",
            "",
            "- `Alphabet`, which creates random lists of letters every 1.5 seconds, then",
            "  maps through them to render `Letter` components",
            "- `Letter`, which renders an SVG text element and takes care of its own",
            "  enter/update/exit transitions",
            "",
            "You can see the full code on GitHub",
            "[here](https://github.com/Swizec/react-d3-enter-exit-transitions/blob/master/src/components/Alphabet.jsx).",
            ""
          ]
        },
        {
          "lectureTitle": "Project setup",
          "lectureLines": [
            "",
            "### Project setup",
            "",
            "To get started you'll need a project. Either start one with `create-react-app`",
            "or in CodeSandbox. Either will work.",
            "",
            "You'll need a base App component that renders an SVG with an `<Alphabet>`",
            "child. Our component is self-contained so that's all you need.",
            "",
            "Something like this :point_down:",
            "",
            "```{.javascript caption=\"Base App component\"}",
            "import Alphabet from './components/Alphabet`;",
            "",
            "const App = () => (",
            "  <svg width=\"100%\" height=\"600\">",
            "<Alphabet x={32} y={300} />",
            "  </svg>",
            ")",
            "```",
            "",
            "I follow the convention of putting components in a `src/components` directory.",
            "You don't have to.",
            "",
            "Remember to install dependencies: d3 and react-transition-group",
            ""
          ]
        },
        {
          "lectureTitle": "The Alphabet component",
          "lectureLines": [
            "",
            "### The Alphabet component",
            "",
            "The `Alphabet` component holds a list of letters in component state and renders",
            "a collection of `Letter` components in a loop.",
            "",
            "We start with a skeleton like this:",
            "",
            "```{.javascript caption=\"Alphabet skeleton\"}",
            "// src/components/Alphabet.js",
            "import React from \"react\";",
            "import * as d3 from \"d3\";",
            "import { TransitionGroup } from \"react-transition-group\";",
            "",
            "import Letter from \"./Letter\";",
            "",
            "class Alphabet extends React.Component {",
            "static letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");",
            "state = { alphabet: [] };",
            "",
            "componentDidMount() {",
            "    // start interval",
            "}",
            "",
            "shuffleAlphabet = () => {",
            "   // generate new alphabet",
            "};",
            "",
            "render() {",
            "    let transform = `translate(${this.props.x}, ${this.props.y})`;",
            "",
            "    return (",
            "        // spit out letters",
            "    );",
            "}",
            "}",
            "",
            "export default Alphabet;",
            "```",
            "",
            "We import dependencies and define the `Alphabet` component. It keeps a list of",
            "available letters in a static `letters` property and an empty `alphabet` in",
            "component state.",
            "",
            "We'll start a `d3.interval` on `componentDidMount` and use `shuffleAlphabet` to",
            "generate alphabet subsets.",
            "",
            "To showcase enter-update-exit transitions, we create a new alphabet every",
            "second and a half. Using `d3.interval` lets us do that in a browser friendly",
            "way.",
            "",
            "```{.javascript caption=\"Alphabet game loop\"}",
            "// src/components/Alphabet/index.js",
            "componentDidMount() {",
            "    d3.interval(this.shuffleAlphabet, 1500);",
            "}",
            "",
            "shuffleAlphabet = () => {",
            "    const alphabet = d3",
            "        .shuffle(Alphabet.letters)",
            "        .slice(0, Math.floor(Math.random() * Alphabet.letters.length))",
            "        .sort();",
            "",
            "    this.setState({",
            "        alphabet",
            "    });",
            "};",
            "```",
            "",
            "Think of this as our game loop: Change alphabet state in consistent time",
            "intervals.",
            "",
            "We use `d3.interval( //.., 1500)` to call `shuffleAlphabet` every 1.5 seconds.",
            "Same as `setInterval`, but friendlier to batteries and CPUs because it pegs to",
            "`requestAnimationFrame`. On each period, we use `shuffleAlphabet` to shuffle",
            "available letters, slice out a random amount, sort them, and update component",
            "state with `setState`.",
            "",
            "This process ensures our alphabet is both random and in alphabetical order.",
            "",
            "Starting the interval in `componentDidMount` ensures it only runs when our",
            "Alphabet is on the page. In real life you should stop it on",
            "`componentWillUnmount`. Since this is a tiny experiment and we know",
            "`<Alphabet>` never unmounts without a page refresh, it's okay to skip that",
            "step.",
            ""
          ]
        },
        {
          "lectureTitle": "Declarative render for enter-exit transitions",
          "lectureLines": [
            "",
            "#### Declarative render for enter/exit transitions",
            "",
            "Our declarative enter/exit transitions start in the `render` method.",
            "",
            "```{.javascript caption=\"Letter rendering\"}",
            "// src/components/Alphabet/index.js",
            "render() {",
            "    let transform = `translate(${this.props.x}, ${this.props.y})`;",
            "",
            "    return (",
            "        <g transform={transform}>",
            "            <TransitionGroup enter={true} exit={true} component=\"g\">",
            "                {this.state.alphabet.map((d, i) => (",
            "                    <Letter letter={d} index={i} key={d} />",
            "                ))}",
            "            </TransitionGroup>",
            "        </g>",
            "    );",
            "}",
            "```",
            "",
            "An SVG transformation moves our alphabet into the specified `(x, y)` position.",
            "We map through `this.state.alphabet` inside a `<TransitionGroup>` component and",
            "render a `<Letter>` component for every letter. Each `Letter` gets a `letter`",
            "prop for the text, an `index` prop to know where it stands, and a `key` so",
            "React can tell them apart.",
            "",
            "#### The key property",
            "",
            "The key property is how React identifies components. Pick wrong, and you're",
            "gonna have a bad time. I spent many hours debugging and writing workarounds",
            "before I realized that basing my key on the index was a Bad Move™. _Obviously_,",
            "you want the letter to stay constant in each component and the index to change.",
            "",
            "That's how x-axis transitions work.",
            "",
            "You move the letter into a specific place in the alphabet. You'll see what I",
            "mean when we look at the `Letter` component.",
            ""
          ]
        },
        {
          "lectureTitle": "TransitionGroup",
          "lectureLines": [
            "",
            "#### TransitionGroup",
            "",
            "React TransitionGroup gives us coordinated control over a set of transitionable",
            "components. Each Letter is going to be a `<Transition>`, you'll see.",
            "",
            "We need TransitionGroup to gain declarative control over the enter/exit cycle.",
            "Transition components can handle transitions themselves, but they need an `in`",
            "prop to say whether they're in or out of the visualization.",
            "",
            "Flip from `false` to `true`, run an enter transition.",
            "",
            "`true` to `false`, run an exit transition.",
            "",
            "We can make this change from within our component, of course. When responding",
            "to user events for example. In our case we need that control to come from",
            "outside based on which letters exist in the `alphabet` array.",
            "",
            "`TransitionGroup` handles that for us. It automatically passes the correct `in`",
            "prop to its children based on who is and isn't being rendered.",
            "",
            "As an added bonus, we can use TransitionGroup to set a bunch of default",
            "parameters for child Transitions. Whether to use `enter` animations, `exit`",
            "animations, stuff like that. You can read",
            "[a full list in the docs](https://github.com/reactjs/react-transition-group).",
            ""
          ]
        },
        {
          "lectureTitle": "The Letter component",
          "lectureLines": [
            "",
            "### The Letter component",
            "",
            "We're ready for the component that can transition itself into and out of a",
            "visualization. Without consumers having to worry about what's going on behind",
            "the scenes :ok_hand:",
            "",
            "The skeleton for our `Letter` component looks like this:",
            "",
            "```{.javascript caption=\"Letter component skeleton\"}",
            "// src/components/Letter.js",
            "",
            "import React from \"react\";",
            "import * as d3 from \"d3\";",
            "import Transition from \"react-transition-group/Transition\";",
            "",
            "const ExitColor = \"brown\",",
            "UpdateColor = \"#333\",",
            "EnterColor = \"green\";",
            "",
            "class Letter extends React.Component {",
            "defaultState = {",
            "    y: -60,",
            "    x: this.props.index * 32,",
            "    color: EnterColor,",
            "    fillOpacity: 1e-6",
            "};",
            "state = this.defaultState;",
            "letterRef = React.createRef();",
            "",
            "onEnter = () => {",
            "    // Letter enters the visualization",
            "};",
            "",
            "onExit = () => {",
            "    // Letter drops out transition",
            "};",
            "",
            "componentDidUpdate(prevProps, prevState) {",
            "    // update transition",
            "}",
            "",
            "render() {",
            "    const { x, y, fillOpacity, color } = this.state,",
            "        { letter } = this.props;",
            "",
            "    return (",
            "        // render Transition with text",
            "    );",
            "}",
            "}",
            "",
            "export default Letter;",
            "```",
            "",
            "We start with some imports and define a `Letter` component with a default",
            "state. We keep `defaultState` in a separate value because we're going to",
            "manually reset state in some cases.",
            "",
            "A `letterRef` helps us hand over control to D3 during transitions, the",
            "`onEnter` callback handles enter transitions, `onExit` exit transitions, and",
            "`componentDidUpdate` update transitions. Render is where it call comes",
            "together.",
            "",
            "Each of these transition methods is going to follow the same approach you",
            "learned about in the swipe transition example. Render from state, transition",
            "with D3, update state to match.",
            "",
            "You can make this component more flexible by moving the various magic numbers",
            "we use into props. Default `y` offset, transition duration, colors, stuff like",
            "that. The world is your oyster my friend.",
            ""
          ]
        },
        {
          "lectureTitle": "onEnter",
          "lectureLines": [
            "",
            "#### onEnter",
            "",
            "We start with the enter transition in the `onEnter` callback.",
            "",
            "```{.javascript caption=\"Enter transition\"}",
            "// src/components/Letter.js",
            "onEnter = () => {",
            "    // Letter is entering the visualization",
            "    let node = d3.select(this.letterRef.current);",
            "",
            "    node.transition()",
            "        .duration(750)",
            "        .ease(d3.easeCubicInOut)",
            "        .attr(\"y\", 0)",
            "        .style(\"fill-opacity\", 1)",
            "        .on(\"end\", () => {",
            "            this.setState({",
            "                y: 0,",
            "                fillOpacity: 1,",
            "                color: UpdateColor",
            "            });",
            "        });",
            "};",
            "```",
            "",
            "We use `d3.select` to grab our DOM node and take control with D3. Start a new",
            "transition with `.transition()`, specify a duration, an easing function, and",
            "specify the changes. Vertical position moves to `0`, opacity changes to `1`.",
            "",
            "This creates a drop-in fade-in effect.",
            "",
            "When our transition ends, we update state with the new `y` coordinate,",
            "`fillOpacity`, and `color`.",
            "",
            "The result is an invisible letter that starts at -60px and moves into 0px and",
            "full visibility over 750 milliseconds.",
            ""
          ]
        },
        {
          "lectureTitle": "onExit",
          "lectureLines": [
            "",
            "#### onExit",
            "",
            "Our exit transition goes in the `onExit` callback.",
            "",
            "```{.javascript caption=\"Leave transition\"}",
            "// src/components/Alphabet/",
            "onExit = () => {",
            "    // Letter is dropping out",
            "    let node = d3.select(this.letterRef.current);",
            "",
            "    node.style(\"fill\", ExitColor)",
            "        .transition(this.transition)",
            "        .attr(\"y\", 60)",
            "        .style(\"fill-opacity\", 1e-6)",
            "        .on(\"end\", () => this.setState(this.defaultState));",
            "};",
            "```",
            "",
            "Same as before, we take control of the DOM, run a transition, and update state",
            "when we're done. We start with forcing our letter into a new color, then move",
            "it 60px down, transition to invisible, and reset state.",
            "",
            "But why are we resetting state instead of updating to current reality?",
            "",
            "Our components never unmount.",
            "",
            "We avoid unmounts to keep transitions smoother. Instead of unmounting, we have",
            "to reset state back to its default values.",
            "",
            "That moves the letter back into its enter state and ensures even re-used",
            "letters drop down from the top. Took me a while to tinker that one out.",
            ""
          ]
        },
        {
          "lectureTitle": "componentDidUpdate",
          "lectureLines": [
            "",
            "#### componentDidUpdate",
            "",
            "`componentDidUpdate` is our trickiest transition yet. It has two jobs:",
            "",
            "- jump existing components to correct horizontal position when a new `enter`",
            "  transition begins",
            "- transition components into new horizontal positions based on changing indexes",
            "",
            "It goes like this :point_down:",
            "",
            "```{.javascript caption=\"Update transition\"}",
            "// src/components/Alphabet/Letter.js",
            "componentDidUpdate(prevProps, prevState) {",
            "    if (prevProps.in !== this.props.in && this.props.in) {",
            "        // A new enter transition has begun",
            "        this.setState({",
            "            x: this.props.index * 32",
            "        });",
            "    } else if (prevProps.index !== this.props.index) {",
            "        // Letter is moving to a new location",
            "        let node = d3.select(this.letterRef.current),",
            "            targetX = this.props.index * 32;",
            "",
            "        node.style(\"fill\", UpdateColor)",
            "            .transition()",
            "            .duration(750)",
            "            .ease(d3.easeCubicInOut)",
            "            .attr(\"x\", targetX)",
            "            .on(\"end\", () =>",
            "                this.setState({",
            "                    x: targetX,",
            "                    color: UpdateColor",
            "                })",
            "            );",
            "    }",
            "}",
            "```",
            "",
            "When the `in` prop changes to `true`, we're starting a new enter transition on",
            "an existing component. We already moved it to the top of the visualization",
            "after exiting, but we couldn't have known its future index.",
            "",
            "A quick `setState` makes sure our letter is in the right place and `onEnter`",
            "takes care of the rest.",
            "",
            "Otherwise we check if index changed and if it has, we run a transition in much",
            "the same way as we have so far:",
            "",
            "- calculate new `targetX`",
            "- update letter color",
            "- start a transition with the usual parameters",
            "- update `x` coordinate",
            "- update state when transition ends",
            "",
            "You now have a component that knows how to run its own enter/update/exit",
            "transitions. Time to wire it all up in the `render` method.",
            ""
          ]
        },
        {
          "lectureTitle": "render",
          "lectureLines": [
            "",
            "#### render",
            "",
            "Hard work is done. Here's how you render:",
            "",
            "```{.javascript caption=\"Letter render method\"}",
            "// src/components/Alphabet/Letter.js",
            "render() {",
            "    const { x, y, fillOpacity, color } = this.state,",
            "        { letter } = this.props;",
            "",
            "    return (",
            "        <Transition",
            "            in={this.props.in}",
            "            unmountOnExit={false}",
            "            timeout={750}",
            "            onEnter={this.onEnter}",
            "            onExit={this.onExit}",
            "        >",
            "            <text",
            "                dy=\".35em\"",
            "                x={x}",
            "                y={y}",
            "                style={{",
            "                    fillOpacity: fillOpacity,",
            "                    fill: color,",
            "                    font: \"bold 48px monospace\"",
            "                }}",
            "                ref={this.letterRef}",
            "            >",
            "                {letter}",
            "            </text>",
            "        </Transition>",
            "    );",
            "}",
            "```",
            "",
            "We render a `Transition` element, which gives us the transition super powers we",
            "need to run enter/exit transitions. Update transitions work on all React",
            "components.",
            "",
            "The outside `TransitionGroup` gives us the correct `in` prop value, we just",
            "have to pass it into `Transition`. We disable `unmountOnExit` to make",
            "transitions smoother, define a `timeout` which has to match what we're using in",
            "our transitions, and define `onEnter` and `onExit` callbacks.",
            "",
            "There's a lot more to the API that we can use and you should check that out in",
            "the docs. Docs don't go into detail on everything, but if you experiment I'm",
            "sure you'll figure it out.",
            "",
            "Inside the transition we render an SVG `<text>` element rendered at an `(x, y)`",
            "position with a `color` and `fillOpacity` style. It shows a single letter taken",
            "from the `letter` prop.",
            ""
          ]
        },
        {
          "lectureTitle": "That's it :thumbsup:",
          "lectureLines": [
            "",
            "### That's it :thumbsup:",
            "",
            "Boom. We're done.",
            "",
            "![Alphabet transitions are hard to screenshot](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/alphabet-transitions.png)",
            "",
            "You can play with a more complex version of this example here:",
            "[https://swizec.github.io/react-d3-enter-exit-transitions/](https://swizec.github.io/react-d3-enter-exit-transitions/).",
            "Try typing different strings and see how the visualization reacts.",
            "",
            "The typing example uses the same Letter components to declaratively render its",
            "string, but it drives the input through your typing instead of an automatic",
            "shuffler.",
            ""
          ]
        },
        {
          "lectureTitle": "Key transition takeaways",
          "lectureLines": [
            "",
            "### Key takeaways for transitions are:",
            "",
            "- use d3 for transitions",
            "- use React to manage SVG elements",
            "- use TransitionGroup and Transition for the enter/update/exit pattern",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Animating with React, Redux, and D3",
      "lectures": [
        {
          "lectureTitle": "Redux animation intro",
          "lectureLines": [
            "",
            "# Animating with React, Redux, and d3 {#animating-react-redux}",
            "",
            "And now for some pure nerdy fun: A particle generator… or, well, as close as",
            "you can get with React and D3. You'd need WebGL for a _real_ particle",
            "generator.",
            "",
            "We're making tiny circles fly out of your mouse cursor. Works on mobile with",
            "your finger, too.",
            "",
            "To see the particle generator in action,",
            "[go here](https://swizec.github.io/react-particles-experiment/). Github won't",
            "let me host different branches, so you'll see the advanced 20,000 particle",
            "version from next chapter.",
            "",
            "We're using the",
            "[game loop](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906604#game-loop)",
            "approach to animation and Redux to store the state tree and drive changes for",
            "each frame.",
            "",
            "You can see the full code",
            "[on GitHub](https://github.com/Swizec/react-particles-experiment). I've merged",
            "the SVG and Canvas branches. Redux part is the same, some parameters differ.",
            "We're focusing on the Redux part because that's what's new.",
            "",
            "It's going to be great.",
            "",
            "{aside} Code in this example uses the `.jsx` file extension. I originally wrote",
            "it back when that was still a thing, and while I did update everything to React",
            "16+, I felt that changing filenames was unnecessary. {/aside}",
            ""
          ]
        },
        {
          "lectureTitle": "Here's how it works",
          "lectureLines": [
            "",
            "## Here's how it works",
            "",
            "We use **React to render everything**: the page, the SVG element, the particles",
            "inside. This lets us tap into React's algorithms that decide which nodes to",
            "update and when to garbage collect old nodes.",
            "",
            "Then we use some **d3 calculations and event detection**. D3 has great random",
            "generators, so we take advantage of that. D3's mouse and touch event handlers",
            "calculate coordinates relative to our SVG. We need those, but React's click",
            "handlers are based on DOM nodes, which don't correspond to `(x, y)`",
            "coordinates. D3 looks at real cursor position on screen.",
            "",
            "All **particle coordinates are in a Redux store**. Each particle also has a",
            "movement vector. The store holds some useful flags and general parameters, as",
            "well. This lets us treat animation as data transformations. I'll show you what",
            "that means.",
            "",
            "We use **actions to communicate user events** like creating particles, starting",
            "the animation, changing mouse position, and so on. On each",
            "requestAnimationFrame, we **dispatch an \"advance animation\" action**.",
            "",
            "On each action, the **reducer calculates a new state** for the whole app. This",
            "includes **new particle positions** for each step of the animation.",
            "",
            "When the store updates, **React flushes changes** via props and because",
            "**coordinates are state, the particles move**.",
            "",
            "The result is smooth animation. Just like the game loop example from before.",
            ""
          ]
        },
        {
          "lectureTitle": "Some basic terminology",
          "lectureLines": [
            "",
            "## Some basic terminology",
            "",
            "We're about to throw around some terms. You'll understand what they mean in",
            "detail after this chapter.",
            "",
            "Until then, here's a quick glossary so you don't feel lost:",
            "",
            "**The store, or the state**, is Redux state. Held globally and shared by all",
            "components. It's like the App local state from earlier chapters.",
            "",
            "**Actions** are packets of information that tell us what happened.",
            "",
            "**Reducers** are functions that take the current state and an action, and use",
            "that information to generate a new state.",
            "",
            "Got it? No worries. You will soon :smiley:",
            ""
          ]
        },
        {
          "lectureTitle": "3 presentation components",
          "lectureLines": [
            "",
            "## 3 presentation components",
            "",
            "We start with the presentation components because they're the simplest. To",
            "render a collection of particles, we need:",
            "",
            "- a stateless `Particle`",
            "- a stateless `Particles`",
            "- a class-based `App`",
            "",
            "None of them contain state, but `App` has to be a class-based component so that",
            "we can use `componentDidMount`. We need it to attach D3 event listeners.",
            "",
            "### Particle",
            "",
            "The `Particle` component is a circle. It looks like this:",
            "",
            "```{.javascript caption=\"Particle component\"}",
            "// src/components/Particles/Particle.jsx",
            "import React from 'react';",
            "",
            "const Particle = ({ x, y }) => (",
            "  <circle cx={x} cy={y} r=\"1.8\" />",
            ");",
            "",
            "export default Particle;",
            "```",
            "",
            "It takes `x` and `y` coordinates and returns an SVG circle.",
            "",
            "### Particles {#svg-particles}",
            "",
            "The `Particles` component isn't much smarter – it returns a list of circles",
            "wrapped in a grouping element, like this:",
            "",
            "```{.javascript caption=\"Particles list\"}",
            "// src/components/Particles/index.jsx",
            "import React from 'react';",
            "import Particle from './Particle';",
            "",
            "const Particles = ({ particles }) => (",
            "  <g>{particles.map(particle =>",
            "<Particle key={particle.id} {...particle} />",
            ")}",
            "  </g>",
            ");",
            "",
            "export default Particles;",
            "```",
            "",
            "Walk through the array of particles, render a Particle component for each.",
            "Declarative rendering that you've seen before :smiley:",
            "",
            "We can take an array of `{id, x, y}` objects and render SVG circles. Now comes",
            "our first fun component: the `App`.",
            "",
            "### App",
            "",
            "`App` takes care of rendering the scene and attaching d3 event listeners. It",
            "gets actions via props and ties them to mouse events. You can think of actions",
            "as callbacks that work on the global data store directly. No need to pass them",
            "through many levels of props.",
            "",
            "The rendering part looks like this:",
            "",
            "```{.javascript caption=\"App component\"}",
            "// src/components/index.jsx",
            "",
            "import React, { Component } from 'react';",
            "import { select as d3Select, mouse as d3Mouse, touches as d3Touches } from 'd3';",
            "",
            "import Particles from './Particles';",
            "import Footer from './Footer';",
            "import Header from './Header';",
            "",
            "class App extends Component {",
            "  // ..",
            "  render() {",
            "return (",
            "  <div onMouseDown={e => this.props.startTicker()} style={{overflow: 'hidden'}}>",
            "       <Header />",
            "       <svg width={this.props.svgWidth}",
            "            height={this.props.svgHeight}",
            "            ref=\"svg\"",
            "            style={{background: 'rgba(124, 224, 249, .3)'}}>",
            "           <Particles particles={this.props.particles} />",
            "       </svg>",
            "       <Footer N={this.props.particles.length} />",
            "   </div>",
            ");",
            "  }",
            "}",
            "",
            "export default App;",
            "```",
            "",
            "There's more going on, but the gist is that we return a `<div>` with a",
            "`Header`, a `Footer`, and an `<svg>`. Inside `<svg>`, we use `Particles` to",
            "render many circles. The Header and Footer components are just some helpful",
            "text.",
            "",
            "Notice that the core of our rendering function only says _\"Put all Particles",
            "here, please\"_. There's nothing about what's moved, what's new, or what's no",
            "longer needed. We don’t have to worry about that.",
            "",
            "We get a list of coordinates and naively render some circles. React takes care",
            "of the rest.",
            "",
            "Oh, and we call `startTicker()` when a user clicks on our scene. No reason to",
            "have the clock running _before_ any particles exist.",
            "",
            "#### D3 event listeners",
            "",
            "To let users generate particles, we have to wire up some functions in",
            "`componentDidMount`. That looks like this:",
            "",
            "```{.javascript caption=\"Event listeners\"}",
            "// src/components/index.jsx",
            "",
            "class App extends Component {",
            "svgWrap = React.createRef();",
            "",
            "componentDidMount() {",
            "    let svg = d3Select(this.svgWrap.current);",
            "",
            "    svg.on('mousedown', () => {",
            "        this.updateMousePos();",
            "        this.props.startParticles();",
            "    });",
            "    svg.on('touchstart', () => {",
            "        this.updateTouchPos();",
            "        this.props.startParticles();",
            "    });",
            "    svg.on('mousemove', () => {",
            "        this.updateMousePos();",
            "    });",
            "    svg.on('touchmove', () => {",
            "        this.updateTouchPos();",
            "    });",
            "    svg.on('mouseup', () => {",
            "        this.props.stopParticles();",
            "    });",
            "    svg.on('touchend', () => {",
            "        this.props.stopParticles();",
            "    });",
            "    svg.on('mouseleave', () => {",
            "        this.props.stopParticles();",
            "    });",
            "}",
            "",
            "updateMousePos() {",
            "    let [x, y] = d3Mouse(this.svgWrap.current);",
            "    this.props.updateMousePos(x, y);",
            "}",
            "",
            "updateTouchPos() {",
            "    let [x, y] = d3Touches(this.svgWrap.current)[0];",
            "    this.props.updateMousePos(x, y);",
            "}",
            "```",
            "",
            "There are several events we take into account:",
            "",
            "- `mousedown` and `touchstart` turn on particle generation",
            "- `mousemove` and `touchmove` update the mouse location",
            "- `mouseup`, `touchend`, and `mouseleave` turn off particle generation",
            "",
            "Inside our event callbacks, we use `updateMousePos` and `updateTouchPos` to",
            "update Redux state. They use `d3Mouse` and `d3Touches` to get `(x, y)`",
            "coordinates for new particles relative to our SVG element and call Redux",
            "actions passed-in via props. The particle generation step uses this data as",
            "each particle's initial position.",
            "",
            "You'll see that in the next section. I agree, it smells kind of convoluted, but",
            "it's for good reason: We need a reference to a mouse event to get the cursor",
            "position, and we want to decouple particle generation from event handling.",
            "",
            "Remember, React isn't smart enough to figure out mouse position relative to our",
            "drawing area. React knows that we clicked a DOM node.",
            "[D3 does some magic](https://github.com/d3/d3-selection/blob/master/src/mouse.js)",
            "to find exact coordinates.",
            "",
            "Touch events return lists of coordinates. One for each finger. We use only the",
            "first coordinate because shooting particles out of multiple fingers would make",
            "this example too hard.",
            "",
            "That's it for rendering and user events.",
            "[107 lines of code](https://github.com/Swizec/react-particles-experiment/blob/svg-based-branch/src/components/index.jsx).",
            ""
          ]
        },
        {
          "lectureTitle": "6 Redux Actions",
          "lectureLines": [
            "",
            "## 6 Redux Actions",
            "",
            "Redux actions are a fancy way of saying _\"Yo, a thing happened!\"_. They're",
            "functions you call to get structured metadata that's passed into Redux",
            "reducers.",
            "",
            "Our particle generator uses 6 actions:",
            "",
            "1. `tickTime` steps our animation to the next frame",
            "2. `tickerStarted` fires when everything begins",
            "3. `startParticles` fires when we hold down the mouse",
            "4. `stopParticles` fires when we release",
            "5. `updateMousePos` keeps mouse position saved in state",
            "6. `resizeScreen` saves new screen size so we know where edges lie",
            "",
            "Our actions look something like this:",
            "",
            "```{.javascript caption=\"A Redux action\"}",
            "export function updateMousePos(x, y) {",
            "return {",
            "    type: UPDATE_MOUSE_POS,",
            "    x: x,",
            "    y: y",
            "};",
            "}",
            "```",
            "",
            "A function that accepts params and returns an object with a type and meta data.",
            "Technically this is an action generator and the object is an action, but that",
            "distinction has long since been lost in the community.",
            "",
            "Actions _must_ have a `type`. Reducers use the type to decide what to do. The",
            "rest is optional.",
            "",
            "You can see",
            "[all the actions on GitHub](https://github.com/Swizec/react-particles-experiment/blob/master/src/actions/index.js).",
            "",
            "I find this to be the least elegant part of Redux. Makes sense in large",
            "applications, but way too convoluted for small apps. Simpler alternatives exist",
            "like doing it yourself with React Context.",
            ""
          ]
        },
        {
          "lectureTitle": "1 Container component",
          "lectureLines": [
            "",
            "## 1 Container component",
            "",
            "Containers are React components that talk to the Redux data store.",
            "",
            "You can think of presentation components as templates that render stuff and",
            "containers as smart-ish views that talk to controllers. Or maybe they're the",
            "controllers.",
            "",
            "Sometimes it's hard to tell. In theory presentation components render and don't",
            "think, containers communicate and don't render. Redux reducers and actions do",
            "the thinking.",
            "",
            "I'm not sure this separation is necessary in small projects.",
            "",
            "Maintaining it can be awkward and sometimes cumbersome in mid-size projects,",
            "but I'm sure it makes total sense at Facebook scale. We're using it in this",
            "project because the community has decided that's the way to go.",
            "",
            "We use the idiomatic `connect()` approach. Like this:",
            "",
            "```{.javascript caption=\"Main container component\"}",
            "// src/containers/AppContainer.jsx",
            "",
            "import { connect } from \"react-redux\";",
            "import React, { Component } from \"react\";",
            "import * as d3 from \"d3\";",
            "",
            "import App from \"../components\";",
            "import {",
            "tickTime,",
            "tickerStarted,",
            "startParticles,",
            "stopParticles,",
            "updateMousePos",
            "} from \"../actions\";",
            "",
            "class AppContainer extends Component {",
            "startTicker = () => {",
            "    const { isTickerStarted } = this.props;",
            "",
            "    if (!isTickerStarted) {",
            "        console.log(\"Starting ticker\");",
            "        this.props.tickerStarted();",
            "        d3.timer(this.props.tickTime);",
            "    }",
            "};",
            "",
            "render() {",
            "    const { svgWidth, svgHeight, particles } = this.props;",
            "",
            "    return (",
            "        <App",
            "            svgWidth={svgWidth}",
            "            svgHeight={svgHeight}",
            "            particles={particles}",
            "            startTicker={this.startTicker}",
            "            startParticles={this.props.startParticles}",
            "            stopParticles={this.props.stopParticles}",
            "            updateMousePos={this.props.updateMousePos}",
            "        />",
            "    );",
            "}",
            "}",
            "",
            "const mapStateToProps = ({",
            "generateParticles,",
            "mousePos,",
            "particlesPerTick,",
            "isTickerStarted,",
            "svgWidth,",
            "svgHeight,",
            "particles",
            "}) => ({",
            "generateParticles,",
            "mousePos,",
            "particlesPerTick,",
            "isTickerStarted,",
            "svgWidth,",
            "svgHeight,",
            "particles",
            "});",
            "",
            "const mapDispatchToProps = {",
            "tickTime,",
            "tickerStarted,",
            "startParticles,",
            "stopParticles,",
            "updateMousePos",
            "};",
            "",
            "export default connect(",
            "mapStateToProps,",
            "mapDispatchToProps",
            ")(AppContainer);",
            "```",
            "",
            "I love the smell of boilerplate in the morning. :nose:",
            "",
            "We import dependencies and define `AppContainer` as a class-based React",
            "`Component` so we have somewhere to put the D3 interval. The render method",
            "outputs our `<App>` component using a bunch of props to pass relevant actions",
            "and values.",
            "",
            "The `startTicker` method is a callback we pass into App. It runs on first click",
            "and starts the D3 interval if necessary. Each interval iteration triggers the",
            "`tickTime` action.",
            "",
            "### AppContainer talks to the store",
            "",
            "```{.javascript caption=\"The Reduxy part\"}",
            "// src/containers/AppContainer.jsx",
            "",
            "const mapStateToProps = ({",
            "generateParticles,",
            "mousePos,",
            "particlesPerTick,",
            "isTickerStarted,",
            "svgWidth,",
            "svgHeight,",
            "particles",
            "}) => ({",
            "generateParticles,",
            "mousePos,",
            "particlesPerTick,",
            "isTickerStarted,",
            "svgWidth,",
            "svgHeight,",
            "particles",
            "});",
            "",
            "const mapDispatchToProps = {",
            "tickTime,",
            "tickerStarted,",
            "startParticles,",
            "stopParticles,",
            "updateMousePos",
            "};",
            "",
            "export default connect(",
            "mapStateToProps,",
            "mapDispatchToProps",
            ")(AppContainer);",
            "```",
            "",
            "We're using the `connect()` idiom to connect our AppContainer to the Redux",
            "store. It's a higher order component that handles all the details of connection",
            "to the store and staying in sync.",
            "",
            "We pass two arguments into connect. This returns a higher order component",
            "function, which we wrap around AppContainer.",
            "",
            "The first argument is **mapStateToProps**. It accepts current state as an",
            "argument, which we immediately deconstruct into interesting parts, and returns",
            "a key:value dictionary. Each key becomes a component prop with the",
            "corresponding value.",
            "",
            "You'd often use this opportunity to run ad-hoc calculations, or combine parts",
            "of state into single props. No need for that in our case, just pass it through.",
            "",
            "#### Dispatching actions",
            "",
            "**mapDispatchToProps** is a dictionary that maps props to actions. Each prop",
            "turns into an action generator wrapped in a `store.dispatch()` call. To fire an",
            "action inside a component we just call the function in that prop.",
            "",
            "But Swiz, we're not writing key:value dictionaries, we're just listing stuff!",
            "",
            "That's a syntax supported in most modern JavaScript environments, called object",
            "literal property value shorthand. Our build system expands that",
            "`mapDispatchToProps` dictionary into something like this:",
            "",
            "```{.javascript caption=\"Compiler expands our dictionaries\"}",
            "const mapDispatchToProps = {",
            "tickTime: tickTime,",
            "tickerStarted: tickerStarted,",
            "startParticles: startParticles,",
            "stopParticles: stopParticles,",
            "updateMousePos: updateMousePos",
            "};",
            "```",
            "",
            "And you thought previous code had a lot of boilerplate ... imagine if this was",
            "how you'd do it in real life :stuck_out_tongue:",
            "",
            "`connect` wraps each of these action generators in `store.dispatch()` calls.",
            "You can pass the resulting function into any component and fire actions by",
            "calling that method.",
            "",
            "#### The Redux loop",
            "",
            "To make a change therefore, a Redux loop unfolds:",
            "",
            "1. Call our action triggerer, passed in through props",
            "2. Calls the generator, gets a `{type: ...}` object",
            "3. Dispatches that object on the store",
            "4. Redux calls the reducer",
            "5. Reducer creates new state",
            "6. Store updates triggering React's engine to flow updates through the props",
            "",
            "So that's the container. 71 lines of boilerplate pretty code.",
            "",
            "The remaining piece of the puzzle is our reducer. Two reducers in fact.",
            ""
          ]
        },
        {
          "lectureTitle": "2 Redux Reducers",
          "lectureLines": [
            "",
            "## 2 Redux Reducers",
            "",
            "With the actions firing and the drawing done, it's time to look at the business",
            "logic of our particle generator. We'll get it done in just 33 lines of code and",
            "some change.",
            "",
            "Well, it's a bunch of change. But the 33 lines that make up `CREATE_PARTICLES`",
            "and `TIME_TICK` changes are the most interesting. The rest just flips various",
            "flags.",
            "",
            "All our logic and physics goes in the reducer.",
            "[Dan Abramov says](https://redux.js.org/docs/basics/Reducers.html) to think of",
            "reducers as the function you'd put in `.reduce()`. Given a state and a set of",
            "changes, how do I create the new state?",
            "",
            "A \"sum numbers\" example would look like this:",
            "",
            "```{.javascript caption=\"Reducer concept\"}",
            "let sum = [1,2,3,4].reduce((sum, n) => sum+n, 0);",
            "```",
            "",
            "For each number, take the previous sum and add the number.",
            "",
            "Our particle generator is a more advanced version of the same concept: Takes",
            "current application state, incorporates an action, and returns new application",
            "state.",
            "",
            "Start with a default state and some D3 random number helpers.",
            "",
            "```{.javascript caption=\"Default state and constants\"}",
            "import { randomNormal } from \"d3\";",
            "",
            "const Gravity = 0.5,",
            "randNormal = randomNormal(0.3, 2),",
            "randNormal2 = randomNormal(0.5, 1.:sunglasses:;",
            "",
            "const initialState = {",
            "particles: [],",
            "particleIndex: 0,",
            "particlesPerTick: 30,",
            "svgWidth: 800,",
            "svgHeight: 600,",
            "isTickerStarted: false,",
            "generateParticles: false,",
            "mousePos: [null, null],",
            "lastFrameTime: null",
            "};",
            "```",
            "",
            "Using D3's `randomNormal` random number generator creates a better random",
            "distribution than using JavaScript's own `Math.random`. The rest is a bunch of",
            "default state :point_down:",
            "",
            "- `particles` holds an array of particles to draw",
            "- `particleIndex` defines the ID of the next generated particle",
            "- `particlesPerTick` defines how many particles we create on each",
            "  requestAnimationFrame",
            "- `svgWidth` is the width of our drawing area",
            "- `svgHeigh` is the height",
            "- `isTickerStarted` specifies whether the animation is running",
            "- `generateParticles` turns particle generation on and off",
            "- `mousePos` defines the origination point for new particles",
            "- `lastFrameTime` helps us compensate for dropped frames",
            "",
            "To manipulate all this state, we use two reducers and manually combine them.",
            "Redux does come with a `combineReducers` function, but I wanted to keep our",
            "state flat and that doesn't fit `combineReducers`'s view of how life should",
            "work.",
            "",
            "```{.javascript caption=\"Combining two reducers\"}",
            "// src/reducers/index.js",
            "",
            "// Manually combineReducers",
            "export default function(state = initialState, action) {",
            "return {",
            "    ...appReducer(state, action),",
            "    ...particlesReducer(state, action)",
            "};",
            "}",
            "```",
            "",
            "This is our reducer. It takes current `state`, sets it to `initialState` if",
            "undefined, and an action. To create new state, it spreads the object returned",
            "from `appReducer` and from `particlesReducer` into a new object. You can",
            "combine as many reducers as you want in this way.",
            "",
            "The usual `combineReducers` approach leads to nested hierarchical state. That",
            "often works great, but I wanted to keep our state flat.",
            "",
            "Lesson here is that there are no rules. You can make your reducers whatever you",
            "want. Combine them whichever way fits your use case. As long as you take a",
            "state object and an action and return a new state object.",
            "",
            "`appReducer` will handle the constants and booleans and drive the metadata for",
            "our animation. `particlesReducer` will do the hard work of generating and",
            "animating particles.",
            "",
            "### Driving the basics with appReducer",
            "",
            "Our `appReducer` handles the boring actions with a big switch statement. These",
            "are common in the Redux world. They help us decide what to do based on action",
            "type.",
            "",
            "```{.javascript caption=\"appReducer big switch\"}",
            "// src/reducers/index.js",
            "function appReducer(state, action) {",
            "switch (action.type) {",
            "    case \"TICKER_STARTED\":",
            "        return Object.assign({}, state, {",
            "            isTickerStarted: true,",
            "            lastFrameTime: new Date()",
            "        });",
            "    case \"START_PARTICLES\":",
            "        return Object.assign({}, state, {",
            "            generateParticles: true",
            "        });",
            "    case \"STOP_PARTICLES\":",
            "        return Object.assign({}, state, {",
            "            generateParticles: false",
            "        });",
            "    case \"UPDATE_MOUSE_POS\":",
            "        return Object.assign({}, state, {",
            "            mousePos: [action.x, action.y]",
            "        });",
            "    case \"RESIZE_SCREEN\":",
            "        return Object.assign({}, state, {",
            "            svgWidth: action.width,",
            "            svgHeight: action.height",
            "        });",
            "    default:",
            "        return state;",
            "}",
            "}",
            "```",
            "",
            "Gotta love that boilerplate :stuck_out_tongue:",
            "",
            "Even though we're only changing values of boolean flags and two-digit arrays,",
            "_we have to create a new state_. Redux relies on application state being",
            "immutable.",
            "",
            "Well, JavaScript doesn't have real immutability. We pretend and make sure to",
            "never change state without making a new copy first. There are libraries that",
            "give you proper immutable data structures, but that's a whole different course.",
            "",
            "We use `Object.assign({}, ...` to create a new empty object, fill it with the",
            "current state, then overwrite specific values with new ones. This is fast",
            "enough even with large state trees thanks to modern JavaScript engines.",
            "",
            "Note that when a reducer doesn't recognize an action, it has to return the same",
            "state it received. Otherwise you end up wiping state. :sweat_smile:",
            "",
            "So that's the boilerplatey state updates. Manages starting and stopping the",
            "animation, flipping the particle generation switch, and resizing our viewport.",
            "",
            "The fun stuff happens in `particleReducer`.",
            "",
            "### Driving particles with particleReducer",
            "",
            "Our particles live in an array. Each particle has an id, a position, and a",
            "vector. That tells us where to draw the particle and how to move it to its",
            "future position.",
            "",
            "On each tick of the animation we have to:",
            "",
            "1. Generate new particles",
            "2. Remove particles outside the viewport",
            "3. Move every particle by its vector",
            "",
            "We can do all that in one big reducer, like this:",
            "",
            "```{.javascript caption=\"The particles logic\"}",
            "// src/reducers/index.js",
            "function particlesReducer(state, action) {",
            "switch (action.type) {",
            "    case \"TIME_TICK\":",
            "        let {",
            "                svgWidth,",
            "                svgHeight,",
            "                lastFrameTime,",
            "                generateParticles,",
            "                particlesPerTick,",
            "                particleIndex,",
            "                mousePos",
            "            } = state,",
            "            newFrameTime = new Date(),",
            "            multiplier = (newFrameTime - lastFrameTime) / (1000 / 60),",
            "            newParticles = state.particles.slice(0);",
            "",
            "        if (generateParticles) {",
            "            for (let i = 0; i < particlesPerTick; i++) {",
            "                let particle = {",
            "                    id: state.particleIndex + i,",
            "                    x: mousePos[0],",
            "                    y: mousePos[1]",
            "                };",
            "",
            "                particle.vector = [",
            "                    particle.id % 2 ? -randNormal() : randNormal(),",
            "                    -randNormal2() * 3.3",
            "                ];",
            "",
            "                newParticles.unshift(particle);",
            "            }",
            "",
            "            particleIndex = particleIndex + particlesPerTick + 1;",
            "        }",
            "",
            "        let movedParticles = newParticles",
            "            .filter(p => {",
            "                return !(p.y > svgHeight || p.x < 0 || p.x > svgWidth);",
            "            })",
            "            .map(p => {",
            "                let [vx, vy] = p.vector;",
            "                p.x += vx * multiplier;",
            "                p.y += vy * multiplier;",
            "                p.vector[1] += Gravity * multiplier;",
            "                return p;",
            "            });",
            "",
            "        return {",
            "            particles: movedParticles,",
            "            lastFrameTime: new Date(),",
            "            particleIndex",
            "        };",
            "    default:",
            "        return {",
            "            particles: state.particles,",
            "            lastFrameTime: state.lastFrameTime,",
            "            particleIndex: state.particleIndex",
            "        };",
            "}",
            "}",
            "```",
            "",
            "That's a lot of code, I know. Let me explain :smiley:",
            "",
            "The first part takes important values out of `state`, calculates the dropped",
            "frame multiplier, and makes a new copy of the particles array with `.slice(0)`.",
            "That was the fastest way I could find.",
            "",
            "Then we generate new particles.",
            "",
            "We loop through `particlesPerTick` particles, create them at `mousePos`",
            "coordinates, and insert at the beginning of the array. In my tests that",
            "performed best. Particles get random movement vectors.",
            "",
            "This randomness is a Redux faux pas. Reducers are supposed to be functionally",
            "pure: produce the same result every time they are called with the same argument",
            "values. Randomness is impure.",
            "",
            "We don't need our particle vectors to be deterministic, so I think this is",
            "fine. Let's say our universe is stochastic instead :smile:",
            "",
            "{aside} Stochastic means that our universe/physic simulation is governed by",
            "probabilities. You can still model such a universe and reason about its",
            "behavior. A lot of real world physics is stochastic in nature. {/aside}",
            "",
            "We now have an array full of old and new particles. We remove all out-of-bounds",
            "particles with a `filter`, then walk through what's left to move each particle",
            "by its vector.",
            "",
            "To simulate gravity, we update vectors' vertical component using our `Gravity`",
            "constant. That makes particles fall down faster and faster creating a nice",
            "parabola.",
            "",
            "Our reducer is done. Our particle generator works. Our thing animates smoothly.",
            "\\\\o/",
            ""
          ]
        },
        {
          "lectureTitle": "What we learned",
          "lectureLines": [
            "",
            "## What we learned",
            "",
            "Building a particle generator in React and Redux, we made three important",
            "discoveries:",
            "",
            "1. **Redux is much faster than you'd think**. Creating a new copy of the state",
            "   tree on each animation loop sounds crazy, but it works. Most of our code",
            "   creates shallow copies, which explains the speed.",
            "2. **Adding to JavaScript arrays is slow**. Once we hit about 300 particles,",
            "   adding new ones becomes slow. Stop adding particles and you get smooth",
            "   animation. This indicates that something about creating particles is slow:",
            "   either adding to the array, or creating React component instances, or",
            "   creating SVG DOM nodes.",
            "3. **SVG is also slow**. To test the above hypothesis, I made the generator",
            "   create 3000 particles on first click. The animation speed is _terrible_ at",
            "   first and becomes okayish at around 1000 particles. This suggests that",
            "   making shallow copies of big arrays and moving existing SVG nodes around is",
            "   faster than adding new DOM nodes and array elements.",
            "   [Here's a gif](https://i.imgur.com/ug478Me.gif)",
            "",
            "---",
            "",
            "There you go: Animating with React, Redux, and D3. Kind of a new superpower",
            ":wink:",
            "",
            "Here's the recap:",
            "",
            "- React handles rendering",
            "- D3 calculates stuff, detects mouse positions",
            "- Redux handles state",
            "- element coordinates are state",
            "- change coordinates on every `requestAnimationFrame`",
            "- animation!",
            "",
            "Now let's render to canvas and push this sucker to 20,000 smoothly animated",
            "elements. Even on a mobile phone.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Speed optimizations",
      "lectures": [
        {
          "lectureTitle": "Speed intro",
          "lectureLines": [
            "",
            "# Speed optimizations",
            "",
            "Welcome to the speed optimization chapter. This is where we make our code",
            "harder to read and faster to run.",
            "",
            "You might never need any techniques discussed here.",
            "",
            "You already know how to build performant data visualization components. For 99%",
            "of applications, plain code that's easy to read and understand is faster than",
            "fast code that's hard to read.",
            "",
            "You and your team spend most of your time reading code. Optimize for that. The",
            "faster you can code, the faster your system can evolve. Leave runtime",
            "optimization to React and its ecosystem of library authors for as long as you",
            "can get away with.",
            "",
            "Do you really need to save that tenth of a second at runtime if it means an",
            "extra hour of head scratching every time there's a bug?",
            "",
            "Be honest. :wink:",
            "",
            "That said, there _are_ cases where faster code is also easier to read. And",
            "there are cases where your visualization is so massive, that you need every",
            "ounce of oomph you can get.",
            "",
            "For the most part, we're going to talk about three things:",
            "",
            "- using Canvas to speed up rendering",
            "- using React-like libraries to speed up the core rendering engine",
            "- avoiding unnecessary computation and redraws",
            "- reaching for WebGL when even Canvas isn't fast enough",
            "",
            "We'll start with Canvas because it's the best bang for buck improvement you can",
            "make.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Using canvas",
      "lectures": [
        {
          "lectureTitle": "Intro",
          "lectureLines": [
            "",
            "# Using canvas",
            "",
            "So far we've been rendering our visualizations with SVG. SVG is great because",
            "it follows a familiar structure, offers infinitely scalable vector graphics,",
            "and works everywhere. There are _some_ advanced SVG features you can't use",
            "everywhere, but the core is solid.",
            "",
            "However, SVG has a big flaw: it's slow.",
            "",
            "Anything more than a few hundred SVG nodes and your browser starts to struggle.",
            "Especially if those thousands of elements move around.",
            "",
            "A web animation panel moderator at ForwardJS once asked me, _\"But why would you",
            "want thousands of SVG elements?\"_.",
            "",
            "It was my first time participating in a panel, stage lights shining upon me, a",
            "mildly disinterested audience staring into their phones ... I bombed: _\"Errr",
            "... because you can?\"_.",
            "",
            "![](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/2018/stage_lights.jpg)",
            "",
            "What I _should_ have said was: _\"Because there have been thousands of UFO",
            "sightings, there are thousands of counties in the US, millions of taxi rides,",
            "hundreds of millions of people having this or that datapoint. And you want to",
            "show change over time.\"_",
            "",
            "That's the real answer.",
            "",
            "Sometimes, when you're visualizing data, you have a lot of data. The data",
            "changes over time. Animation is the best way to show change over time.",
            "",
            "Once upon a time, I worked on a",
            "[D3 video course](https://www.packtpub.com/web-development/mastering-d3js-video)",
            "for Packt and used UFO sightings as an example. At peak UFO sighting, right",
            "before smartphones become a thing, the animation takes up to 2 seconds to",
            "redraw a single frame.",
            "",
            "Terrible.",
            "",
            "So if SVG is slow and you need to animate thousands of elements, what are you",
            "to do? HTML5 Canvas.",
            ""
          ]
        },
        {
          "lectureTitle": "Why canvas",
          "lectureLines": [
            "",
            "## Why Canvas",
            "",
            "Unlike SVG, HTML5 Canvas lets you draw rasterized images. This means you're no",
            "longer operating at the level of shapes because you're working with pixels on",
            "the screen.",
            "",
            "With SVG and other vector formats, you tell the browser _what_ you want to",
            "render. With Canvas and other raster formats, you tell the browser _how_ you",
            "want to render. The browser doesn't know what you're doing; it gets a field of",
            "pixel colors and renders them as an image.",
            "",
            "That's much faster for computers to handle. In some cases browsers can even use",
            "hardware acceleration – the GPU – to render HTML5 Canvas elements. With a bit",
            "of care, you can do almost anything you want, even on a mobile phone.",
            "",
            "Phones these days have amazing GPUs and kind of terrible CPUs in comparison.",
            "The CPU burns more battery, works slower, warms up your phone more, etc.",
            "",
            "If SVG wasn't so easy to use, I'd almost suggest going straight to Canvas for",
            "any sort of complex animation. Mobile traffic is, what, 60% to 70% of web",
            "traffic these days?",
            ""
          ]
        },
        {
          "lectureTitle": "Isn't canvas too hard?",
          "lectureLines": [
            "",
            "## Isn't that too hard?",
            "",
            "You might think all this pixel stuff sounds complicated. We've stayed in shape",
            "and component land so far. We didn't care about any pixels or rendering",
            "details. Draw a rectangle and a wild rectangle appears.",
            "",
            "How do you know which pixel should do what when you render with Canvas?",
            "",
            "HTML5 Canvas does offer some shape primitives. It has circles and rectangles",
            "and things like that, but they suffer from the same problem that SVG does. The",
            "browser has to use your CPU to calculate those, and at around 10,000 elements,",
            "things break down.",
            "",
            "10,000 elements is still a hell of a lot more than the 3,000 or so that SVG",
            "gives you.",
            "",
            "If your app allows it, you can use sprites: Tiny images copy-pasted on the",
            "Canvas as bytestreams. I have yet to find an upper bound for those. My",
            "JavaScript became the bottleneck :smile:",
            "",
            "But I'm getting ahead of myself. We'll talk about sprites later.",
            ""
          ]
        },
        {
          "lectureTitle": "The trouble with Canvas",
          "lectureLines": [
            "",
            "## The trouble with HTML5 Canvas",
            "",
            "The tricky thing with HTML5 Canvas is that the API is low level and that canvas",
            "is flat. As far as your JavaScript and React code are concerned, it's a flat",
            "image. It could be anything.",
            "",
            "The lack of structure makes it difficult to detect clicks on elements,",
            "interactions between shapes, when something covers something else, how the user",
            "interacts with your stuff and so on Anything that requires understanding what's",
            "rendered.",
            "",
            "You have to move most of that logic into your data store and manually keep",
            "track.",
            "",
            "As you can imagine, this becomes cumbersome. And you still can't detect user",
            "interaction because all you get is _\"User clicked on coordinate (x, y). Have",
            "fun.\"_",
            "",
            "At the same time, the low level API makes abstractions difficult. You can't",
            "create components for \"this is a map\" or \"histogram goes here\". You're always",
            "down to circles and rectangles and basic shapes.",
            "",
            "Your code soon looks like the D3.js spaghetti we tried to avoid in the first",
            "place.",
            ""
          ]
        },
        {
          "lectureTitle": "Declarative Canvas with Konva and react-konva",
          "lectureLines": [
            "",
            "# Declarative HTML5 Canvas with Konva and react-konva",
            "",
            "Enter [Konva](https://konvajs.github.io) and react-konva. All the benefits of",
            "declarative code, but rendered on the canvas.",
            "",
            "I'm gonna let Anton Lavrenov, the author of Konva, explain:",
            "",
            "> Konva is an HTML5 Canvas JavaScript framework that enables high performance",
            "> animations, transitions, node nesting, layering, filtering, caching, event",
            "> handling for desktop and mobile applications, and much more.",
            "",
            "> You can draw things onto the stage, add event listeners to them, move them,",
            "> scale them, and rotate them independently from other shapes to support high",
            "> performance animations, even if your application uses thousands of shapes.",
            "> Served hot with a side of awesomeness.",
            "",
            "That.",
            "",
            "It's exactly what we need to push our animated React apps to thousands of",
            "elements without spending too much time thinking about the _how_ of rendering.",
            "Best leave the hairy details to somebody else.",
            "",
            "Let's try out two examples:",
            "",
            "1. Pushing our particle generator to 20,000 elements",
            "2. An n-body collision simulator built with MobX",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Smooth animation with 20,000+ elements",
      "lectures": [
        {
          "lectureTitle": "A particle generator pushed to the max",
          "lectureLines": [
            "",
            "## A particle generator pushed to 20,000 elements with Canvas {#canvas-react-redux}",
            "",
            "Our",
            "[SVG-based particle generator](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906668#animating-react-redux)",
            "caps out at a few thousand elements. Animation becomes slow as times between",
            "iterations of our game loop increase.",
            "",
            "Old elements leave the screen and get pruned faster than we can create new",
            "ones. This creates a natural upper limit to how many elements we can push into",
            "the page.",
            "",
            "We can render many more elements if we take out SVG and use HTML5 Canvas",
            "instead. I was able to push the code up to almost 20,000 smoothly animated",
            "elements. Then JavaScript became the bottleneck.",
            "",
            "Well, I say JavaScript was the bottleneck, but monitor size plays a role too.",
            "It goes up to 20,000 on my laptop screen, juuuust grazes 30,000 on my large",
            "desktop monitor, and averages about 17,000 on my iPhone 5SE.",
            "",
            "Friends with newer laptops got it up to 35,000.",
            "",
            "You can see it in action hosted on",
            "[Github pages](https://swizec.github.io/react-particles-experiment/).",
            "",
            "We're keeping most of our existing code. The real changes happen in",
            "`src/components/index.jsx`, where a Konva stage replaces the `<svg>` element,",
            "and in `src/components/Particles.jsx`, where we change what we render. There's",
            "a small tweak in the reducer to generate more particles per tick.",
            "",
            "You should go into your particle generator directory, install Konva and",
            "react-konva, and then make the changes below. Trying things out is better than",
            "just reading my code :wink:",
            "",
            "```{caption=\"Install Konva\"}",
            "$ npm install --save konva react-konva",
            "```",
            "",
            "{aside} react-konva is a thin wrapper on Konva itself. There's no need to think",
            "about it as its own thing. For the most part, you can go into the Konva docs,",
            "read about something, and it Just Works™ in react-konva. {/aside}",
            ""
          ]
        },
        {
          "lectureTitle": "Prepare canvas layer",
          "lectureLines": [
            "",
            "### Preparing a canvas layer",
            "",
            "Our changes start in `src/components/index.jsx`. We have to throw away the",
            "`<svg>` element and replace it with a Konva stage.",
            "",
            "You can think of a Konva stage as a Canvas element with a bunch of helper",
            "methods attached. Some of them Konva uses internally; others are exposed as an",
            "API. Functions like exporting to an image file, detecting intersections, etc.",
            "",
            "```{.javascript caption=\"Import Konva and set the stage\"}",
            "// src/components/index.jsx",
            "",
            "// ...",
            "import { Stage } from 'react-konva';",
            "",
            "// ...",
            "class App extends Component {",
            "// ..",
            "render() {",
            "    return (",
            "        // ..",
            "                 <Stage width={this.props.svgWidth} height={this.props.svgHeight}>",
            "                     <Particles particles={this.props.particles} />",
            "",
            "                 </Stage>",
            "",
            "             </div>",
            "             <Footer N={this.props.particles.length} />",
            "         </div>",
            "    );",
            "}",
            "}",
            "```",
            "",
            "We import `Stage` from `react-konva`, then use it instead of the `<svg>`",
            "element in the `render` method. It gets a `width` and a `height`.",
            "",
            "Inside, we render the `Particles` component. It's going to create a Konva layer",
            "and use low-level Canvas methods to render particles as sprites.",
            ""
          ]
        },
        {
          "lectureTitle": "Use sprites for max redraw speed",
          "lectureLines": [
            "",
            "### Using sprites for max redraw speed",
            "",
            "Our",
            "[SVG-based Particles](https://swizec1.teachable.com/courses/react-for-data-visualization/lectures/6906670#svg-particles)",
            "component was simple. Iterate through a list of particles, render a",
            "`<Particle>` component for each.",
            "",
            "We're going to completely rewrite that. Our new approach goes like this:",
            "",
            "0. Cache a sprite on `componentDidMount`",
            "1. Clear canvas",
            "1. Redraw all particles",
            "1. Repeat",
            "",
            "Because the new approach renders a flat image, and because we don't care about",
            "interaction with individual particles, we can get rid of the `Particle`",
            "component. The unnecessary layer of nesting was slowing us down.",
            "",
            "The new `Particles` component looks like this:",
            "",
            "```{.javascript caption=\"Sprite-based Particles component\"}",
            "// src/components/Particles.jsx",
            "",
            "import React, { Component } from 'react';",
            "import { FastLayer } from 'react-konva';",
            "",
            "class Particles extends Component {",
            "layerRef = React.createRef();",
            "",
            "componentDidMount() {",
            "    this.canvas = this.layerRef.current.canvas._canvas;",
            "    this.canvasContext = this.canvas.getContext('2d');",
            "",
            "    this.sprite = new Image();",
            "    this.sprite.src = 'https://i.imgur.com/m5l6lhr.png';",
            "}",
            "",
            "drawParticle(particle) {",
            "    let { x, y } = particle;",
            "",
            "    this.canvasContext.drawImage(this.sprite, 0, 0, 128, 128, x, y, 15, 15);",
            "}",
            "",
            "componentDidUpdate() {",
            "    let particles = this.props.particles;",
            "",
            "    console.time('drawing');",
            "    this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);",
            "",
            "    for (let i = 0; i < particles.length; i++) {",
            "        this.drawParticle(particles[i]);",
            "    }",
            "    console.timeEnd('drawing');",
            "}",
            "",
            "render() {",
            "    return (",
            "        <FastLayer ref={this.layerRef} listening=\"false\" />",
            "    );",
            "}",
            "}",
            "",
            "export default Particles;",
            "```",
            "",
            "40 lines of code is a lot all at once. Let's walk through step by step.",
            "",
            "#### componentDidMount",
            "",
            "```{.javascript caption=\"componentDidMount method\"}",
            "// src/components/Particles.jsx",
            "",
            "// ...",
            "componentDidMount() {",
            "this.canvas = this.refs.layer.canvas._canvas;",
            "this.canvasContext = this.canvas.getContext('2d');",
            "",
            "this.sprite = new Image();",
            "this.sprite.src = 'https://i.imgur.com/m5l6lhr.png';",
            "}",
            "```",
            "",
            "React calls `componentDidMount` when our component first renders. We use it to",
            "set up 3 instance properties.",
            "",
            "`this.canvas` is a reference to the HTML5 Canvas element. We get it through a",
            "ref to the Konva layer, then spelunk through Konva internals to get the canvas",
            "itself. As the `_` prefix indicates, Anton Lavrenov did not intend this to be a",
            "public API.",
            "",
            "Thanks to JavaScript's permissiveness, we can use it anyway. :raised_hands:",
            "",
            "`this.canvasContext` is a reference to our canvas's",
            "[CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D).",
            "It's the interface we use to draw basic shapes, perform transformations, and so",
            "on. Context is the only part of canvas you ever interact with as a developer.",
            "",
            "Why it's not just Canvas, I don't know.",
            "",
            "`this.sprite` is a cached image. A small minion that we are going to copy-paste",
            "all over as our particle. Creating a new image object with `new Image()` and",
            "setting the `src` property downloads our sprite from the internet into browser",
            "memory.",
            "",
            "It looks like this:",
            "",
            "![Our minion particle](https://i.imgur.com/m5l6lhr.png)",
            "",
            "You might think it's unsafe to copy references to rendered elements into",
            "component properties like that, but it's okay. Our render function always",
            "renders the same thing, so the reference never changes. It just makes our code",
            "cleaner.",
            "",
            "Should our component unmount and re-mount, React will call `componentDidMount`",
            "again and update our reference.",
            "",
            "#### drawParticle",
            "",
            "```{.javascript caption=\"drawParticle code\"}",
            "// src/components/Particles.jsx",
            "",
            "// ...",
            "drawParticle(particle) {",
            "let { x, y } = particle;",
            "",
            "this.canvasContext.drawImage(this.sprite, 0, 0, 128, 128, x, y, 15, 15);",
            "}",
            "```",
            "",
            "`drawParticle` draws a single particle on the canvas. It gets coordinates from",
            "the `particle` argument and uses `drawImage` to copy our sprite into position.",
            "",
            "We use the whole sprite, corner `(0, 0)` to corner `(128, 128)`. That's how big",
            "our sprite is. And we copy it to position `(x, y)` with a width and height of",
            "`15` pixels.",
            "",
            "`drawImage` is the fastest method I've found to put pixels on canvas. I don't",
            "know why it's so fast, but here's a",
            "[helpful benchmark](https://jsperf.com/canvas-drawimage-vs-putimagedata/3) so",
            "you can see for yourself.",
            "",
            "#### componentDidUpdate",
            "",
            "```{.javascript caption=\"componentDidUpdate code\"}",
            "// src/components/Particles.jsx",
            "",
            "// ...",
            "componentDidUpdate() {",
            "let particles = this.props.particles;",
            "",
            "console.time('drawing');",
            "this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);",
            "",
            "for (let i = 0; i < particles.length; i++) {",
            "    this.drawParticle(particles[i]);",
            "}",
            "console.timeEnd('drawing');",
            "}",
            "```",
            "",
            "`componentDidUpdate` is where the magic happens. React calls this lifecycle",
            "method every time our list of particles changes. _After_ the `render` method.",
            "",
            "Just like the D3 blackbox approach, we move rendering out of the `render`",
            "method and into `componentDidUpdate`.",
            "",
            "Here's how it works:",
            "",
            "1. `this.canvasContext.clearRect` clears the entire canvas from coordinate",
            "   `(0, 0)` to coordinate `(width, height)`. We delete everything and make the",
            "   canvas transparent.",
            "2. We iterate our `particles` list with a `for` loop and call `drawParticle` on",
            "   each element.",
            "",
            "Clearing and redrawing the canvas is faster than moving individual particles.",
            "For loops are faster than `.map` or any other form of iteration. I tested. A",
            "lot.",
            "",
            "Open your browser console and see how long each frame takes to draw. The",
            "`console.time` - `console.timeEnd` pair measures how long it takes your code to",
            "get from `time` to `timeEnd`. You can have as many of these timers running as",
            "you want as long as you give them different names.",
            "",
            "#### render",
            "",
            "```{.javascript caption=\"render code\"}",
            "// src/components/Particles.jsx",
            "",
            "// ...",
            "render() {",
            "return (",
            "    <FastLayer ref={this.layerRef} listening=\"false\" />",
            ");",
            "}",
            "```",
            "",
            "After all that work, our `render` method is quite short.",
            "",
            "We render a Konva `FastLayer`, give it a `ref` and turn off `listening` for",
            "mouse events. That makes the fast layer even faster.",
            "",
            "Ideas for this combination of settings came from Konva's official",
            "[performance tips](https://konvajs.github.io/docs/performance/All_Performance_Tips.html)",
            "documentation. This makes sense when you think about it.",
            "",
            "A `FastLayer` is faster than a `Layer`. It's in the name. Ignoring mouse events",
            "means you don't have to keep track of elements. It reduces computation.",
            "",
            "This was empirically the fastest solution with the most particles on screen.",
            ""
          ]
        },
        {
          "lectureTitle": "But why so many elements?",
          "lectureLines": [
            "",
            "### But why, Swizec?",
            "",
            "I'm glad you asked. This was a silly example. I devised the experiment because",
            "at my first React+D3 workshop somebody asked, _\"What if we have thousands of",
            "datapoints, and we want to animate all of them?\"_. I didn't have a good answer.",
            "",
            "Now I do. You put them in Canvas. You drive the animation with a game loop.",
            "You're good.",
            "",
            "You can even do it as an overlay. Have an SVG for your graphs and charts,",
            "overlay with a transparent canvas for your high speed animation.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Build a small interactive canvas game",
      "lectures": [
        {
          "lectureTitle": "Simulating billiards with MobX, Canvas, and Konva",
          "lectureLines": [
            "",
            "## Build a declarative billiards simulation with MobX, Canvas, and Konva",
            "",
            "![Billiards game](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/billiards-start.png)",
            "",
            "We're building a small game. You have 11 glass balls – marbles, if you will.",
            "Grab one, throw it at the others, watch them bounce around. There is no score,",
            "but it looks cool, and it's a fun way to explore how Konva and React give you",
            "interactive Canvas features.",
            "",
            "We're using React and Konva to render our 11 marbles on an HTML5 Canvas",
            "element, MobX to drive the animation loop, and D3 to help with collision",
            "detection. Because this example is declarative, we can split it into two parts:",
            "",
            "- Part 1: Rendering the marbles",
            "- Part 2: Building the physics",
            "",
            "You can see the finished",
            "[code on Github](https://github.com/Swizec/declarative-canvas-react-konva) and",
            "play around with a",
            "[hosted version](https://swizec.github.io/declarative-canvas-react-konva/) of",
            "the code you're about to build.",
            "",
            "I know this example comes late in the book, and you're feeling like you know",
            "all there is to React and visualizations. You can think of this example as",
            "practice. Plus it's a good way to learn the basics of MobX.",
            ""
          ]
        },
        {
          "lectureTitle": "Decorators",
          "lectureLines": [
            "",
            "### Decorators",
            "",
            "Before we begin, let me tell you about decorators.",
            "",
            "MobX embraces them to make its API easier to use. You can use MobX without",
            "decorators, but decorators make it better.",
            "",
            "A couple years ago, decorators got very close to becoming an official spec,",
            "then got held back. I don't know _why_, but they're a great feature whose",
            "syntax is unlikely to change. So even if MobX has to change its implementation",
            "when decorators do land in the JavaScript spec, you're not likely to have to",
            "change anything.",
            "",
            "You can think of decorators as function wrappers. Instead of code like this:",
            "",
            "```{.javascript caption=\"Decoratorless function wrapping\"}",
            "inject('store', ({ store }) => <div>A thing with {store.value}</div>);",
            "```",
            "",
            "You can write the same code like this:",
            "",
            "```{.javascript caption=\"Function wrapping with decorators\"}",
            "@inject('store')",
            "({ store }) => <div>A thing with {store.value}</div>",
            "```",
            "",
            "Not much of a difference, but it becomes better looking when you work with",
            "classes or combine multiple decorators. That's when they shine. No more",
            "`})))}))` at the end of your functions.",
            "",
            "By the way, `inject` is to MobX much like `connect` is to Redux. I'll explain",
            "in a bit.",
            ""
          ]
        },
        {
          "lectureTitle": "Part 0: Some setup",
          "lectureLines": [
            "",
            "### Part 0: Some setup",
            "",
            "Because decorators aren't in the JavaScript spec, we have to tweak how we start",
            "our project. We can still use `create-react-app`, but there's an additional",
            "step.",
            "",
            "You should start a new project like this:",
            "",
            "```{caption=\"Create the billiards game project\"}",
            "$ create-react-app billiards-game --scripts-version custom-react-scripts",
            "```",
            "",
            "This creates a new directory with a full setup for React. Just like you're used",
            "to.",
            "",
            "The addition of `--scripts-version custom-react-scripts` employs @kitze's",
            "[custom-react-scripts](https://github.com/kitze/custom-react-scripts) project",
            "to give us more configuration options. Like the ability to enable decorators.",
            "",
            "We enable them in the `.env` file. Add this line:",
            "",
            "```{caption=\"Add to .env settings\"}",
            "// billiards-game/.env",
            "// ...",
            "REACT_APP_DECORATORS=true",
            "```",
            "",
            "No installation necessary. I think `custom-react-scripts` uses the",
            "`transform-decorators-legacy` Babel plugin behind the scenes. It's",
            "pre-installed, and we enable it with that `.env` change.",
            "",
            "Before we begin, you should install some other dependencies as well:",
            "",
            "```{caption=\"Install libraries\"}",
            "$ npm install --save konva react-konva mobx mobx-react \\",
            "d3-timer d3-scale d3-quadtree",
            "```",
            "",
            "This gives you Konva, MobX, and the parts of D3 that we need. You're now ready",
            "to build the billiards game.",
            ""
          ]
        },
        {
          "lectureTitle": "A quick MobX primer",
          "lectureLines": [
            "",
            "### A quick MobX primer",
            "",
            "Explaining MobX in detail is beyond the scope of this book. You can learn it by",
            "osmosis as you follow the code in our billiards example.",
            "",
            "That said, here's a quick rundown of the concepts we're using.",
            "",
            "MobX is based on reactive programming. There are values that are observable and",
            "functions that react when those values change. MobX ensures only the minimal",
            "possible set of observers is triggered on every change.",
            "",
            "So, we have:",
            "",
            "`@observable` – a property whose changes observers subscribe to `@observer` – a",
            "component whose `render()` method observes values `@computed` – a method whose",
            "value can be fully derived from observables `@action` – a method that changes",
            "state, analogous to a Redux reducer `@inject` – a decorator that injects global",
            "stores into a component's props",
            "",
            "That's all you need to know. Once your component is an `@observer`, you never",
            "have to worry about _what_ it's observing. MobX ensures it reacts to changes in",
            "values used during rendering.",
            "",
            "Making your component an observer and injecting the global store is the same as",
            "using `connect` in Redux. It gives your component access to your state, and it",
            "triggers a re-render when something changes.",
            "",
            "Importantly, it _doesn't_ trigger a re-render when something that the component",
            "isn't using changes. That little tidbit is what makes many other reactive",
            "libraries difficult to use.",
            ""
          ]
        },
        {
          "lectureTitle": "Part 1: Rendering our marbles",
          "lectureLines": [
            "",
            "### Part 1: Rendering our marbles",
            "",
            "Our marbles render on Canvas using Konva. Each marble is its own sprite",
            "rendered as a Konva element. This makes it easier to implement user and marble",
            "interactions.",
            "",
            "Rendering happens in 3 components:",
            "",
            "- `App` holds everything together",
            "- `MarbleList` renders a list of marbles",
            "- `Marble` renders an individual marble",
            "",
            "We're also using 2 MobX stores:",
            "",
            "- `Sprite` to load the marble sprite and define coordinates within",
            "- `Physics` as our physics engine",
            "",
            "`Sprite` and `Physics` are hold almost all of our game logic. A bit of drag &",
            "drop logic goes in the `Marble` component. Other than that, all our components",
            "are presentational. They get props and render stuff.",
            "",
            "Let's start with `App` and work our way down.",
            "",
            "#### App",
            "",
            "Our `App` component doesn't do much. It imports MobX stores, triggers sprite",
            "loading, and starts the game loop.",
            "",
            "```{.javascript caption=\"The App component\"}",
            "// src/components/App.js",
            "",
            "import React, { Component } from 'react';",
            "import { Provider as MobXProvider, observer } from 'mobx-react';",
            "",
            "import Physics from '../logic/Physics';",
            "import Sprite from '../logic/Sprite';",
            "import MarbleList from './MarbleList';",
            "",
            "@observer",
            "class App extends Component {",
            "componentDidMount() {",
            "    Sprite.loadSprite(() => Physics.startGameLoop());",
            "}",
            "",
            "render() {",
            "    return (",
            "        <div className=\"App\">",
            "            <div className=\"App-header\">",
            "                <h2>Elastic collisions</h2>",
            "                <p>Rendered on canvas, built with React and Konva</p>",
            "            </div>",
            "            <div className=\"App-intro\">",
            "                <MobXProvider physics={Physics} sprite={Sprite}>",
            "                    <MarbleList />",
            "                </MobXProvider>",
            "            </div>",
            "        </div>",
            "    );",
            "}",
            "}",
            "",
            "export default App;",
            "```",
            "",
            "We import our dependencies: React itself, a `MobXProvider` that's similar to",
            "the Redux provider (puts stuff in react context), both of our MobX stores which",
            "export singleton instances, and the main `MarbleList` component.",
            "",
            "`App` itself is a full featured component that initiates sprite loading in",
            "`componentDidMount` and calls `startGameLoop` when the sprite is ready. We know",
            "the sprite is ready because it calls a callback. You'll see how that works in a",
            "bit.",
            "",
            "The `render` method outputs some descriptive text and the `MarbleList`",
            "component wrapped in a `MobXProvider`. The provider puts instances of our",
            "stores – `sprite` and `physics` – in React context.",
            "",
            "This makes them available to all child components via the `inject` decorator.",
            "",
            "#### MarbleList",
            "",
            "`MarbleList` is an important component that renders the whole game, yet it can",
            "still be small and functional. Every prop it needs comes from our two stores.",
            "",
            "Like this:",
            "",
            "```{.javascript caption=\"MarbleList component\"}",
            "// src/components/MarbleList.js",
            "",
            "import React from 'react';",
            "import { inject, observer } from 'mobx-react';",
            "import { Stage, Layer, Group } from 'react-konva';",
            "",
            "import Marble from './Marble';",
            "",
            "const MarbleList = inject('physics', 'sprite')(observer(({ physics, sprite }) => {",
            "const { width, height, marbles } = physics;",
            "const { marbleTypes } = sprite;",
            "",
            "return (",
            "    <Stage width={width} height={height}>",
            "        <Layer>",
            "            <Group>",
            "                {marbles.map(({ x, y, id }, i) => (",
            "                    <Marble x={x}",
            "                            y={y}",
            "                            type={marbleTypes[i%marbleTypes.length]}",
            "                            draggable=\"true\"",
            "                            id={id}",
            "                            key={`marble-${id}`} />",
            "                ))}",
            "            </Group>",
            "        </Layer>",
            "    </Stage>",
            ");",
            "}));",
            "",
            "export default MarbleList;",
            "```",
            "",
            "We import dependencies and create a `MarbleList` component. Instead of",
            "decorators, we're using with functional composition.",
            "",
            "This shows you that MobX _can_ work without decorators, but there's no deep",
            "reason behind this choice. Over time, I've developed a preference for",
            "composition for functional components and decorators for class-based",
            "components.",
            "",
            "`inject` takes values out of context and puts them in component props.",
            "`observer` declares that our component observes those props and reacts to them.",
            "",
            "It's generally a good idea to use both `inject` and `observer` together. I have",
            "yet to find a case where you need just one or the other.",
            "",
            "The rendering itself takes values out of our stores and returns a Konva `Stage`",
            "with a single `Layer`, which contains a `Group`. Inside this group is our list",
            "of marbles.",
            "",
            "Each marble gets a position, a `type` that defines how it looks, an `id`, and a",
            "`key`. We set `draggable` to `true` so Konva knows that this element is",
            "draggable.",
            "",
            "Yes, that means we get draggability on an HTML5 Canvas without any extra",
            "effort. I like that.",
            "",
            "#### Marble",
            "",
            "Each `Marble` component renders a single marble and handles dragging and",
            "dropping. That's how you \"shoot\" marbles.",
            "",
            "Dragging and dropping creates a vector that accelerates, or shoots, the marble",
            "in a certain direction with a certain speed. Putting this logic in the",
            "component itself makes sense because the rest of our game only cares about that",
            "final vector.",
            "",
            "The Marble component looks like this:",
            "",
            "```{.javascript caption=\"Marble component\"}",
            "// src/components/Marble.js",
            "",
            "import React, { Component } from 'react';",
            "import { Circle } from 'react-konva';",
            "import { inject, observer } from 'mobx-react';",
            "",
            "@inject('physics', 'sprite') @observer",
            "class Marble extends Component {",
            "onDragStart = () => {",
            "    // set drag starting position",
            "}",
            "",
            "onDragMove = () => {",
            "    // update marble position",
            "}",
            "",
            "onDragEnd = () => {",
            "    // shoot the marble",
            "}",
            "",
            "render() {",
            "    const { sprite, type, draggable, id, physics } = this.props;",
            "    const MarbleDefinitions = sprite.marbleDefinitions;",
            "    const { x, y, r } = physics.marbles[id];",
            "",
            "    return (",
            "        <Circle x={x} y={y} radius={r}",
            "                fillPatternImage={sprite.sprite}",
            "                fillPatternOffset={MarbleDefinitions[type]}",
            "                fillPatternScale={{ x: r*2/111, y: r*2/111 }}",
            "                shadowColor={MarbleDefinitions[type].c}",
            "                shadowBlur=\"15\"",
            "                shadowOpacity=\"1\"",
            "                draggable={draggable}",
            "                onDragStart={this.onDragStart}",
            "                onDragEnd={this.onDragEnd}",
            "                onDragMove={this.onDragMove}",
            "                ref=\"circle\"",
            "                />",
            "    );",
            "}",
            "}",
            "",
            "export default Marble;",
            "```",
            "",
            "We `@inject` both stores into our component and make it an `@observer`. The",
            "`render` method takes values out of our stores and renders a Konva `Circle`.",
            "The circle uses a chunk of our sprite as its background, has a colorful shadow,",
            "and has a bunch of drag callbacks.",
            "",
            "Those callbacks make our game playable.",
            "",
            "In `onDragStart`, we store the starting position of the dragged marble. In",
            "`onDragMove`, we update the marble's position in the store, which makes it",
            "possible for other marbles to bounce off of ours while it's moving, and in",
            "`onDragEnd`, we shoot the marble.",
            "",
            "Shoot direction depends on how we dragged. That's why we need the starting",
            "positions.",
            "",
            "Drag callbacks double as MobX actions. Makes our code simpler. Instead of",
            "specifying an extra `@action` in the MobX store, we manipulate the values",
            "directly.",
            "",
            "MobX makes this okay. It keeps everything in sync and our state easy to",
            "understand. MobX even batches value changes before triggering re-renders.",
            "",
            "The code inside those callbacks is pretty mathsy.",
            "",
            "```{.javascript caption=\"Dragging callbacks\"}",
            "// src/components/Marble.js",
            "",
            "class Marble extends Component {",
            "onDragStart = () => {",
            "    const { physics, id } = this.props;",
            "",
            "    this.setState({",
            "        origX: physics.marbles[id].x,",
            "        origY: physics.marbles[id].y,",
            "        startTime: new Date()",
            "    });",
            "}",
            "",
            "onDragMove = () => {",
            "    const { physics, id } = this.props;",
            "    const { x, y } = this.refs.circle.attrs;",
            "",
            "    physics.marbles[id].x = x;",
            "    physics.marbles[id].y = y;",
            "}",
            "",
            "onDragEnd = () => {",
            "    const { physics } = this.props,",
            "          circle = this.refs.circle,",
            "          { origX, origY } = this.state,",
            "          { x, y } = circle.attrs;",
            "",
            "",
            "    const delta_t = new Date() - this.state.startTime,",
            "          dist = (x - origX) ** 2 + (y - origY) ** 2,",
            "          v = Math.sqrt(dist)/(delta_t/16); // distance per frame (= 16ms)",
            "",
            "    physics.shoot({",
            "       x: x,",
            "       y: y,",
            "       vx: (x - origX)/(v/3), // /3 is a speedup factor",
            "       vy: (y - origY)/(v/3)",
            "       }, this.props.id);",
            "}",
            "",
            "// ...",
            "}",
            "```",
            "",
            "In `onDragStart`, we store original coordinates and start time in local state.",
            "These are temporary values that nothing outside this user action cares about.",
            "Local state makes sense.",
            "",
            "We'll use them to determine how far the user dragged our marble.",
            "",
            "In `onDragMove` we update the MobX store with new coordinates for this",
            "particular marble. You might think we're messing with mutable state here, and",
            "we _might_ be, but these are MobX observables. They're wrapped in setters that",
            "ensure everything is kept in sync, changes logged, observers notified, etc.",
            "",
            "`onDragEnd` shoots the marble. We calculate drag speed and direction, then we",
            "call the `shoot()` action on the `physics` store.",
            "",
            "The math we're doing is called",
            "[euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) by the",
            "way. Distance between two points is the root of the sum of squares of distance",
            "on each axis.",
            "",
            "#### Sprite store",
            "",
            "Now that we know how rendering works, we need to load our sprite. It's an icon",
            "set I bought online. Can't remember where or who from.",
            "",
            "Here's what it looks like:",
            "",
            "![Marbles sprite](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/monster-marbles-sprite-sheets.jpg)",
            "",
            "To use this sprite, we need two things:",
            "",
            "1. A way to tell where on the image each marble lies",
            "2. A MobX store that loads the image into memory",
            "",
            "The first is a `MarbleDefinitions` dictionary. We used it in `Marble`",
            "component's render method. If you're playing along, you should copy paste this.",
            "Too much typing :smiley:",
            "",
            "```{.javascript caption=\"MarbleDefinitions dictionary\"}",
            "// src/logic/Sprite.js",
            "",
            "const MarbleDefinitions = {",
            "dino: { x: -222, y: -177, c: '#8664d5' },",
            "redHeart: { x: -222, y: -299, c: '#e47178' },",
            "sun: { x: -222, y: -420, c: '#5c96ac' },",
            "",
            "yellowHeart: { x: -400, y: -177, c: '#c8b405' },",
            "mouse: { x: -400, y: -299, c: '#7d7e82' },",
            "pumpkin: { x: -400, y: -420, c: '#fa9801' },",
            "",
            "frog: { x: -576, y: -177, c: '#98b42b' },",
            "moon: { x: -575, y: -299, c: '#b20717' },",
            "bear: { x: -576, y: -421, c: '#a88534' }",
            "};",
            "",
            "export { MarbleDefinitions };",
            "```",
            "",
            "Each type of marble has a name, a coordinate, and a color. The coordinate tells",
            "us where on the sprite image it is, and the color helps us create a nice",
            "shadow.",
            "",
            "All values painstakingly assembled by hand. You're welcome. :relieved:",
            "",
            "The MobX store that loads our sprite into memory and helps us use it looks like",
            "this:",
            "",
            "```{.javascript caption=\"Sprite store\"}",
            "// src/logic/Sprite.js",
            "",
            "import { observable, action, computed } from 'mobx';",
            "import MarbleSprite from '../monster-marbles-sprite-sheets.jpg';",
            "",
            "class Sprite {",
            "@observable sprite = null;",
            "",
            "@action loadSprite(callback = () => null) {",
            "    const sprite = new Image();",
            "    sprite.src = MarbleSprite;",
            "",
            "    sprite.onload = () => {",
            "        this.sprite = sprite;",
            "",
            "        callback();",
            "    };",
            "}",
            "",
            "@computed get marbleTypes() {",
            "    return Object.keys(MarbleDefinitions);",
            "}",
            "",
            "@computed get marbleDefinitions() {",
            "    return MarbleDefinitions;",
            "}",
            "}",
            "",
            "export default new Sprite();",
            "```",
            "",
            "A MobX store is a JavaScript object. It has `@observable` values, `@actions`,",
            "and `@computed` getters. That's all there is to it.",
            "",
            "No complicated reducers and action generators. Just JavaScript functions and",
            "properties. There's plenty going on behind the scenes, but we don't have to",
            "think about it.",
            "",
            "That's why I like MobX more than Redux. Feels easier to use 🤫",
            "",
            "In the `Sprite` store, we have an `@observable sprite`. Changing this value",
            "triggers a re-render in al `@observer` components that rely on it. In our case",
            "that's every marble.",
            "",
            "Then we have a `loadSprite` action. It creates a new `Image` object and loads",
            "the sprite. After the image loads, we set `this.sprite`.",
            "",
            "The `@computed` getters make it easier to access `MarbleDefinitions`.",
            "`marbleTypes` gives us a list of available types of marbles and",
            "`marbleDefinitions` returns the definitions object.",
            "",
            "Running your code won't work just yet. We need the physics store first because",
            "it defines marble positions.",
            ""
          ]
        },
        {
          "lectureTitle": "Part 2: Building the physics",
          "lectureLines": [
            "",
            "### Part 2: Building the physics",
            "",
            "Our whole physics engine fits into a single MobX store. It contains the",
            "collision detection, marble movement calculations, and drives the game loop",
            "itself.",
            "",
            "The general approach goes like this:",
            "",
            "1. Have an observable array of marbles",
            "2. Run a `simulationStep` on each `requestAnimationFrame` using `d3.timer`",
            "3. Change marble positions and speed",
            "4. MobX observables and observers trigger re-renders of marbles that move",
            "",
            "The",
            "[whole Physics store](https://github.com/Swizec/declarative-canvas-react-konva/blob/master/src/logic/Physics.js)",
            "is some 120 lines of code. We'll go slow. Here's the skeleton:",
            "",
            "```{.javascript caption=\"Physics skeleton\"}",
            "// src/logic/Physics.js",
            "",
            "class Physics {",
            "@observable MarbleR = 25;",
            "@observable width = 800;",
            "@observable height = 600;",
            "@observable marbles = [];",
            "timer = null;",
            "",
            "@computed get initialPositions() {",
            "",
            "}",
            "",
            "@action startGameLoop() {",
            "",
            "}",
            "",
            "@action simulationStep() {",
            "",
            "}",
            "",
            "@action shoot({ x, y, vx, vy }, i) {",
            "",
            "}",
            "}",
            "```",
            "",
            "We have four observable properties, a `timer`, a `@computed` property for",
            "initial positions, and 3 actions. `startGameLoop` starts our game,",
            "`simulationStep` holds the main logic, and `shoot` shoots a particular marble.",
            "",
            "Let's walk through.",
            "",
            "#### initialPositions",
            "",
            "```{.javascript caption=\"initialPositions function\"}",
            "// src/logic/Physics.js",
            "class Physics {",
            "// ..",
            "@computed get initialPositions() {",
            "    const { width, height, MarbleR } = this,",
            "          center = width/2;",
            "",
            "    const lines = 4,",
            "          maxY = 200;",
            "",
            "    let marbles = range(lines, 0, -1).map(y => {",
            "        if (y === lines) return [{ x: center, y: maxY,",
            "                                   vx: 0, vy: 0, r: this.MarbleR}];",
            "",
            "        const left = center - y*(MarbleR+5),",
            "              right = center + y*(MarbleR+5);",
            "",
            "        return range(left, right, MarbleR*2+5).map(x => ({",
            "            x: x,",
            "            y: maxY-y*(MarbleR*2+5),",
            "            vx: 0,",
            "            vy: 0,",
            "            r: this.MarbleR",
            "        }));",
            "    }).reduce((acc, pos) => acc.concat(pos), []);",
            "",
            "    marbles = [].concat(marbles, {",
            "        x: width/2,",
            "        y: height-150,",
            "        vx: 0,",
            "        vy: 0,",
            "        r: this.MarbleR",
            "    });",
            "",
            "    marbles.forEach((m, i) => marbles[i].id = i);",
            "",
            "    return marbles;",
            "}",
            "// ..",
            "}",
            "```",
            "",
            "Believe it or not, this is like one of those _\"Arrange things in a triangle\"_",
            "puzzles you'd see in an old Learn How To Program book. Or a whiteboard",
            "interview.",
            "",
            "It took me 3 hours to build. Easy to get wrong, fiddly to implement.",
            "",
            "We start with a `range` of numbers. From `lines` to `0` in descending order. We",
            "iterate through this list of rows and change each into a list of marbles.",
            "",
            "4 marbles in the first row, 3 in the next, all the way down to 1 in last row.",
            "",
            "For each row, we calculate how much space we have on the `left` and `right` of",
            "the center and make a `range` of horizontal positions from `left` to `right`",
            "with a step of \"1 marble size\". Using these positions and the known row, we",
            "create marbles as needed.",
            "",
            "We use a `.reduce` to flatten nested arrays and add the last marble. That's a",
            "corner case I couldn't solve elegantly, but I'm sure it's possible.",
            "",
            "In the end, we add an `id` to each marble. We're using index as the id, that's",
            "true, but that still ensures we use consistent values throughout our app.",
            "Positions in the array may change.",
            "",
            "#### shoot and startGameLoop",
            "",
            "```{.javascript caption=\"shoot and startGameLoop functions\"}",
            "// src/logic/Physics.js",
            "class Physics {",
            "// ...",
            "",
            "@action startGameLoop() {",
            "    this.marbles = this.initialPositions;",
            "",
            "    this.timer = timer(() => this.simulationStep());",
            "}",
            "",
            "// ...",
            "",
            "@action shoot({ x, y, vx, vy }, i) {",
            "    const maxSpeed = 20;",
            "",
            "    this.marbles[i].x = x;",
            "    this.marbles[i].y = y;",
            "    this.marbles[i].vx = vx < maxSpeed ? vx : maxSpeed;",
            "    this.marbles[i].vy = vy < maxSpeed ? vy : maxSpeed;",
            "}",
            "}",
            "```",
            "",
            "`shoot` and `startGameLoop` are the simplest functions in our physics engine.",
            "`startGameLoop` gets the initial `marbles` array and starts a D3 timer. `shoot`",
            "updates a specific marble's coordinates and speed vector.",
            "",
            ":ok_hand:",
            ""
          ]
        },
        {
          "lectureTitle": "Collision detection",
          "lectureLines": [
            "",
            "#### simulationStep – where collisions collision",
            "",
            "Here comes the fun part. The one with our game loop.",
            "",
            "There's also a video explaining how this works :point_right:",
            "[Watch it on YouTube](https://www.youtube.com/watch?v=H84fmXjTElM). With",
            "hand-drawn sketches that explain the math, and I think that's neat.",
            "",
            "```{.javascript caption=\"Full simulationStep function\"}",
            "",
            "@action simulationStep() {",
            "const { width, height, MarbleR } = this;",
            "",
            "const moveMarble = ({x, y, vx, vy, id}) => {",
            "    let _vx = ((x+vx < MarbleR) ? -vx : (x+vx > width-MarbleR) ? -vx : vx)*.99,",
            "        _vy = ((y+vy < MarbleR) ? -vy : (y+vy > height-MarbleR) ? -vy : vy)*.99;",
            "",
            "    // nearest marble is a collision candidate",
            "    const subdividedSpace = quadtree().extent([[-1, -1],",
            "                                               [this.width+1, this.height+1]])",
            "                                      .x(d => d.:satisfied:",
            "                                      .y(d => d.y)",
            "                                      .addAll(this.marbles",
            "                                                  .filter(m => id !== m.id)),",
            "          candidate = subdividedSpace.find(x, y, MarbleR*2);",
            "",
            "    if (candidate) {",
            "",
            "        // borrowing @air_hadoken's implementation from here:",
            "        // github.com/airhadoken/game_of_circles/",
            "        //   blob/master/circles.js#L64",
            "        const cx = candidate.x,",
            "              cy = candidate.y,",
            "              normx = cx - x,",
            "              normy = cy - y,",
            "              dist = (normx ** 2 + normy ** 2),",
            "              c = (_vx * normx + _vy * normy) / dist * 2.3;",
            "",
            "        _vx = (_vx - c * normx)/2.3;",
            "        _vy = (_vy - c * normy)/2.3;",
            "",
            "        candidate.vx += -_vx;",
            "        candidate.vy += -_vy;",
            "        candidate.x += -_vx;",
            "        candidate.y += -_vy;",
            "    }",
            "",
            "    return {",
            "        x: x + _vx,",
            "        y: y + _vy,",
            "        vx: _vx,",
            "        vy: _vy",
            "    }",
            "};",
            "",
            "this.marbles.forEach((marble, i) => {",
            "    const { x, y, vx, vy } = moveMarble(marble);",
            "",
            "    this.marbles[i].x = x;",
            "    this.marbles[i].y = y;",
            "    this.marbles[i].vx = vx;",
            "    this.marbles[i].vy = vy;",
            "});",
            "}",
            "```",
            "",
            "That's a lot of code :sweat_smile:. Let's break it down.",
            "",
            "You can think of `simulationStep` as a function and a loop. At the bottom,",
            "there is a `.forEach` that applies a `moveMarble` function to each marble.",
            "",
            "```{.javascript caption=\"Loop through marbles\"}",
            "this.marbles.forEach((marble, i) => {",
            "    const { x, y, vx, vy } = moveMarble(marble);",
            "",
            "    this.marbles[i].x = x;",
            "    this.marbles[i].y = y;",
            "    this.marbles[i].vx = vx;",
            "    this.marbles[i].vy = vy;",
            "});",
            "```",
            "",
            "We iterate over the list of marbles, feed them into `moveMarble`, get new",
            "properties, and save them in the main marbles array. MobX _should_ allows us to",
            "change these values inside `moveMarble` and let MobX observables do the heavy",
            "lifting, but more explicit code is easier to read.",
            "",
            "##### moveMarble",
            "",
            "`moveMarble` is itself a hairy function. Stuff happens in 3 steps:",
            "",
            "1. Handle collisions with walls",
            "2. Find collision with closest other marble",
            "3. Handle collision with marble",
            "",
            "**Handling collisions with walls** happens in two lines of code. One per axis.",
            "",
            "```{.javascript caption=\"Detecting wall collisions\"}",
            "let _vx = ((x+vx < MarbleR) ? -vx : (x+vx > width-MarbleR) ? -vx : vx)*.99,",
            "_vy = ((y+vy < MarbleR) ? -vy : (y+vy > height-MarbleR) ? -vy : vy)*.99;",
            "```",
            "",
            "Nested ternary expressions are kinda messy, but good enough. If a marble is",
            "beyond any boundary, we reverse its direction. We _always_ apply a `.99`",
            "friction coefficient so that marbles slow down.",
            "",
            "**Finding collisions** with the next closest marble happens using a quadtree.",
            "Since we don't have too many marbles, we can build a new quadtree every time.",
            "",
            "{aside} A quadtree is a way to subdivide space into areas. It lets us answer",
            "the question of \"What's close enough to me to possibly touch me?\" without",
            "making too many position comparisons.",
            "",
            "Checking every marble with every other marble produces 81 comparisons. Versus 2",
            "comparisons using a quadtree. {/aside}",
            "",
            "```{.javascript caption=\"Finding collision candidates\"}",
            "// nearest marble is a collision candidate",
            "const subdividedSpace = quadtree().extent([[-1, -1],",
            "                                       [this.width+1, this.height+1]])",
            "                              .x(d => d.:satisfied:",
            "                              .y(d => d.y)",
            "                              .addAll(this.marbles",
            "                                          .filter(m => id !== m.id)),",
            "  candidate = subdividedSpace.find(x, y, MarbleR*2);",
            "```",
            "",
            "We're using [`d3-quadtree`](https://github.com/d3/d3-quadtree) for the quadtree",
            "implementation. It takes an `extent`, which tells it how big our space is. An",
            "`x` and `y` accessor tells it how to get coordinates out of our marble objects,",
            "and we use `addAll` to fill the quadtree with marbles.",
            "",
            "To avoid detecting each marble as colliding with itself, we take each marble",
            "out of our list before feeding the quadtree.",
            "",
            "Once we have a quadtree, we use `.find` to look for the nearest marble within",
            "two radiuses – `MarbleR*2` – of the current marble. That's exactly the one",
            "we're colliding with! :smile:",
            "",
            "**Handling collisions with marbles** involves math. The sort of thing you think",
            "you remember from high school, and suddenly realize you don't when the time",
            "comes to use it.",
            "",
            "Code looks like this:",
            "",
            "```{.javascript caption=\"Handling marble collisions\"}",
            "if (candidate) {",
            "",
            "// borrowing @air_hadoken's implementation from here:",
            "// github.com/airhadoken/game_of_circles/",
            "//   blob/master/circles.js#L64",
            "const cx = candidate.x,",
            "      cy = candidate.y,",
            "      normx = cx - x,",
            "      normy = cy - y,",
            "      dist = (normx ** 2 + normy ** 2),",
            "      c = (_vx * normx + _vy * normy) / dist * 2.3;",
            "",
            "_vx = (_vx - c * normx)/2.3;",
            "_vy = (_vy - c * normy)/2.3;",
            "",
            "candidate.vx += -_vx;",
            "candidate.vy += -_vy;",
            "candidate.x += -_vx;",
            "candidate.y += -_vy;",
            "}",
            "",
            "return {",
            "x: x + _vx,",
            "y: y + _vy,",
            "vx: _vx,",
            "vy: _vy",
            "}",
            "```",
            "",
            "Ok, the `return` statement isn't about handling collisions. It updates the",
            "current marble.",
            "",
            "The rest looks like magic. I implemented it and it still looks like magic.",
            "",
            "You can think of `[normx, normy]` as a vector that points from current marble",
            "to collision candidate. It gives us bounce direction. We use the",
            "[euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) formula",
            "to calculate the length of this vector. The distance between the centers of",
            "both marbles.",
            "",
            "Then we calculate the [dot product](https://en.wikipedia.org/wiki/Dot_product)",
            "between our marble's speed vector and the collision direction vector. And we",
            "normalize it by distance. Multiplying distance by `2` accounts for there being",
            "two marbles in the collision. That extra `.3` made the simulation look better.",
            "",
            "Fiddling and experimentation are your best tools for magic values like that",
            ":wink:",
            "",
            "Then we use the dot product scalar to adjust the marble's speed vector.",
            "Dividing by `2` takes into account that half the energy goes to the other",
            "marble. This is true because we assume their masses are equal.",
            "",
            "Finally, we update the `candidate` marble and make sure it bounces off as well.",
            "We do it additively because that's how it happens in real life.",
            "",
            "Two marbles traveling towards each other in exactly opposite directions with",
            "exactly the same speed, will stop dead and stay there. As soon as there's any",
            "misalignment, deflection happens. If one is stationary, it starts moving. If",
            "it's moving in the same direction, it speeds up… etc.",
            "",
            "The end result is",
            "[a decent-looking simulation of billiards](https://swizec.github.io/declarative-canvas-react-konva/).",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Speedy React alternatives",
      "lectures": [
        {
          "lectureTitle": "Using a React alternative like Preact or Inferno",
          "lectureLines": [
            "",
            "# Using a React alternative like Preact or Inferno {#fractal-tree}",
            "",
            "We've been using React so far, and that's worked great. React is fast, easy to",
            "use, and not too hard to understand. However, two alternative frameworks",
            "promise the ease of React, but faster with a smaller footprint.",
            "",
            "[**Preact**](https://github.com/developit/preact) looks just like React when",
            "you're using it, but the smaller code footprint means your apps open faster.",
            "Performing fewer sanity checks at runtime makes it faster to run too. Async",
            "rendering can make your apps feel even faster.",
            "",
            "[**Inferno**](https://github.com/infernojs/inferno) also promises to look just",
            "like React when you're using it, but its sole purpose in life is to be faster.",
            "According to its maintainers, converting to Inferno can improve performance of",
            "your real-world app by up to 110%.",
            "",
            "Both Preact and Inferno have a `-compat` project that lets you convert existing",
            "React projects without any code modifications. While React has gotten much",
            "faster in recent years, so have Preact and Inferno. You should give them a try.",
            "",
            "I know Uber uses Preact for their Uber lite mobile app.",
            ""
          ]
        },
        {
          "lectureTitle": "Stress test your framework with a recursive fractal",
          "lectureLines": [
            "",
            "## Stress test your framework with a recursive fractal",
            "",
            "To show you how these speed improvements look in real life, I've devised a",
            "stress test. A",
            "[pythagorean fractal tree](<https://en.wikipedia.org/wiki/Pythagoras_tree_(fractal)>)",
            "that moves around when you move your mouse.",
            "",
            "![Pythagorean tree](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/pythagorean-tree.png)",
            "",
            "It's a great stress test because a render like this is the worst case scenario",
            "for tree-based rendering. You have 2048 SVG nodes, deeply nested, that all",
            "change props and re-render with every change.",
            "",
            "You can see",
            "[the full code on Github](https://github.com/Swizec/react-fractals). We're",
            "going to focus on the recursive `<Pythagoras>` component.",
            "",
            "### How you too can build a dancing tree fractal",
            "",
            "Equipped with basic trigonometry, you need 3 ingredients to build a dancing",
            "tree:",
            "",
            "- a recursive `<Pythagoras>` component",
            "- a mousemove listener",
            "- a memoized next-step-props calculation function",
            "",
            "We're using a `<Pythagoras>` component for each square and its two children, a",
            "D3 mouse listener, and some math that a reader helped me with. We need D3",
            "because its mouse listeners automatically calculate mouse position relative to",
            "SVG coordinates. [Memoization](https://en.wikipedia.org/wiki/Memoization) in",
            "the math function helps us keep our code faster.",
            "",
            "The `<Pythagoras>` component looks like this:",
            "",
            "```{.javascript caption=\"Recursive <Pythagoras> component\"}",
            "const Pythagoras = ({ w, x, y, heightFactor, lean, left, right, lvl, maxlvl }) => {",
            "if (lvl >= maxlvl || w < 1) {",
            "    return null;",
            "}",
            "",
            "const { nextRight, nextLeft, A, B } = memoizedCalc({",
            "    w: w,",
            "    heightFactor: heightFactor,",
            "    lean: lean",
            "});",
            "",
            "let rotate = '';",
            "",
            "if (left) {",
            "    rotate = `rotate(${-A} 0 ${w})`;",
            "}else if (right) {",
            "    rotate = `rotate(${B} ${w} ${w})`;",
            "}",
            "",
            "return (",
            "    <g transform={`translate(${x} ${y}) ${rotate}`}>",
            "        <rect width={w} height={w}",
            "              x={0} y={0}",
            "              style={{fill: interpolateViridis(lvl/maxlvl)}} />",
            "",
            "        <Pythagoras w={nextLeft}",
            "                    x={0} y={-nextLeft}",
            "                    lvl={lvl+1} maxlvl={maxlvl}",
            "                    heightFactor={heightFactor}",
            "                    lean={lean}",
            "                    left />",
            "",
            "        <Pythagoras w={nextRight}",
            "                    x={w-nextRight} y={-nextRight}",
            "                    lvl={lvl+1} maxlvl={maxlvl}",
            "                    heightFactor={heightFactor}",
            "                    lean={lean}",
            "                    right />",
            "",
            "    </g>",
            ");",
            "};",
            "```",
            "",
            "We break out of recursion when we get too deep or try to draw an invisible",
            "square. Otherwise we:",
            "",
            "- use `memoizedCalc` to do the mathematics",
            "- define different `rotate()` transforms for the `left` and `right` branches",
            "- return an SVG `<rect>` for the current rectangle, and two `<Pythagoras>`",
            "  elements for each branch.",
            "",
            "Most of this code deals with passing props to children, which isn't the most",
            "elegant approach, but it works. The rest is about positioning branches so",
            "corners match up.",
            "",
            "![Corners matching up](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/pythagoras-corners-match-up.png)",
            "",
            "#### The math",
            "",
            "I don't _really_ understand this math, but I sort of know where it's coming",
            "from. It's the [sine law](https://en.wikipedia.org/wiki/Law_of_sines) applied",
            "correctly. The part I failed at",
            "[when I tried](https://swizec.com/blog/fractals-react/swizec/7233) to do it",
            "myself.",
            "",
            "```{.javascript caption=\"Trigonometry that moves our fractal\"}",
            "const memoizedCalc = function () {",
            "const memo = {};",
            "",
            "const key = ({ w, heightFactor, lean }) => [w,heightFactor, lean].join('-');",
            "",
            "return (args) => {",
            "    const memoKey = key(args);",
            "",
            "    if (memo[memoKey]) {",
            "        return memo[memoKey];",
            "    }else{",
            "        const { w, heightFactor, lean } = args;",
            "",
            "        const trigH = heightFactor*w;",
            "",
            "        const result = {",
            "            nextRight: Math.sqrt(trigH**2 + (w * (.5+lean))**2),",
            "            nextLeft: Math.sqrt(trigH**2 + (w * (.5-lean))**2),",
            "            A: Math.deg(Math.atan(trigH / ((.5-lean) * w))),",
            "            B: Math.deg(Math.atan(trigH / ((.5+lean) * w)))",
            "        };",
            "",
            "        memo[memoKey] = result;",
            "        return result;",
            "    }",
            "}",
            "}();",
            "```",
            "",
            "We expanded the basic law of sines with a dynamic `heightFactor` and `lean`",
            "adjustment. We'll control those with mouse movement.",
            "",
            "To improve performance our `memoizedCalc` function has an internal data store",
            "that maintains a hash of every argument tuple and its result. So when we call",
            "`memoizedCalc` with the same arguments multiple times, it reads from cache",
            "instead of recalculating.",
            "",
            "At 11 levels of recursion, `memoizedCalc` is called 2,048 times and only",
            "returns 11 different results. Great candidate for memoization if I ever saw",
            "one.",
            "",
            "Of course, a benchmark would be great here. Maybe `sqrt`, `atan`, and `**`",
            "aren't _that_ slow, and our real bottleneck is redrawing all those nodes on",
            "every mouse move. Hint: it totally is.",
            "",
            "Our ability to memoize calculation also means that we could, in theory, flatten",
            "our rendering. Instead of recursion, we could use iteration and render in",
            "layers. Squares at each level are the same, just at different `(x, y)`",
            "coordinates.",
            "",
            "This, however, would be far too tricky to implement.",
            "",
            "#### The mouse listener",
            "",
            "Inside",
            "[`App.js`](https://github.com/Swizec/react-fractals/blob/master/src/App.js), we",
            "add a mouse event listener. We use D3's because it gives us SVG-relative",
            "position calculation out of the box. With React's, we'd have to do the hard",
            "work ourselves.",
            "",
            "```{.javascript caption=\"Reacting to mouse movement\"}",
            "// App.js",
            "state = {",
            "    currentMax: 0,",
            "    baseW: 80,",
            "    heightFactor: 0,",
            "    lean: 0",
            "};",
            "",
            "componentDidMount() {",
            "  d3select(this.refs.svg)",
            " .on(\"mousemove\", this.onMouseMove.bind(this));",
            "}",
            "",
            "onMouseMove(event) {",
            "  const [x, y] = d3mouse(this.refs.svg),",
            "",
            "  scaleFactor = scaleLinear().domain([this.svg.height, 0])",
            "                         .range([0, .:sunglasses:),",
            "",
            "  scaleLean = scaleLinear().domain([0, this.svg.width/2, this.svg.width])",
            "                       .range([.5, 0, -.5]);",
            "",
            "  this.setState({",
            "heightFactor: scaleFactor(y),",
            "lean: scaleLean(:satisfied:",
            "  });",
            "}",
            "",
            "// ...",
            "",
            "render() {",
            "  // ...",
            "  <svg ref=\"svg\"> //...",
            "  <Pythagoras w={this.state.baseW}",
            "          h={this.state.baseW}",
            "          heightFactor={this.state.heightFactor}",
            "         lean={this.state.lean}",
            "         x={this.svg.width/2-40}",
            "         y={this.svg.height-this.state.baseW}",
            "         lvl={0}",
            "         maxlvl={this.state.currentMax}/>",
            "}",
            "```",
            "",
            "A few things happen here:",
            "",
            "- we set initial `lean` and `heightFactor` to `0`",
            "- in `componentDidMount`, we use `d3.select` and `.on` to add a mouse listener",
            "- we define an `onMouseMove` method as the listener",
            "- render the first `<Pythagoras>` using values from `state`",
            "",
            "The `lean` parameter tells us which way the tree is leaning and how much, the",
            "`heightFactor` tells us how high those triangles should be. We control both",
            "with the mouse position.",
            "",
            "That happens in `onMouseMove`:",
            "",
            "```{.javascript caption=\"Moving the fractal as user moves mouse\"}",
            "onMouseMove(event) {",
            "  const [x, y] = d3mouse(this.refs.svg),",
            "",
            "  scaleFactor = scaleLinear().domain([this.svg.height, 0])",
            "                         .range([0, .:sunglasses:),",
            "",
            "  scaleLean = scaleLinear().domain([0, this.svg.width/2, this.svg.width])",
            "                       .range([.5, 0, -.5]);",
            "",
            "  this.setState({",
            "heightFactor: scaleFactor(y),",
            "lean: scaleLean(:satisfied:",
            "  });",
            "}",
            "```",
            "",
            "`d3mouse` - an imported `mouse` function from `d3-selection` - gives us cursor",
            "position relative to the SVG element. Two linear scales give us `scaleFactor`",
            "and `scaleLean` values, which we put into component state.",
            "",
            "When we feed a change to `this.setState`, it triggers a re-render of the entire",
            "tree, our `memoizedCalc` function returns new values, and the final result is a",
            "dancing tree.",
            "",
            "![Dancing Pythagoras tree](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/pythagoras-dancing.gif)",
            "",
            "Beautious. :heart_eyes:",
            ""
          ]
        },
        {
          "lectureTitle": "Stress testing Preact and Inferno",
          "lectureLines": [
            "",
            "## Trying the stress test in Preact and Inferno",
            "",
            "The Pythagoras tree example got converted into 6 different UI libraries: React,",
            "Preact, Inferno, Vue, Angular 2, and CycleJS.",
            "",
            "Mostly by the creators of those libraries themselves because they're awesome",
            "and much smarter than I am. You can see the result, in gifs, on",
            "[my blog here](https://swizec.com/blog/animating-svg-nodes-react-preact-inferno-vue/swizec/7311).",
            "",
            "We're focusing on React-like libraries, so here's a rundown of changes required",
            "for Preact and Inferno with links to full code.",
            "",
            "### Preact",
            "",
            "Implemented by Jason Miller, creator of Preact.",
            "[Full code on Github](https://github.com/developit/preact-fractals)",
            "",
            "![](https://raw.githubusercontent.com/Swizec/react-d3js-es6-ebook/2018-version/manuscript/resources/images/es6v2/preact-pythagora.gif)",
            "",
            "Jason used the `preact-compat` layer to make Preact pretend that it's React.",
            "This might impact performance.",
            "",
            "What I love about the Preact example is that it uses async rendering to look",
            "smoother. You can see the redraw cycle lag behind the mouse movement producing",
            "curious effects.",
            "",
            "I like it.",
            "",
            "Here's how he did it:",
            "[full diff on github](https://github.com/Swizec/react-fractals/compare/master...developit:master)",
            "",
            "In `package.json`, he added `preact`, `preact-compat`, and preact -compat",
            "clones for React libraries. I guess you need the latter so you don't have to",
            "change your imports.",
            "",
            "He changed the functional `Pythagoras` component into a stateful component to",
            "enable async rendering.",
            "",
            "```{.javascript caption=\"Change <Pythagoras> to a class\"}",
            "// src/Pythagoras.js",
            "export default class {",
            "  render(props) {",
            "return Pythagoras(props);",
            "  }",
            "}",
            "```",
            "",
            "And enabled debounced asynchronous rendering:",
            "",
            "```{.javascript caption=\"Debounce rendering\"}",
            "// src/index.js",
            "import { options } from 'preact';",
            "options.syncComponentUpdates = false;",
            "",
            "//option 1:  rIC + setTimeout fallback",
            "let timer;",
            "options.debounceRendering = f => {",
            "clearTimeout(timer);",
            "timer = setTimeout(f, 100);",
            "requestIdleCallback(f);",
            "};",
            "```",
            "",
            "My favorite part is that you can use Preact as a drop-in replacement for React",
            "and it Just Works™ _and_ works well. This is promising for anyone who wants a",
            "quick win in their codebase.",
            "",
            "### Inferno",
            "",
            "Implemented by Dominic Gannaway, creator of Inferno.",
            "[Full code on Github](https://github.com/trueadm/inferno-fractals)",
            "",
            "You _can_ use Inferno as a drop-in replacement for React, and I did when I",
            "tried to build this myself. Dominic says that impacts performance, though, so",
            "he made a proper fork. You can see the",
            "[full diff on Github](https://github.com/Swizec/react-fractals/compare/master...trueadm:master)",
            "",
            "Dominic changed all `react-scripts` references to `inferno-scripts`, and it's a",
            "good sign that such a thing exists. He also changed the `react` dependency to",
            "`inferno-beta36`, but I'm sure it's out of beta by the time you're reading",
            "this. The experiment was done in December 2016.",
            "",
            "From there, the main changes are to the imports – React becomes Inferno – and",
            "he changed some class methods to bound fat arrow functions. Probably a",
            "stylistic choice.",
            "",
            "He also had to change a string-based ref into a callback ref. Inferno doesn't",
            "do string-based refs for performance reasons, and we need refs so we can use D3",
            "to detect mouse position on SVG.",
            "",
            "```{.javascript caption=\"Change ref to callback\"}",
            "// src/App.js",
            "",
            "class App extends Component {",
            "  // ...",
            "  svgElemeRef = (domNode) => {",
            "this.svgElement = domNode;",
            "  }",
            "  // ...",
            "  render() {",
            "// ..",
            "<svg width={this.svg.width} height={this.svg.height} ref={this.svgElemeRef }>",
            "  }",
            "```",
            "",
            "In the core `Pythagoras` component, he added two Inferno-specific props:",
            "`noNormalize` and `hasNonKeyedChildren`.",
            "",
            "According to [this issue](https://github.com/trueadm/inferno/issues/565),",
            "`noNormalize` is a benchmark-focused flag that improves performance, and I",
            "can't figure out what `hasNonKeyedChildren` does. I assume both are performance",
            "optimizations for the Virtual DOM diffing algorithm.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "Refactor your components with React Hooks",
      "lectures": [
        {
          "lectureTitle": "An intro to hooks",
          "lectureLines": [
            "",
            "# Refactor your components with React Hooks",
            "",
            "Hooks launched with great fanfare and community excitement in February 2019. A",
            "whole new way to write React components.",
            "",
            "Not a fundamental change, the React team would say, but a mind shift after all.",
            "A change in how you think about state, side effects, and component structure.",
            "You might not like hooks at first. With a little practice they're going to feel",
            "more natural than the component lifecycle model you're used to now.",
            "",
            "Hooks exist to:",
            "",
            "- help you write less code for little bits of logic",
            "- help you move logic out of your components",
            "- help you reuse logic between components",
            "",
            "Some say it removes complexity around the `this` keyword in JavaScript and I'm",
            "not sure that it does. Yes, there's no more `this` because everything is a",
            "function, that's true. But you replace that with passing a lot of function",
            "arguments around and being careful about function scope.",
            "",
            "My favorite React Hooks magic trick is that you can and should write your own.",
            "Reusable or not, a custom hook almost always cleans up your code.",
            "",
            "Oh and good news! Hooks are backwards compatible. You can write new stuff with",
            "hooks and keep your old stuff unchanged. :ok_hand:",
            "",
            "In this section we're going to look at the core React hooks, talk about the",
            "most important hook for dataviz, then refactor our big example from earlier to",
            "use hooks.",
            "",
            "You'll need to upgrade React to at least version `16.8.0` to use hooks.",
            ""
          ]
        },
        {
          "lectureTitle": "useState, useEffect, and useContext",
          "lectureLines": [
            "",
            "## useState, useEffect, and useContext",
            "",
            "React comes with",
            "[a bunch of basic and advanced hooks](https://reactjs.org/docs/hooks-reference.html).",
            "The core hooks are:",
            "",
            "- `useState` for managing state",
            "- `useEffect` for side-effects",
            "- `useContext` for React's context API",
            "",
            "Here's how to think about them in a nutshell :point_down:",
            "",
            "### useState",
            "",
            "The `useState` hook replaces pairs of state getters and setters.",
            "",
            "```{.javascript caption=\"State without hooks\"}",
            "class myComponent extends React.Component {",
            "\tstate = {",
            "\t  value: 'default'",
            "\t}",
            "",
            "\thandleChange = (e) => this.setState({",
            "\t  value: e.target.value",
            "\t})",
            "",
            "\trender() {",
            "\t  const { value } = this.state;",
            "",
            "\t  return <input value={value} onChange={handleChange} />",
            "\t}",
            "}",
            "```",
            "",
            ":point_down:",
            "",
            "```{.javascript caption=\"useState hook\"}",
            "const myComponent = () => {",
            "  const [value, setValue] = useState('default');",
            "",
            "  const handleChange = (e) => setValue(e.target.value)",
            "",
            "  return <input value={value} onChange={handleChange} />",
            "}",
            "```",
            "",
            "Less code to write and understand.",
            "",
            "In a class component you:",
            "",
            "- set a default value",
            "- create an `onChange` callback that fires `setState`",
            "- read value from state before rendering etc.",
            "",
            "Without modern fat arrow syntax you might run into trouble with binds.",
            "",
            "The hook approach moves that boilerplate to React's plate. You call `useState`.",
            "It takes a default value and returns a getter and a setter.",
            "",
            "You call that setter in your change handler.",
            "",
            "Behind the scenes React subscribes your component to that change. Your",
            "component re-renders.",
            "",
            "### useEffect",
            "",
            "`useEffect` replaces the `componentDidMount`, `componentDidUpdate`,",
            "`shouldComponentUpdate`, `componentWillUnmount` quadfecta. It's like a",
            "trifecta, but four.",
            "",
            "Say you want a side-effect when your component updates, like make an API call.",
            "Gotta run it on mount and update. Want to subscribe to a DOM event? Gotta",
            "unsubscribe on unmount.",
            "",
            "Wanna do all this only when certain props change? Gotta check for that.",
            "",
            "Class:",
            "",
            "```{.javascript caption=\"Side-effects without hooks\"}",
            "class myComp extends Component {",
            "  state = {",
            "\t  value: 'default'",
            "\t}",
            "",
            "\thandleChange = (e) => this.setState({",
            "\t  value: e.target.value",
            "\t})",
            "",
            "\tsaveValue = () => fetch('/my/endpoint', {",
            "\t\tmethod: 'POST'",
            "\t\tbody: this.state.value",
            "\t})",
            "",
            "\tcomponentDidMount() {",
            "\t\tthis.saveValue();",
            "\t}",
            "",
            "\tcomponentDidUpdate(prevProps, prevState) {",
            "\t\tif (prevState.value !== this.state.value) {",
            "\t\t\tthis.saveValue()",
            "\t\t}",
            "\t}",
            "",
            "\trender() {",
            "\t  const { value } = this.state;",
            "",
            "\t  return <input value={value} onChange={handleChange} />",
            "\t}",
            "}",
            "```",
            "",
            ":point_down:",
            "",
            "```{.javascript caption=\"useEffect hook\"}",
            "const myComponent = () => {",
            "  const [value, setValue] = useState('default');",
            "",
            "  const handleChange = (e) => setValue(e.target.value)",
            "  const saveValue = () => fetch('/my/endpoint', {",
            "\t\tmethod: 'POST'",
            "\t\tbody: value",
            "\t})",
            "",
            "\tuseEffect(saveValue, [value]);",
            "",
            "  return <input value={value} onChange={handleChange} />",
            "}",
            "```",
            "",
            "So much less code!",
            "",
            "`useEffect` runs your function on `componentDidMount` and `componentDidUpdate`.",
            "And that second argument, the `[value]` part, tells it to run only when `value`",
            "changes.",
            "",
            "No need to double check with a conditional. If your effect updates the",
            "component itself through a state setter, the second argument acts as a",
            "`shouldComponentUpdate` of sorts.",
            "",
            "When you return a method from `useEffect`, it acts as a `componentWillUnmount`.",
            "Listening to, say, your mouse position looks like this:",
            "",
            "```{.javascript caption=\"A mouse listener hook\"}",
            "const [mouseX, setMouseX] = useState();",
            "const handleMouse = (e) => setMouseX(e.screenX);",
            "",
            "useEffect(() => {",
            "\twindow.addEventListener('mousemove', handleMouse);",
            "\treturn () => window.removeEventListener(handleMouse);",
            "})",
            "```",
            "",
            "Neat :okay_hand:",
            "",
            "### useContext",
            "",
            "`useContext` cleans up your render prop callbacky hell.",
            "",
            "```{.javascript caption=\"Context without hooks\"}",
            "const SomeContext = React.createContext()",
            "",
            "// ...",
            "",
            "<SomeContext.Consumer>",
            "  {state => ...}",
            "</SomeContext.Consumer>",
            "```",
            "",
            ":point_down:",
            "",
            "```{.javascript caption=\"Context with hooks\"}",
            "const state = useContext(SomeContext)",
            "```",
            "",
            "Context state becomes just a value in your function. React auto subscribes to",
            "all updates.",
            "",
            "And those are the core hooks. useState, useEffect, and useContext. You can use",
            "them to build almost everything. :okay_hand:",
            ""
          ]
        },
        {
          "lectureTitle": "useMemo is your new best friend",
          "lectureLines": [
            "",
            "## useMemo is your new best dataviz friend",
            "",
            "My favorite hook for making React and D3 work together is `useMemo`. It's like",
            "a combination of `useEffect` and `useState`.",
            "",
            "Remember how the rest of this course focused on syncing D3's internal state",
            "with React's internal state and complications around large datasets and",
            "speeding up your D3 code to avoid recomputing on every render?",
            "",
            "All that goes away with `useMemo` – it memoizes values returned from a function",
            "and recomputes them when particular props change. Think of it like a cache.",
            "",
            "Say you have a D3 linear scale. You want to update its range when your",
            "component's width changes.",
            "",
            "```{.javascript caption=\"useMemo for a scale\"}",
            "function MyComponent({ data, width }) {",
            "\tconst scale = useMemo(() =>",
            "\t\td3.scaleLinear()",
            "\t\t\t.domain([0, 1])",
            "\t\t\t.range([0, width])",
            "\t), [width])",
            "",
            "\treturn <g> ... </g>",
            "}",
            "```",
            "",
            "`useMemo` takes a function that returns a value to be memoized. In this case",
            "that's the linear scale.",
            "",
            "You create the scale same way you always would. Initiate a scale, set the",
            "domain, update the range. No fancypants trickery.",
            "",
            "`useMemo`'s second argument works much like useEffect's does: It tells React",
            "which values to observe for change. When that value changes, `useMemo` reruns",
            "your function and gets a new scale.",
            "",
            "Don't rely on `useMemo` running only once however. Memoization is meant as a",
            "performance optimization, a hint if you will, not as a syntactical guarantee of",
            "uniqueness.",
            "",
            "And that's exactly what we want. No more futzing around with",
            "`getDerivedStateFromProps` and `this.state`. Just `useMemo` and leave the rest",
            "to React. :v:",
            ""
          ]
        },
        {
          "lectureTitle": "my useD3 hook",
          "lectureLines": [
            "",
            "## my useD3 hook",
            "",
            "Remember when we talked about D3 blackbox rendering? I built a hook for that so",
            "you don't have to mess around with HOCs anymore :)",
            "",
            "Read the full docs at [d3blackbox.com](https://d3blackbox.com/)",
            "",
            "It works as a combination of `useRef` and `useEffect`. Hooks into component",
            "re-renders, gives you control of the anchor element, and re-runs your D3 render",
            "function on every component render.",
            "",
            "You use it like this:",
            "",
            "```{.javascript caption=\"useD3 for quick integrations\"}",
            "import { useD3 } from \"d3blackbox\";",
            "function renderSomeD3(anchor) {",
            "d3.select(anchor);",
            "// ...",
            "}",
            "",
            "const MyD3Component = ({ x, y }) => {",
            "const refAnchor = useD3(anchor => renderSomeD3(anchor));",
            "return <g ref={refAnchor} transform={`translate(${x}, ${y})`} />;",
            "};",
            "```",
            "",
            "You'll see how this works in more detail when we refactor the big example to",
            "hooks. We'll use `useD3` to build axes.",
            ""
          ]
        },
        {
          "lectureTitle": "Refactoring our big example to hooks",
          "lectureLines": [
            "",
            "## Refactoring our big example to hooks",
            "",
            "I considered writing this section out as text, but I don't think that's the",
            "best way to learn about refactoring. Too many moving pieces. You should watch",
            "the videos :)",
            "",
            "As always, they're cut so you can enjoy bitesized pieces.",
            ""
          ]
        }
      ]
    },
    {
      "sectionTitle": "You finished! :rocket:",
      "lectures": [
        {
          "lectureTitle": "You're the best",
          "lectureLines": [
            "",
            "# Conclusion",
            "",
            "You finished the book! You're my new favorite person \\\\o/",
            "",
            "You've built a really big interactive data visualization, a few silly",
            "animations, learned the basics of Redux and MobX, looked into rendering your",
            "stuff on canvas, and considered React alternatives.",
            "",
            "Right now you might be thinking _\"How the hell does this all fit together to",
            "help me build interactive graphs and charts?\"_ You've learned the building",
            "blocks!",
            "",
            "First, you learned the basics. How to make React and D3 like each other, how to",
            "approach rendering, what to do with state. Then you built a big project to see",
            "how it fits together.",
            "",
            "Then you learned animation basics. How to approach updating components with",
            "fine grained control and how to do transitions. You learned that tricks from",
            "the gaming industry work here, too.",
            "",
            "You're an expert React slinger now! I think that's awesome.",
            "",
            "Even if you didn't build the projects, you still learned the theory. When the",
            "right problem presents itself, you'll think of this book and remember what to",
            "do. Or at least know where to look to find a solution.",
            "",
            "At the very least, you know where to look to find a solution. This book is",
            "yours forever.",
            "",
            "I hope you have enjoyed this book. Tweet [\\@Swizec](https://twitter.com/Swizec)",
            "and tell me what you're building. :smile:",
            "",
            "Questions? Poke me on twitter. I’m [\\@Swizec](https://twitter.com/Swizec). Or",
            "send me an email to [hi@swizec.com](mailto:hi@swizec.com). I read every email",
            "and reply on a best effort basis.",
            ""
          ]
        }
      ]
    }
  ]
}
